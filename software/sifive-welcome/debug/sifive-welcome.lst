
/Users/i/Documents/Risc-V/freedom-e-sdk/software/sifive-welcome/debug/sifive-welcome.elf:     file format elf32-littleriscv
/Users/i/Documents/Risc-V/freedom-e-sdk/software/sifive-welcome/debug/sifive-welcome.elf
architecture: riscv:rv32, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x20400000

Program Header:
    LOAD off    0x00001000 vaddr 0x20400000 paddr 0x20400000 align 2**12
         filesz 0x00006f44 memsz 0x00006f44 flags rwx
    LOAD off    0x000087e8 vaddr 0x800007e8 paddr 0x800007e8 align 2**12
         filesz 0x00000000 memsz 0x00000cb0 flags rw-
    LOAD off    0x00008000 vaddr 0x80000000 paddr 0x20406f48 align 2**12
         filesz 0x000007e8 memsz 0x000007e8 flags rw-
    LOAD off    0x000087e8 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags ---
    LOAD off    0x000087e8 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags ---

Sections:
Idx Name              Size      VMA       LMA       File off  Algn  Flags
  0 .init             00000194  20400000  20400000  00001000  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text             00005c38  20400200  20400200  00001200  2**7  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata           00001100  20405e38  20405e38  00006e38  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array       0000000c  20406f38  20406f38  00007f38  2**2  CONTENTS, ALLOC, LOAD, DATA
  4 .data             000007e8  80000000  20406f48  00008000  2**3  CONTENTS, ALLOC, LOAD, DATA
  5 .bss              000000b0  800007e8  800007e8  000087e8  2**3  ALLOC
  6 .stack            00000400  80000898  80000898  000087e8  2**0  ALLOC
  7 .heap             00000800  80000c98  80000c98  000087e8  2**0  ALLOC
  8 .debug_info       0002c0f5  00000000  00000000  000087e8  2**0  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev     00003de0  00000000  00000000  000348dd  2**0  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges    00000c18  00000000  00000000  000386c0  2**3  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges     00000a20  00000000  00000000  000392d8  2**3  CONTENTS, READONLY, DEBUGGING
 12 .debug_line       0000c83f  00000000  00000000  00039cf8  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_str        000049aa  00000000  00000000  00046537  2**0  CONTENTS, READONLY, DEBUGGING
 14 .comment          00000028  00000000  00000000  0004aee1  2**0  CONTENTS, READONLY
 15 .riscv.attributes 0000002b  00000000  00000000  0004af09  2**0  CONTENTS, READONLY
 16 .debug_frame      000030fc  00000000  00000000  0004af34  2**2  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
20400000 l    d  .init	00000000 .init
20400200 l    d  .text	00000000 .text
20405e38 l    d  .rodata	00000000 .rodata
20406f38 l    d  .init_array	00000000 .init_array
80000000 l    d  .data	00000000 .data
800007e8 l    d  .bss	00000000 .bss
80000898 l    d  .stack	00000000 .stack
80000c98 l    d  .heap	00000000 .heap
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .riscv.attributes	00000000 .riscv.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 libriscv__mmachine__qemu-sifive-e31_a-entry.o
20400060 l       .init	00000000 early_trap_vector
00000000 l    df *ABS*	00000000 synchronize_harts.c
00000000 l    df *ABS*	00000000 crt0.o
20400136 l       .init	00000000 _skip_init
20406f20 l       .rodata	00000000 argv
20406f24 l       .rodata	00000000 envp
20406f28 l       .rodata	00000000 name
00000000 l    df *ABS*	00000000 sifive-welcome.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
20400a20 l     F .text	00000068 std
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 cpu.c
00000000 l    df *ABS*	00000000 interrupt.c
00000000 l    df *ABS*	00000000 led.c
00000000 l    df *ABS*	00000000 riscv_clint0.c
204014c0 l     F .text	0000002a __metal_driver_sifive_clint0_control_base
204014ea l     F .text	00000028 __metal_driver_sifive_clint0_num_interrupts
20401512 l     F .text	0000003c __metal_driver_sifive_clint0_interrupt_parents
2040154e l     F .text	00000030 __metal_driver_sifive_clint0_interrupt_lines
204016ae l     F .text	00000032 _get_cpu_intc
00000000 l    df *ABS*	00000000 riscv_cpu.c
20401be0 l     F .text	00000024 __metal_driver_cpu_hartid
20401c04 l     F .text	0000002a __metal_driver_cpu_timebase
20401c2e l     F .text	0000002a __metal_driver_cpu_interrupt_controller
00000000 l    df *ABS*	00000000 riscv_plic0.c
204034e2 l     F .text	0000002a __metal_driver_sifive_plic0_control_base
2040350c l     F .text	00000028 __metal_driver_sifive_plic0_num_interrupts
20403534 l     F .text	00000028 __metal_driver_sifive_plic0_max_priority
2040355c l     F .text	00000028 __metal_driver_sifive_plic0_interrupt_parents
20403584 l     F .text	00000022 __metal_driver_sifive_plic0_interrupt_lines
00000000 l    df *ABS*	00000000 sifive_fe310-g000_hfrosc.c
20403ace l     F .text	0000001a __metal_driver_sifive_fe310_g000_hfrosc_ref
20403ae8 l     F .text	00000016 __metal_driver_sifive_fe310_g000_hfrosc_config_base
20403afe l     F .text	00000014 __metal_driver_sifive_fe310_g000_hfrosc_config_offset
20403b12 l     F .text	00000012 __metal_driver_sifive_fe310_g000_prci_vtable
00000000 l    df *ABS*	00000000 sifive_fe310-g000_hfxosc.c
20403bca l     F .text	0000001a __metal_driver_sifive_fe310_g000_hfxosc_ref
20403be4 l     F .text	00000016 __metal_driver_sifive_fe310_g000_hfxosc_config_base
20403bfa l     F .text	00000014 __metal_driver_sifive_fe310_g000_hfxosc_config_offset
20403c0e l     F .text	00000012 __metal_driver_sifive_fe310_g000_prci_vtable
00000000 l    df *ABS*	00000000 sifive_fe310-g000_pll.c
20403cb6 l     F .text	0000001a __metal_driver_sifive_fe310_g000_pll_pllsel0
20403cd0 l     F .text	0000001a __metal_driver_sifive_fe310_g000_pll_pllref
20403cea l     F .text	00000016 __metal_driver_sifive_fe310_g000_pll_divider_base
20403d00 l     F .text	00000014 __metal_driver_sifive_fe310_g000_pll_divider_offset
20403d14 l     F .text	00000012 __metal_driver_sifive_fe310_g000_pll_config_base
20403d26 l     F .text	00000010 __metal_driver_sifive_fe310_g000_pll_config_offset
20403d36 l     F .text	00000016 __metal_driver_sifive_fe310_g000_pll_init_rate
20403d4c l     F .text	00000012 __metal_driver_sifive_fe310_g000_prci_base
20403d5e l     F .text	00000012 __metal_driver_sifive_fe310_g000_prci_vtable
204065c4 l     O .rodata	00000880 pll_configs
20403d70 l     F .text	0000004e get_pll_config_freq
20403dbe l     F .text	00000028 metal_sifive_fe310_g000_pll_init
20403ffa l     F .text	000000ac find_closest_config
204040a6 l     F .text	00000132 configure_pll
2040433e l     F .text	0000002a use_hfxosc
00000000 l    df *ABS*	00000000 sifive_fe310-g000_prci.c
20404368 l     F .text	00000012 __metal_driver_sifive_fe310_g000_prci_base
00000000 l    df *ABS*	00000000 sifive_gpio-leds.c
204043e0 l     F .text	0000004a __metal_driver_sifive_gpio_led_gpio
2040442a l     F .text	00000044 __metal_driver_sifive_gpio_led_pin
2040446e l     F .text	0000005c __metal_driver_sifive_gpio_led_label
00000000 l    df *ABS*	00000000 sifive_gpio0.c
2040460a l     F .text	00000026 __metal_driver_sifive_gpio0_base
20404630 l     F .text	0000002a __metal_driver_sifive_gpio0_interrupt_parent
2040465a l     F .text	000001b4 __metal_driver_sifive_gpio0_interrupt_lines
00000000 l    df *ABS*	00000000 sifive_test0.c
20404ec4 l     F .text	00000026 __metal_driver_sifive_test0_base
00000000 l    df *ABS*	00000000 sifive_uart0.c
20404f34 l     F .text	0000002a __metal_driver_sifive_uart0_control_base
20404f5e l     F .text	0000002e __metal_driver_sifive_uart0_interrupt_parent
20404f8c l     F .text	00000028 __metal_driver_sifive_uart0_interrupt_line
20404fb4 l     F .text	0000002e __metal_driver_sifive_uart0_clock
20404fe2 l     F .text	0000002a __metal_driver_sifive_uart0_pinmux
2040500c l     F .text	0000002a __metal_driver_sifive_uart0_pinmux_output_selector
20405036 l     F .text	0000002a __metal_driver_sifive_uart0_pinmux_source_selector
2040522e l     F .text	000000d8 pre_rate_change_callback_func
20405306 l     F .text	0000002e post_rate_change_callback_func
00000000 l    df *ABS*	00000000 clock.c
00000000 l    df *ABS*	00000000 gpio.c
00000000 l    df *ABS*	00000000 shutdown.c
00000000 l    df *ABS*	00000000 uart.c
00000000 l    df *ABS*	00000000 libriscv__mmachine__qemu-sifive-e31_a-vector.o
20405780 l       .text	00000000 IRQ_0
20405784 l       .text	00000000 IRQ_1
20405788 l       .text	00000000 IRQ_2
2040578c l       .text	00000000 IRQ_3
20405790 l       .text	00000000 IRQ_4
20405794 l       .text	00000000 IRQ_5
20405798 l       .text	00000000 IRQ_6
2040579c l       .text	00000000 IRQ_7
204057a0 l       .text	00000000 IRQ_8
204057a4 l       .text	00000000 IRQ_9
204057a8 l       .text	00000000 IRQ_10
204057ac l       .text	00000000 IRQ_11
204057b0 l       .text	00000000 IRQ_12
204057b4 l       .text	00000000 IRQ_13
204057b8 l       .text	00000000 IRQ_14
204057bc l       .text	00000000 IRQ_15
204057c0 l       .text	00000000 IRQ_LC0
204057c4 l       .text	00000000 IRQ_LC1
204057c8 l       .text	00000000 IRQ_LC2
204057cc l       .text	00000000 IRQ_LC3
204057d0 l       .text	00000000 IRQ_LC4
204057d4 l       .text	00000000 IRQ_LC5
204057d8 l       .text	00000000 IRQ_LC6
204057dc l       .text	00000000 IRQ_LC7
204057e0 l       .text	00000000 IRQ_LC8
204057e4 l       .text	00000000 IRQ_LC9
204057e8 l       .text	00000000 IRQ_LC10
204057ec l       .text	00000000 IRQ_LC11
204057f0 l       .text	00000000 IRQ_LC12
204057f4 l       .text	00000000 IRQ_LC13
204057f8 l       .text	00000000 IRQ_LC14
204057fc l       .text	00000000 IRQ_LC15
00000000 l    df *ABS*	00000000 fixed-clock.c
20405800 l     F .text	00000062 __metal_driver_fixed_clock_rate
00000000 l    df *ABS*	00000000 sys_close.c
00000000 l    df *ABS*	00000000 sys_fstat.c
00000000 l    df *ABS*	00000000 sys_isatty.c
00000000 l    df *ABS*	00000000 sys_lseek.c
00000000 l    df *ABS*	00000000 sys_read.c
00000000 l    df *ABS*	00000000 sys_sbrk.c
800007e4 l     O .data	00000004 brk
00000000 l    df *ABS*	00000000 sys_write.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 strcat.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 __atexit.c
800007f4 l     O .bss	0000008c _global_atexit0
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 tty.c
20405e00 l     F .text	00000024 metal_tty_init
00000000 l    df *ABS*	00000000 sys_exit.c
00000000 l    df *ABS*	00000000 impure.c
80000000 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 inline.c
00000000 l    df *ABS*	00000000 
20406f44 l       .init_array	00000000 __fini_array_end
20406f44 l       .init_array	00000000 __fini_array_start
20406f44 l       .init_array	00000000 __init_array_end
20406f38 l       .init_array	00000000 __preinit_array_end
20406f38 l       .init_array	00000000 __init_array_start
20406f38 l       .init_array	00000000 __preinit_array_start
2040058c g     F .text	0000002e putchar
20406f00 g     O .rodata	00000020 __metal_driver_vtable_sifive_uart0
204044ca g     F .text	00000036 __metal_driver_led_exist
2040126c g     F .text	00000026 metal_cpu_timer_get_interrupt_id
2040115c g     F .text	0000002a _isatty_r
20405c4a g     F .text	00000012 strcpy
20402452  w    F .text	00000096 metal_lc4_interrupt_vector_handler
204005ba g     F .text	000000da _puts_r
20401186 g     F .text	0000002e _lseek_r
20405498 g     F .text	00000026 metal_clock_get_rate_hz
2040518e g     F .text	000000a0 __metal_driver_sifive_uart0_set_baud_rate
20401886 g     F .text	00000054 __metal_driver_riscv_clint0_set_vector_mode
204023bc  w    F .text	00000096 metal_lc3_interrupt_vector_handler
20402c42 g     F .text	00000038 __metal_valid_interrupt_id
20405656 g     F .text	00000040 metal_gpio_toggle_pin
20403068 g     F .text	0000001c __metal_driver_riscv_cpu_controller_get_vector_mode
80000f90 g       .data	00000000 __global_pointer$
20401246 g     F .text	00000026 metal_cpu_timer_interrupt_controller
20401406 g     F .text	00000024 metal_led_off
20405444 g     F .text	00000054 _metal_clock_append_to_callbacks
204035d4 g     F .text	00000038 __metal_plic0_complete_interrupt
20402ec2 g     F .text	0000014e __metal_driver_riscv_cpu_controller_interrupt_register
2040109c g     F .text	00000036 __sseek
20400ad6 g     F .text	0000006a __sinit
20406e70 g     O .rodata	00000014 __metal_driver_vtable_sifive_led
204006a2 g     F .text	000000c0 __swbuf_r
20400a92 g     F .text	00000044 __sfmoreglue
204011b6 g     F .text	00000002 __malloc_unlock
204012b8 g     F .text	0000002e metal_cpu_get
204013e2 g     F .text	00000024 metal_led_on
80000748 g     O .data	00000020 __metal_dt_serial_10013000
20404a9e g     F .text	0000004a __metal_driver_sifive_gpio0_disable_io
20406324 g     O .rodata	0000004c __metal_driver_vtable_riscv_clint0
80000898 g       .bss	00000000 metal_segment_bss_target_end
2040157e g     F .text	0000009a __metal_clint0_mtime_get
20403476 g     F .text	0000002e __metal_driver_cpu_get_instruction_length
00000000 g       *ABS*	00000000 __metal_chicken_bit
2040484e g     F .text	00000046 __metal_driver_sifive_gpio0_disable_input
20404eea g     F .text	0000004a __metal_driver_sifive_test0_exit
20405a34 g     F .text	0000000c __errno
80000000 g       .data	00000000 metal_segment_itim_target_start
204050a4 g     F .text	00000034 __metal_driver_sifive_uart0_txready
204055ae g     F .text	00000040 metal_gpio_enable_output
20400070 g     F .init	0000000e __metal_synchronize_harts
800007e8 g       .bss	00000000 metal_segment_bss_target_start
20401618 g     F .text	00000096 __metal_driver_riscv_clint0_mtimecmp_set
20401130 g     F .text	0000002c _fstat_r
20404cee g     F .text	00000188 __metal_driver_sifive_gpio0_clear_int
80000894 g     O .bss	00000004 errno
20403e8a g     F .text	00000170 __metal_driver_sifive_fe310_g000_pll_get_rate_hz
00000400 g       *ABS*	00000000 __stack_size
2040550a g     F .text	00000032 metal_clock_register_pre_rate_change_callback
20404548 g     F .text	00000040 __metal_driver_led_on
20402740  w    F .text	00000096 metal_lc9_interrupt_vector_handler
20406578 g     O .rodata	0000004c __metal_driver_vtable_riscv_plic0
20406538 g     O .rodata	00000040 __metal_driver_vtable_cpu
2040572a g     F .text	0000002e metal_uart_set_baud_rate
20405334 g     F .text	000000d0 __metal_driver_sifive_uart0_init
204030fc g     F .text	00000072 __metal_driver_cpu_mcycle_get
20406e44 g     O .rodata	0000000c __metal_driver_vtable_sifive_fe310_g000_pll
80000c98 g       .heap	00000000 metal_segment_heap_target_start
20400a88 g     F .text	0000000a _cleanup_r
800007a4 g     O .data	00000004 __metal_dt_cpu_0
204026aa  w    F .text	00000096 metal_lc8_interrupt_vector_handler
204041d8 g     F .text	00000166 __metal_driver_sifive_fe310_g000_pll_set_rate_hz
20400694 g     F .text	0000000e puts
20402998  w    F .text	00000096 metal_lc13_interrupt_vector_handler
204055ee g     F .text	00000068 metal_gpio_set_pin
20401dc6 g     F .text	00000018 __metal_default_exception_handler
204058c8 g     F .text	00000026 _fstat
20401bac g     F .text	00000034 __metal_driver_riscv_clint0_set_interrupt
20403670 g     F .text	00000062 __metal_plic0_set_priority
20403084 g     F .text	0000005c __metal_driver_riscv_cpu_controller_set_vector_mode
20401c58 g     F .text	00000030 __metal_driver_cpu_get
204064ec g     O .rodata	0000004c __metal_driver_vtable_riscv_cpu_intc
20401cba g     F .text	00000018 __metal_interrupt_global_disable
204013be g     F .text	00000024 metal_led_enable
20402614  w    F .text	00000096 metal_lc7_interrupt_vector_handler
204027d6  w    F .text	00000096 metal_lc10_interrupt_vector_handler
20400ff4 g     F .text	0000002a _sbrk_r
20403a86 g     F .text	00000048 __metal_driver_riscv_plic0_disable
20402d36 g     F .text	0000004e __metal_exception_register
2040142a g     F .text	00000096 metal_led_get_rgb
204011b8 g     F .text	0000002e _read_r
20403290 g     F .text	0000001a __metal_driver_cpu_timer_controller_interrupt
20404930 g     F .text	00000040 __metal_driver_sifive_gpio0_enable_output
20401eb6 g     F .text	00000068 __metal_default_sw_handler
2040553c g     F .text	00000032 metal_clock_register_post_rate_change_callback
80000078 g     O .data	0000000c __metal_dt_clock_2
20405060 g     F .text	00000020 __metal_driver_sifive_uart0_interrupt_controller
204058ee g     F .text	00000020 _isatty
204049f6 g     F .text	00000040 __metal_driver_sifive_gpio0_output_toggle
800007dc g     O .data	00000008 __metal_driver_vtable_fixed_clock
80000794 g     O .data	00000004 _global_impure_ptr
20401f1e  w    F .text	00000092 metal_timer_interrupt_vector_handler
20405aa2 g     F .text	0000006a __libc_init_array
20404588 g     F .text	00000042 __metal_driver_led_off
20404970 g     F .text	00000040 __metal_driver_sifive_gpio0_output_set
2040286c  w    F .text	00000096 metal_lc11_interrupt_vector_handler
20403c94 g     F .text	00000022 __metal_driver_sifive_fe310_g000_hfxosc_set_rate_hz
20403010 g     F .text	0000002c __metal_driver_riscv_cpu_controller_interrupt_enable
20405962 g     F .text	0000005a _sbrk
204048ea g     F .text	00000046 __metal_driver_sifive_gpio0_disable_output
20405404 g     F .text	00000040 _metal_clock_call_all_callbacks
20400174 g     F .init	00000002 _init
20401d1c g     F .text	0000001a __metal_interrupt_timer_disable
20404ae8 g     F .text	00000206 __metal_driver_sifive_gpio0_config_int
2040334e g     F .text	00000062 __metal_driver_cpu_clear_sw_ipi
20406ec4 g     O .rodata	0000003c __metal_driver_vtable_sifive_gpio0
20404a36 g     F .text	00000068 __metal_driver_sifive_gpio0_enable_io
20405a6a g     F .text	00000038 __libc_fini_array
80000780 g     O .data	0000000c __metal_dt_clock_4
20404e76 g     F .text	00000020 __metal_driver_gpio_interrupt_controller
204032d8 g     F .text	00000014 __metal_driver_cpu_get_sw_interrupt_id
80000000 g       .data	00000000 metal_segment_data_target_start
20401d6e g     F .text	0000002c __metal_interrupt_local_enable
20401b78 g     F .text	00000034 __metal_driver_riscv_clint0_clear_interrupt
20405dac g     F .text	0000002c metal_tty_putc
20403792 g     F .text	00000018 __metal_plic0_default_handler
20400f70 g     F .text	00000084 _putc_r
8000006c g     O .data	0000000c __metal_dt_clock_0
20405b0c g     F .text	00000020 strcat
800007b4 g     O .data	00000004 __metal_dt_led_0blue
00000800 g       *ABS*	00000000 __heap_size
204062c4 g     O .rodata	00000020 __sf_fake_stderr
204011e6 g     F .text	0000002a metal_cpu_get_mtime
20401d52 g     F .text	0000001c __metal_interrupt_external_disable
20405080 g     F .text	00000024 __metal_driver_sifive_uart0_get_interrupt_id
204030e0 g     F .text	0000001c __metal_driver_riscv_cpu_controller_command_request
20402d84 g     F .text	0000013e __metal_driver_riscv_cpu_controller_interrupt_init
20403430 g     F .text	00000046 __metal_driver_cpu_exception_register
20401cd2 g     F .text	00000018 __metal_interrupt_software_enable
20402290  w    F .text	00000096 metal_lc1_interrupt_vector_handler
20400de6 g     F .text	000000ac _free_r
800007f0 g     O .bss	00000004 _global_atexit
20402b5a g     F .text	00000050 __metal_controller_interrupt_vector_mode
20405ce4 g     F .text	000000c8 __call_exitprocs
80000c98 g       .stack	00000000 _sp
2040007e g     F .init	00000000 _start
20403b24 g     F .text	00000084 __metal_driver_sifive_fe310_g000_hfrosc_get_rate_hz
800007b0 g     O .data	00000004 __metal_dt_led_0green
2040590e g     F .text	0000002a _lseek
20403410 g     F .text	00000020 __metal_driver_cpu_controller_interrupt
204034a4 g     F .text	0000001e __metal_driver_cpu_get_exception_pc
20401d36 g     F .text	0000001c __metal_interrupt_external_enable
20405c5c g     F .text	00000088 __register_exitproc
204050d8 g     F .text	00000040 __metal_driver_sifive_uart0_putc
20403838 g     F .text	00000144 __metal_driver_riscv_plic0_init
20403a3e g     F .text	00000048 __metal_driver_riscv_plic0_enable
204048be g     F .text	0000002c __metal_driver_sifive_gpio0_output
2040257e  w    F .text	00000096 metal_lc6_interrupt_vector_handler
20401c88 g     F .text	0000001a __metal_myhart_id
20404e96 g     F .text	0000002e __metal_driver_gpio_get_interrupt_id
20401e24  w    F .text	00000092 metal_software_interrupt_vector_handler
2040303c g     F .text	0000002c __metal_driver_riscv_cpu_controller_interrupt_disable
20401106 g     F .text	0000002a _close_r
2040516e g     F .text	00000020 __metal_driver_sifive_uart0_get_baud_rate
20401768 g     F .text	000000da __metal_driver_riscv_clint0_register
2040556e g     F .text	00000040 metal_gpio_disable_input
8000079c g     O .data	00000008 __metal_dt_clint_2000000
20400762 g     F .text	00000110 __swsetup_r
800007ac g     O .data	00000004 __metal_dt_led_0red
20401324 g     F .text	0000003e metal_interrupt_register_handler
20400b40 g     F .text	0000009e __sfp
204054be g     F .text	0000004c metal_clock_set_rate_hz
2040101e g     F .text	00000030 __sread
2040480e g     F .text	00000040 __metal_driver_sifive_gpio0_enable_input
20400176  w    F .init	00000000 secondary_main
20401df6  w    F .text	0000002e metal_interrupt_vector_handler
204011b4 g     F .text	00000002 __malloc_lock
80000880 g     O .bss	00000004 tmr_intr
204009bc g     F .text	00000064 _fflush_r
20403644 g     F .text	0000002c __metal_plic0_get_threshold
2040437a g     F .text	0000002e __metal_driver_sifive_fe310_g000_prci_get_reg
204062e4 g     O .rodata	00000020 __sf_fake_stdin
20402c7a g     F .text	000000bc __metal_local_interrupt_enable
20401a42 g     F .text	00000136 __metal_driver_riscv_clint0_command_request
20400d3e g     F .text	000000a8 memset
204024e8  w    F .text	00000096 metal_lc5_interrupt_vector_handler
204003e2 g     F .text	000001aa main
800007e8 g       .data	00000000 metal_segment_data_target_end
800007c0 g     O .data	00000008 __metal_driver_vtable_sifive_fe310_g000_hfrosc
204032ec g     F .text	00000062 __metal_driver_cpu_set_sw_ipi
204033b0 g     F .text	00000060 __metal_driver_cpu_get_msip
204056b8 g     F .text	00000018 metal_shutdown
80000000 g       .data	00000000 metal_segment_itim_target_end
204034c2 g     F .text	00000020 __metal_driver_cpu_set_exception_pc
204045ca g     F .text	00000040 __metal_driver_led_toggle
204035a6 g     F .text	0000002e __metal_plic0_claim_interrupt
204010d2 g     F .text	00000006 __sclose
80000060  w    O .data	0000000c __metal_led_table
20402902  w    F .text	00000096 metal_lc12_interrupt_vector_handler
20400e92 g     F .text	000000de _malloc_r
2040186a g     F .text	0000001c __metal_driver_riscv_clint0_get_vector_mode
20404500 g     F .text	00000048 __metal_driver_led_enable
800007bc g     O .data	00000004 __metal_dt_prci_10008000
2040316e g     F .text	00000046 __metal_driver_cpu_timebase_get
20400000 g       .init	00000000 _enter
204012e6 g     F .text	0000001a metal_cpu_get_current_hartid
20405b2c g     F .text	0000011e strcmp
20403c20 g     F .text	00000074 __metal_driver_sifive_fe310_g000_hfxosc_get_rate_hz
20405780 g       .text	00000000 __metal_vector_table
20406f48 g       *ABS*	00000000 metal_segment_itim_source_start
80000798  w    O .data	00000004 __metal_cpu_table
80000090 g     O .data	000003b8 __metal_dt_cpu_0_interrupt_controller
20400174 g     F .init	00000002 _fini
20400200 g     F .text	00000134 display_banner
20401ca2 g     F .text	00000018 __metal_interrupt_global_enable
20405a2a g     F .text	0000000a atexit
20405dd8 g     F .text	00000028 metal_tty_putc_raw
204010d8 g     F .text	0000002e _write_r
20401d02 g     F .text	0000001a __metal_interrupt_timer_enable
20400364 g     F .text	0000007e wait_for_timer
20405118 g     F .text	00000056 __metal_driver_sifive_uart0_getc
2040198c g     F .text	000000b6 __metal_driver_riscv_clint0_disable
80000790 g     O .data	00000004 _impure_ptr
2040321a g     F .text	00000076 __metal_driver_cpu_mtimecmp_set
20400872 g     F .text	0000014a __sflush_r
20405696 g     F .text	00000022 __metal_shutdown_exit
20403de6 g     F .text	000000a4 __metal_driver_sifive_fe310_g000_pll_init
80000084 g     O .data	0000000c __metal_dt_clock_5
80000884 g     O .bss	00000004 cpu_intr
204043a8 g     F .text	00000038 __metal_driver_sifive_fe310_g000_prci_set_reg
20405862 g     F .text	00000020 __metal_driver_fixed_clock_get_rate_hz
204018da g     F .text	000000b2 __metal_driver_riscv_clint0_enable
800007d8 g     O .data	00000004 __metal_driver_vtable_sifive_test0
20406f48 g       *ABS*	00000000 metal_segment_data_source_start
80001498 g       .heap	00000000 metal_segment_heap_target_end
20402baa g     F .text	00000098 __metal_controller_interrupt_vector
80000774 g     O .data	0000000c __metal_dt_clock_1
80000448 g     O .data	00000300 __metal_dt_interrupt_controller_c000000
20400c4a g     F .text	00000058 __swhatbuf_r
204049b0 g     F .text	00000046 __metal_driver_sifive_gpio0_output_clear
20401fb0 g     F .text	00000066 __metal_default_timer_handler
204059bc g     F .text	0000006e _write
204037aa g     F .text	0000008e __metal_plic0_handler
20402326  w    F .text	00000096 metal_lc2_interrupt_vector_handler
20402ac4  w    F .text	00000096 metal_lc15_interrupt_vector_handler
20401292 g     F .text	00000026 metal_cpu_interrupt_controller
800007b8 g     O .data	00000004 __metal_dt_test_100000
20401300 g     F .text	00000024 metal_interrupt_init
2040104e g     F .text	0000004e __swrite
20401210 g     F .text	00000036 metal_cpu_set_mtimecmp
20405a40 g     F .text	0000002a exit
20400bde g     F .text	0000006c _fwalk_reent
20405882 g     F .text	00000024 __metal_driver_fixed_clock_set_rate_hz
20406304 g     O .rodata	00000020 __sf_fake_stdout
800007a8 g     O .data	00000004 __metal_dt_gpio_10012000
20401dde g     F .text	00000018 __metal_default_interrupt_handler
20401362 g     F .text	0000002e metal_interrupt_enable
204056fc g     F .text	0000002e metal_uart_putc
20405938 g     F .text	0000002a _read
20404894 g     F .text	0000002a __metal_driver_sifive_gpio0_input
20402080 g     F .text	00000154 __metal_exception_handler
204021fa  w    F .text	00000096 metal_lc0_interrupt_vector_handler
20405e24 g     F .text	00000014 _exit
20400334 g     F .text	00000030 timer_isr
204031b4 g     F .text	00000066 __metal_driver_cpu_mtime_get
80000888 g     O .bss	00000004 cpu0
20400ca2 g     F .text	0000009c __smakebuf_r
20401842 g     F .text	00000028 __metal_driver_riscv_clint0_vector_register
800007ec g     O .bss	00000004 __malloc_sbrk_start
8000088c g     O .bss	00000004 timer_isr_flag
20402a2e  w    F .text	00000096 metal_lc14_interrupt_vector_handler
800007c8 g     O .data	00000008 __metal_driver_vtable_sifive_fe310_g000_hfxosc
204016e0 g     F .text	00000088 __metal_driver_riscv_clint0_init
800007e8 g     O .bss	00000004 __malloc_free_list
80000890 g     O .bss	00000004 tmr_id
204032aa g     F .text	00000014 __metal_driver_cpu_get_timer_interrupt_id
20403706 g     F .text	0000008c __metal_plic0_enable
2040006e  w      .init	00000000 __register_frame_info
20403ba8 g     F .text	00000022 __metal_driver_sifive_fe310_g000_hfrosc_set_rate_hz
204032be g     F .text	0000001a __metal_driver_cpu_sw_controller_interrupt
20401d9a g     F .text	0000002c __metal_interrupt_local_disable
20401cea g     F .text	00000018 __metal_interrupt_software_disable
204036d2 g     F .text	00000034 __metal_plic0_get_priority
204056d0 g     F .text	0000002c metal_uart_init
80000768 g     O .data	0000000c __metal_dt_clock_3
2040360c g     F .text	00000038 __metal_plic0_set_threshold
204058a6 g     F .text	00000022 _close
800007d0 g     O .data	00000008 __metal_driver_vtable_sifive_fe310_g000_prci
00000000 g       *ABS*	00000000 __metal_boot_hart
2040397c g     F .text	000000c2 __metal_driver_riscv_plic0_register
20401390 g     F .text	0000002e metal_interrupt_disable



Disassembly of section .init:

20400000 <_enter>:
_enter():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/entry.S:24
     * it's not valid to obtain the address of any symbol without GP
     * configured.  The C environment might go ahead and do this again, but
     * that's safe as it's a fixed register. */
.option push
.option norelax
    la gp, __global_pointer$
20400000:	5fc01197          	auipc	gp,0x5fc01
20400004:	f9018193          	addi	gp,gp,-112 # 80000f90 <__global_pointer$>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/entry.S:29
.option pop

    /* Set up a simple trap vector to catch anything that goes wrong early in
     * the boot process. */
    la t0, early_trap_vector
20400008:	00000297          	auipc	t0,0x0
2040000c:	05828293          	addi	t0,t0,88 # 20400060 <early_trap_vector>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/entry.S:30
    csrw mtvec, t0
20400010:	30529073          	csrw	mtvec,t0
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/entry.S:32
    /* enable chicken bit if core is bullet series*/
    la t0, __metal_chicken_bit
20400014:	00000293          	li	t0,0
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/entry.S:33
    beqz t0, 1f
20400018:	00028463          	beqz	t0,20400020 <_enter+0x20>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/entry.S:34
    csrwi 0x7C1, 0
2040001c:	7c105073          	csrwi	0x7c1,0
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/entry.S:43
     * C, so here we set up a C environment.  First we set up a stack pointer,
     * which is left as a weak reference in order to allow initialization
     * routines that do not need a stack to be set up to transparently be
     * called. */
    .weak __metal_stack_pointer
    la sp, __metal_stack_pointer
20400020:	dfc00117          	auipc	sp,0xdfc00
20400024:	fe010113          	addi	sp,sp,-32 # 0 <__metal_boot_hart>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/entry.S:52
     * actually a full C function, as it doesn't end up with the .bss or .data
     * segments having been initialized.  This is done to avoid putting a
     * burden on systems that can be initialized without having a C environment
     * set up. */
    .weak __metal_before_start
    la ra, __metal_before_start
20400028:	dfc00097          	auipc	ra,0xdfc00
2040002c:	fd808093          	addi	ra,ra,-40 # 0 <__metal_boot_hart>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/entry.S:53
    beqz ra, 1f
20400030:	00008363          	beqz	ra,20400036 <_enter+0x36>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/entry.S:54
    jalr ra
20400034:	9082                	jalr	ra
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/entry.S:60
1:

    /* At this point we can enter the C runtime's startup file.  The arguments
     * to this function are designed to match those provided to the SEE, just
     * so we don't have to write another ABI. */
    csrr a0, mhartid
20400036:	f1402573          	csrr	a0,mhartid
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/entry.S:61
    li a1, 0
2040003a:	4581                	li	a1,0
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/entry.S:62
    li a2, 0
2040003c:	4601                	li	a2,0
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/entry.S:63
    call _start
2040003e:	2081                	jal	2040007e <_start>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/entry.S:68

    /* If we've made it back here then there's probably something wrong.  We
     * allow the METAL to register a handler here. */
    .weak __metal_after_main
    la ra, __metal_after_main
20400040:	dfc00097          	auipc	ra,0xdfc00
20400044:	fc008093          	addi	ra,ra,-64 # 0 <__metal_boot_hart>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/entry.S:69
    beqz ra, 1f
20400048:	00008363          	beqz	ra,2040004e <_enter+0x4e>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/entry.S:70
    jalr ra
2040004c:	9082                	jalr	ra
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/entry.S:75
1:

    /* If that handler returns then there's not a whole lot we can do.  Just
     * try to make some noise. */
     la t0, 1f
2040004e:	00000297          	auipc	t0,0x0
20400052:	00c28293          	addi	t0,t0,12 # 2040005a <_enter+0x5a>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/entry.S:76
     csrw mtvec, t0
20400056:	30529073          	csrw	mtvec,t0
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/entry.S:78
1:
     lw t1, 0(x0)
2040005a:	00002303          	lw	t1,0(zero) # 0 <__metal_boot_hart>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/entry.S:79
     j 1b
2040005e:	bff5                	j	2040005a <_enter+0x5a>

20400060 <early_trap_vector>:
early_trap_vector():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/entry.S:89
 * you end up here then there's a bug in the early boot code somewhere. */
.section .text.metal.init.trapvec
.align 2
early_trap_vector:
    .cfi_startproc
    csrr t0, mcause
20400060:	342022f3          	csrr	t0,mcause
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/entry.S:90
    csrr t1, mepc
20400064:	34102373          	csrr	t1,mepc
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/entry.S:91
    csrr t2, mtval
20400068:	343023f3          	csrr	t2,mtval
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/entry.S:92
    j early_trap_vector
2040006c:	bfd5                	j	20400060 <early_trap_vector>

2040006e <__register_frame_info>:
__register_frame_info():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/entry.S:105
.weak __register_frame_info
.global __register_frame_info
.section .text.metal.init.__register_frame_info
__register_frame_info:
    .cfi_startproc
    ret
2040006e:	8082                	ret

20400070 <__metal_synchronize_harts>:
__metal_synchronize_harts():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/synchronize_harts.c:19
 * _synchronize_harts() is called by crt0.S to cause harts > 0 to wait for
 * hart 0 to finish copying the datat section, zeroing the BSS, and running
 * the libc contstructors.
 */
__attribute__((section(".init")))
void __metal_synchronize_harts() {
20400070:	1141                	addi	sp,sp,-16
20400072:	c622                	sw	s0,12(sp)
20400074:	0800                	addi	s0,sp,16
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/synchronize_harts.c:61
        /* Wait for hart 0 to clear the MSIP bit */
        while (METAL_MSIP(msip_base, hart) == 1) ;
    }

#endif /* __METAL_DT_MAX_HARTS > 1 */
}
20400076:	0001                	nop
20400078:	4432                	lw	s0,12(sp)
2040007a:	0141                	addi	sp,sp,16
2040007c:	8082                	ret

2040007e <_start>:
_start():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/gloss/crt0.S:36
.cfi_startproc
.cfi_undefined ra

  /* This is a bit funky: it's not usually sane for _start to return, but in
   * this case we actually want to in order to signal an error to the METAL. */
  mv s0, ra
2040007e:	8406                	mv	s0,ra
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/gloss/crt0.S:44
   * safely perform any access that may be relaxed without GP being set.  This
   * is done with relaxation disabled to avoid relaxing the address calculation
   * to just "addi gp, gp, 0". */
.option push
.option norelax
  la gp, __global_pointer$
20400080:	5fc01197          	auipc	gp,0x5fc01
20400084:	f1018193          	addi	gp,gp,-240 # 80000f90 <__global_pointer$>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/gloss/crt0.S:51

  /* The METAL is designed for a bare-metal environment and therefor is expected
   * to define its own stack pointer.  We also align the stack pointer here
   * because the only RISC-V ABI that's currently defined mandates 16-byte
   * stack alignment. */
  la sp, _sp
20400088:	d0818113          	addi	sp,gp,-760 # 80000c98 <_sp>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/gloss/crt0.S:54

  /* Increment by hartid number of stack sizes */
  li t0, 0
2040008c:	4281                	li	t0,0
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/gloss/crt0.S:55
  la t1, __stack_size
2040008e:	40000313          	li	t1,1024
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/gloss/crt0.S:57
1:
  beq t0, a0, 1f
20400092:	00a28563          	beq	t0,a0,2040009c <_start+0x1e>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/gloss/crt0.S:58
  add sp, sp, t1
20400096:	911a                	add	sp,sp,t1
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/gloss/crt0.S:59
  addi t0, t0, 1
20400098:	0285                	addi	t0,t0,1
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/gloss/crt0.S:60
  j 1b
2040009a:	bfe5                	j	20400092 <_start+0x14>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/gloss/crt0.S:62
1:
  andi sp, sp, -16
2040009c:	ff017113          	andi	sp,sp,-16
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/gloss/crt0.S:65

  /* If we're not hart 0, skip the initialization work */
  la t0, __metal_boot_hart
204000a0:	00000293          	li	t0,0
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/gloss/crt0.S:66
  bne a0, t0, _skip_init
204000a4:	08551963          	bne	a0,t0,20400136 <_skip_init>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/gloss/crt0.S:75
   * boot and then need to get relocated into a non-persistant writable memory
   * before C code can execute.  If this is the case we do so here.  This step
   * is optional: if the METAL provides an environment in which this relocation
   * is not necessary then it must simply set metal_segment_data_source_start to
   * be equal to metal_segment_data_target_start. */
  la t0, metal_segment_data_source_start
204000a8:	00007297          	auipc	t0,0x7
204000ac:	ea028293          	addi	t0,t0,-352 # 20406f48 <metal_segment_data_source_start>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/gloss/crt0.S:76
  la t1, metal_segment_data_target_start
204000b0:	5fc00317          	auipc	t1,0x5fc00
204000b4:	f5030313          	addi	t1,t1,-176 # 80000000 <metal_segment_data_target_start>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/gloss/crt0.S:77
  la t2, metal_segment_data_target_end
204000b8:	85818393          	addi	t2,gp,-1960 # 800007e8 <metal_segment_data_target_end>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/gloss/crt0.S:79

  beq t0, t1, 2f
204000bc:	00628c63          	beq	t0,t1,204000d4 <_start+0x56>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/gloss/crt0.S:80
  bge t1, t2, 2f
204000c0:	00735a63          	bge	t1,t2,204000d4 <_start+0x56>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/gloss/crt0.S:84

1:
#if __riscv_xlen == 32
  lw   a0, 0(t0)
204000c4:	0002a503          	lw	a0,0(t0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/gloss/crt0.S:85
  addi t0, t0, 4
204000c8:	0291                	addi	t0,t0,4
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/gloss/crt0.S:86
  sw   a0, 0(t1)
204000ca:	00a32023          	sw	a0,0(t1)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/gloss/crt0.S:87
  addi t1, t1, 4
204000ce:	0311                	addi	t1,t1,4
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/gloss/crt0.S:88
  blt  t1, t2, 1b
204000d0:	fe734ae3          	blt	t1,t2,204000c4 <_start+0x46>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/gloss/crt0.S:99
  blt  t1, t2, 1b
#endif
2:

  /* Copy the ITIM section */
  la t0, metal_segment_itim_source_start
204000d4:	00007297          	auipc	t0,0x7
204000d8:	e7428293          	addi	t0,t0,-396 # 20406f48 <metal_segment_data_source_start>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/gloss/crt0.S:100
  la t1, metal_segment_itim_target_start
204000dc:	5fc00317          	auipc	t1,0x5fc00
204000e0:	f2430313          	addi	t1,t1,-220 # 80000000 <metal_segment_data_target_start>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/gloss/crt0.S:101
  la t2, metal_segment_itim_target_end
204000e4:	5fc00397          	auipc	t2,0x5fc00
204000e8:	f1c38393          	addi	t2,t2,-228 # 80000000 <metal_segment_data_target_start>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/gloss/crt0.S:103

  beq t0, t1, 2f
204000ec:	00628c63          	beq	t0,t1,20400104 <_start+0x86>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/gloss/crt0.S:104
  bge t1, t2, 2f
204000f0:	00735a63          	bge	t1,t2,20400104 <_start+0x86>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/gloss/crt0.S:108

1:
#if __riscv_xlen == 32
  lw   a0, 0(t0)
204000f4:	0002a503          	lw	a0,0(t0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/gloss/crt0.S:109
  addi t0, t0, 4
204000f8:	0291                	addi	t0,t0,4
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/gloss/crt0.S:110
  sw   a0, 0(t1)
204000fa:	00a32023          	sw	a0,0(t1)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/gloss/crt0.S:111
  addi t1, t1, 4
204000fe:	0311                	addi	t1,t1,4
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/gloss/crt0.S:112
  blt  t1, t2, 1b
20400100:	fe734ae3          	blt	t1,t2,204000f4 <_start+0x76>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/gloss/crt0.S:124
#endif
2:

  /* Fence all subsequent instruction fetches until after the ITIM writes
     complete */
  fence.i
20400104:	0000100f          	fence.i
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/gloss/crt0.S:127

  /* Zero the BSS segment. */
  la t1, metal_segment_bss_target_start
20400108:	5fc00317          	auipc	t1,0x5fc00
2040010c:	6e030313          	addi	t1,t1,1760 # 800007e8 <metal_segment_data_target_end>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/gloss/crt0.S:128
  la t2, metal_segment_bss_target_end
20400110:	90818393          	addi	t2,gp,-1784 # 80000898 <metal_segment_bss_target_end>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/gloss/crt0.S:130

  bge t1, t2, 2f
20400114:	00735763          	bge	t1,t2,20400122 <_start+0xa4>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/gloss/crt0.S:134

1:
#if __riscv_xlen == 32
  sw   x0, 0(t1)
20400118:	00032023          	sw	zero,0(t1)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/gloss/crt0.S:135
  addi t1, t1, 4
2040011c:	0311                	addi	t1,t1,4
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/gloss/crt0.S:136
  blt  t1, t2, 1b
2040011e:	fe734de3          	blt	t1,t2,20400118 <_start+0x9a>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/gloss/crt0.S:147
2:

  /* At this point we're in an environment that can execute C code.  The first
   * thing to do is to make the callback to the parent environment if it's been
   * requested to do so. */
  beqz a2, 1f
20400122:	c211                	beqz	a2,20400126 <_start+0xa8>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/gloss/crt0.S:148
  jalr a2
20400124:	9602                	jalr	a2
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/gloss/crt0.S:152
1:

  /* The RISC-V port only uses new-style constructors and destructors. */
  la a0, __libc_fini_array
20400126:	00006517          	auipc	a0,0x6
2040012a:	94450513          	addi	a0,a0,-1724 # 20405a6a <__libc_fini_array>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/gloss/crt0.S:153
  call atexit
2040012e:	0fd050ef          	jal	ra,20405a2a <atexit>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/gloss/crt0.S:154
  call __libc_init_array
20400132:	171050ef          	jal	ra,20405aa2 <__libc_init_array>

20400136 <_skip_init>:
_skip_init():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/gloss/crt0.S:160

_skip_init:

  /* Synchronize harts so that secondary harts wait until hart 0 finishes
     initializing */
  call __metal_synchronize_harts
20400136:	3f2d                	jal	20400070 <__metal_synchronize_harts>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/gloss/crt0.S:163

  /* Check RISC-V isa and enable FS bits if Floating Point architecture. */
  csrr a5, misa
20400138:	301027f3          	csrr	a5,misa
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/gloss/crt0.S:164
  li   a4, 0x10028
2040013c:	00010737          	lui	a4,0x10
20400140:	02870713          	addi	a4,a4,40 # 10028 <__heap_size+0xf828>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/gloss/crt0.S:165
  and  a5, a5, a4
20400144:	8ff9                	and	a5,a5,a4
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/gloss/crt0.S:166
  beqz a5, 1f
20400146:	cb89                	beqz	a5,20400158 <_skip_init+0x22>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/gloss/crt0.S:167
  csrr a5, mstatus
20400148:	300027f3          	csrr	a5,mstatus
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/gloss/crt0.S:168
  lui  a4, 0x2
2040014c:	6709                	lui	a4,0x2
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/gloss/crt0.S:169
  or   a5, a5, a4
2040014e:	8fd9                	or	a5,a5,a4
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/gloss/crt0.S:170
  csrw mstatus, a5
20400150:	30079073          	csrw	mstatus,a5
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/gloss/crt0.S:171
  csrwi fcsr, 0
20400154:	00305073          	csrwi	fcsr,0
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/gloss/crt0.S:177
1:

  /* This is a C runtime, so main() is defined to have some arguments.  Since
   * there's nothing sane the METAL can pass we don't bother with that but
   * instead just setup as close to a NOP as we can. */
  li a0, 1     /* argc=1 */
20400158:	4505                	li	a0,1
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/gloss/crt0.S:178
  la a1, argv  /* argv = {"libgloss", NULL} */
2040015a:	00007597          	auipc	a1,0x7
2040015e:	dc658593          	addi	a1,a1,-570 # 20406f20 <argv>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/gloss/crt0.S:179
  la a2, envp  /* envp = {NULL} */
20400162:	00007617          	auipc	a2,0x7
20400166:	dc260613          	addi	a2,a2,-574 # 20406f24 <envp>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/gloss/crt0.S:180
  call secondary_main
2040016a:	2031                	jal	20400176 <secondary_main>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/gloss/crt0.S:186

  /* Call exit to handle libc's cleanup routines.  Under normal contains this
   * shouldn't even get called, but I'm still not using a tail call here
   * because returning to the METAL is the right thing to do in pathological
   * situations. */
  call exit
2040016c:	0d5050ef          	jal	ra,20405a40 <exit>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/gloss/crt0.S:191

  /* And here's where we return.  Again, it's a bit odd but the METAL defines
   * this as a bad idea (ie, as opposed to leaving it undefined) and at this
   * point it's really the only thing left to do. */
  mv ra, s0
20400170:	80a2                	mv	ra,s0
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/gloss/crt0.S:192
  ret
20400172:	8082                	ret

20400174 <_fini>:
_init():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/gloss/crt0.S:204
.type   _init, @function
.global _fini
.type   _fini, @function
_init:
_fini:
  ret
20400174:	8082                	ret

20400176 <secondary_main>:
secondary_main():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/gloss/crt0.S:215
.weak   secondary_main
.global secondary_main
.type   secondary_main, @function

secondary_main:
  addi sp, sp, -16
20400176:	1141                	addi	sp,sp,-16
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/gloss/crt0.S:217
#if __riscv_xlen == 32
  sw ra, 4(sp)
20400178:	c206                	sw	ra,4(sp)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/gloss/crt0.S:221
#else
  sd ra, 8(sp)
#endif
  csrr t0, mhartid
2040017a:	f14022f3          	csrr	t0,mhartid
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/gloss/crt0.S:222
  la t1, __metal_boot_hart
2040017e:	00000313          	li	t1,0
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/gloss/crt0.S:223
  beq t0, t1, 2f
20400182:	00628563          	beq	t0,t1,2040018c <secondary_main+0x16>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/gloss/crt0.S:225
1:
  wfi
20400186:	10500073          	wfi
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/gloss/crt0.S:226
  j 1b
2040018a:	bff5                	j	20400186 <secondary_main+0x10>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/gloss/crt0.S:228
2:
  call main
2040018c:	2c99                	jal	204003e2 <main>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/gloss/crt0.S:230
#if __riscv_xlen == 32
  lw ra, 4(sp)
2040018e:	4092                	lw	ra,4(sp)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/gloss/crt0.S:234
#else
  ld ra, 8(sp)
#endif
  addi sp, sp, 16
20400190:	0141                	addi	sp,sp,16
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/gloss/crt0.S:235
  ret
20400192:	8082                	ret

Disassembly of section .text:

20400200 <display_banner>:
display_banner():
/Users/i/Documents/Risc-V/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:17
struct metal_cpu *cpu0;
struct metal_interrupt *cpu_intr, *tmr_intr;
int tmr_id;
volatile uint32_t timer_isr_flag;

void display_banner (void) {
20400200:	1141                	addi	sp,sp,-16
20400202:	c606                	sw	ra,12(sp)
20400204:	c422                	sw	s0,8(sp)
20400206:	0800                	addi	s0,sp,16
/Users/i/Documents/Risc-V/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:19

    printf("\n");
20400208:	4529                	li	a0,10
2040020a:	2649                	jal	2040058c <putchar>
/Users/i/Documents/Risc-V/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:20
    printf("\n");
2040020c:	4529                	li	a0,10
2040020e:	2ebd                	jal	2040058c <putchar>
/Users/i/Documents/Risc-V/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:21
    printf("                  SIFIVE, INC.\n");
20400210:	204067b7          	lui	a5,0x20406
20400214:	e3878513          	addi	a0,a5,-456 # 20405e38 <_exit+0x14>
20400218:	29b5                	jal	20400694 <puts>
/Users/i/Documents/Risc-V/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:22
    printf("\n");
2040021a:	4529                	li	a0,10
2040021c:	2e85                	jal	2040058c <putchar>
/Users/i/Documents/Risc-V/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:23
    printf("           5555555555555555555555555\n");
2040021e:	204067b7          	lui	a5,0x20406
20400222:	e5878513          	addi	a0,a5,-424 # 20405e58 <_exit+0x34>
20400226:	21bd                	jal	20400694 <puts>
/Users/i/Documents/Risc-V/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:24
    printf("          5555                   5555\n");
20400228:	204067b7          	lui	a5,0x20406
2040022c:	e8078513          	addi	a0,a5,-384 # 20405e80 <_exit+0x5c>
20400230:	2195                	jal	20400694 <puts>
/Users/i/Documents/Risc-V/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:25
    printf("         5555                     5555\n");
20400232:	204067b7          	lui	a5,0x20406
20400236:	ea878513          	addi	a0,a5,-344 # 20405ea8 <_exit+0x84>
2040023a:	29a9                	jal	20400694 <puts>
/Users/i/Documents/Risc-V/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:26
    printf("        5555                       5555\n");
2040023c:	204067b7          	lui	a5,0x20406
20400240:	ed078513          	addi	a0,a5,-304 # 20405ed0 <_exit+0xac>
20400244:	2981                	jal	20400694 <puts>
/Users/i/Documents/Risc-V/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:27
    printf("       5555       5555555555555555555555\n");
20400246:	204067b7          	lui	a5,0x20406
2040024a:	ef878513          	addi	a0,a5,-264 # 20405ef8 <_exit+0xd4>
2040024e:	2199                	jal	20400694 <puts>
/Users/i/Documents/Risc-V/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:28
    printf("      5555       555555555555555555555555\n");
20400250:	204067b7          	lui	a5,0x20406
20400254:	f2478513          	addi	a0,a5,-220 # 20405f24 <_exit+0x100>
20400258:	2935                	jal	20400694 <puts>
/Users/i/Documents/Risc-V/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:29
    printf("     5555                             5555\n");
2040025a:	204067b7          	lui	a5,0x20406
2040025e:	f5078513          	addi	a0,a5,-176 # 20405f50 <_exit+0x12c>
20400262:	290d                	jal	20400694 <puts>
/Users/i/Documents/Risc-V/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:30
    printf("    5555                               5555\n");
20400264:	204067b7          	lui	a5,0x20406
20400268:	f7c78513          	addi	a0,a5,-132 # 20405f7c <_exit+0x158>
2040026c:	2125                	jal	20400694 <puts>
/Users/i/Documents/Risc-V/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:31
    printf("   5555                                 5555\n");
2040026e:	204067b7          	lui	a5,0x20406
20400272:	fa878513          	addi	a0,a5,-88 # 20405fa8 <_exit+0x184>
20400276:	2939                	jal	20400694 <puts>
/Users/i/Documents/Risc-V/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:32
    printf("  5555555555555555555555555555          55555\n");
20400278:	204067b7          	lui	a5,0x20406
2040027c:	fd878513          	addi	a0,a5,-40 # 20405fd8 <_exit+0x1b4>
20400280:	2911                	jal	20400694 <puts>
/Users/i/Documents/Risc-V/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:33
    printf("   55555           555555555           55555\n");
20400282:	204067b7          	lui	a5,0x20406
20400286:	00878513          	addi	a0,a5,8 # 20406008 <_exit+0x1e4>
2040028a:	2129                	jal	20400694 <puts>
/Users/i/Documents/Risc-V/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:34
    printf("     55555           55555           55555\n");
2040028c:	204067b7          	lui	a5,0x20406
20400290:	03878513          	addi	a0,a5,56 # 20406038 <_exit+0x214>
20400294:	2101                	jal	20400694 <puts>
/Users/i/Documents/Risc-V/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:35
    printf("       55555           5           55555\n");
20400296:	204067b7          	lui	a5,0x20406
2040029a:	06478513          	addi	a0,a5,100 # 20406064 <_exit+0x240>
2040029e:	2edd                	jal	20400694 <puts>
/Users/i/Documents/Risc-V/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:36
    printf("         55555                   55555\n");
204002a0:	204067b7          	lui	a5,0x20406
204002a4:	09078513          	addi	a0,a5,144 # 20406090 <_exit+0x26c>
204002a8:	26f5                	jal	20400694 <puts>
/Users/i/Documents/Risc-V/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:37
    printf("           55555               55555\n");
204002aa:	204067b7          	lui	a5,0x20406
204002ae:	0b878513          	addi	a0,a5,184 # 204060b8 <_exit+0x294>
204002b2:	26cd                	jal	20400694 <puts>
/Users/i/Documents/Risc-V/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:38
    printf("             55555           55555\n");
204002b4:	204067b7          	lui	a5,0x20406
204002b8:	0e078513          	addi	a0,a5,224 # 204060e0 <_exit+0x2bc>
204002bc:	2ee1                	jal	20400694 <puts>
/Users/i/Documents/Risc-V/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:39
    printf("               55555       55555\n");
204002be:	204067b7          	lui	a5,0x20406
204002c2:	10478513          	addi	a0,a5,260 # 20406104 <_exit+0x2e0>
204002c6:	26f9                	jal	20400694 <puts>
/Users/i/Documents/Risc-V/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:40
    printf("                 55555   55555\n");
204002c8:	204067b7          	lui	a5,0x20406
204002cc:	12878513          	addi	a0,a5,296 # 20406128 <_exit+0x304>
204002d0:	26d1                	jal	20400694 <puts>
/Users/i/Documents/Risc-V/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:41
    printf("                   555555555\n");
204002d2:	204067b7          	lui	a5,0x20406
204002d6:	14878513          	addi	a0,a5,328 # 20406148 <_exit+0x324>
204002da:	2e6d                	jal	20400694 <puts>
/Users/i/Documents/Risc-V/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:42
    printf("                     55555\n");
204002dc:	204067b7          	lui	a5,0x20406
204002e0:	16878513          	addi	a0,a5,360 # 20406168 <_exit+0x344>
204002e4:	2e45                	jal	20400694 <puts>
/Users/i/Documents/Risc-V/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:43
    printf("                       5\n");
204002e6:	204067b7          	lui	a5,0x20406
204002ea:	18478513          	addi	a0,a5,388 # 20406184 <_exit+0x360>
204002ee:	265d                	jal	20400694 <puts>
/Users/i/Documents/Risc-V/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:44
    printf("\n");
204002f0:	4529                	li	a0,10
204002f2:	2c69                	jal	2040058c <putchar>
/Users/i/Documents/Risc-V/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:46

    printf("\n");
204002f4:	4529                	li	a0,10
204002f6:	2c59                	jal	2040058c <putchar>
/Users/i/Documents/Risc-V/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:47
    printf("               Welcome to SiFive!\n");
204002f8:	204067b7          	lui	a5,0x20406
204002fc:	1a078513          	addi	a0,a5,416 # 204061a0 <_exit+0x37c>
20400300:	2e51                	jal	20400694 <puts>
/Users/i/Documents/Risc-V/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:48
    printf("               Welcome to SiFive!\n");
20400302:	204067b7          	lui	a5,0x20406
20400306:	1a078513          	addi	a0,a5,416 # 204061a0 <_exit+0x37c>
2040030a:	2669                	jal	20400694 <puts>
/Users/i/Documents/Risc-V/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:49
    printf("               Welcome to SiFive!\n");
2040030c:	204067b7          	lui	a5,0x20406
20400310:	1a078513          	addi	a0,a5,416 # 204061a0 <_exit+0x37c>
20400314:	2641                	jal	20400694 <puts>
/Users/i/Documents/Risc-V/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:50
    printf("               Welcome to SiFive!\n");
20400316:	204067b7          	lui	a5,0x20406
2040031a:	1a078513          	addi	a0,a5,416 # 204061a0 <_exit+0x37c>
2040031e:	2e9d                	jal	20400694 <puts>
/Users/i/Documents/Risc-V/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:51
    printf("    hubin           Welcome to SiFive!\n");
20400320:	204067b7          	lui	a5,0x20406
20400324:	1c478513          	addi	a0,a5,452 # 204061c4 <_exit+0x3a0>
20400328:	26b5                	jal	20400694 <puts>
/Users/i/Documents/Risc-V/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:53

}
2040032a:	0001                	nop
2040032c:	40b2                	lw	ra,12(sp)
2040032e:	4422                	lw	s0,8(sp)
20400330:	0141                	addi	sp,sp,16
20400332:	8082                	ret

20400334 <timer_isr>:
timer_isr():
/Users/i/Documents/Risc-V/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:55

void timer_isr (int id, void *data) {
20400334:	1101                	addi	sp,sp,-32
20400336:	ce06                	sw	ra,28(sp)
20400338:	cc22                	sw	s0,24(sp)
2040033a:	1000                	addi	s0,sp,32
2040033c:	fea42623          	sw	a0,-20(s0)
20400340:	feb42423          	sw	a1,-24(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:58

    // Disable Timer interrupt
    metal_interrupt_disable(tmr_intr, tmr_id);
20400344:	8f01a703          	lw	a4,-1808(gp) # 80000880 <tmr_intr>
20400348:	9001a783          	lw	a5,-1792(gp) # 80000890 <tmr_id>
2040034c:	85be                	mv	a1,a5
2040034e:	853a                	mv	a0,a4
20400350:	040010ef          	jal	ra,20401390 <metal_interrupt_disable>
/Users/i/Documents/Risc-V/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:61

    // Flag showing we hit timer isr
    timer_isr_flag = 1;
20400354:	4705                	li	a4,1
20400356:	8ee1ae23          	sw	a4,-1796(gp) # 8000088c <timer_isr_flag>
/Users/i/Documents/Risc-V/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:62
}
2040035a:	0001                	nop
2040035c:	40f2                	lw	ra,28(sp)
2040035e:	4462                	lw	s0,24(sp)
20400360:	6105                	addi	sp,sp,32
20400362:	8082                	ret

20400364 <wait_for_timer>:
wait_for_timer():
/Users/i/Documents/Risc-V/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:64

void wait_for_timer(struct metal_led *which_led) {
20400364:	1101                	addi	sp,sp,-32
20400366:	ce06                	sw	ra,28(sp)
20400368:	cc22                	sw	s0,24(sp)
2040036a:	ca26                	sw	s1,20(sp)
2040036c:	1000                	addi	s0,sp,32
2040036e:	fea42623          	sw	a0,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:67

    // clear global timer isr flag
    timer_isr_flag = 0;
20400372:	8e01ae23          	sw	zero,-1796(gp) # 8000088c <timer_isr_flag>
/Users/i/Documents/Risc-V/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:70

    // Turn on desired LED
    metal_led_on(which_led);
20400376:	fec42503          	lw	a0,-20(s0)
2040037a:	068010ef          	jal	ra,204013e2 <metal_led_on>
/Users/i/Documents/Risc-V/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:73

    // Set timer
    metal_cpu_set_mtimecmp(cpu0, metal_cpu_get_mtime(cpu0) + RTC_FREQ);
2040037e:	8f81a483          	lw	s1,-1800(gp) # 80000888 <cpu0>
20400382:	8f81a783          	lw	a5,-1800(gp) # 80000888 <cpu0>
20400386:	853e                	mv	a0,a5
20400388:	65f000ef          	jal	ra,204011e6 <metal_cpu_get_mtime>
2040038c:	86aa                	mv	a3,a0
2040038e:	872e                	mv	a4,a1
20400390:	65a1                	lui	a1,0x8
20400392:	4601                	li	a2,0
20400394:	00b687b3          	add	a5,a3,a1
20400398:	853e                	mv	a0,a5
2040039a:	00d53533          	sltu	a0,a0,a3
2040039e:	00c70833          	add	a6,a4,a2
204003a2:	01050733          	add	a4,a0,a6
204003a6:	883a                	mv	a6,a4
204003a8:	85be                	mv	a1,a5
204003aa:	8642                	mv	a2,a6
204003ac:	8526                	mv	a0,s1
204003ae:	663000ef          	jal	ra,20401210 <metal_cpu_set_mtimecmp>
/Users/i/Documents/Risc-V/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:76

    // Enable Timer interrupt
    metal_interrupt_enable(tmr_intr, tmr_id);
204003b2:	8f01a703          	lw	a4,-1808(gp) # 80000880 <tmr_intr>
204003b6:	9001a783          	lw	a5,-1792(gp) # 80000890 <tmr_id>
204003ba:	85be                	mv	a1,a5
204003bc:	853a                	mv	a0,a4
204003be:	7a5000ef          	jal	ra,20401362 <metal_interrupt_enable>
/Users/i/Documents/Risc-V/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:79

    // wait till timer triggers and isr is hit
    while (timer_isr_flag == 0){};
204003c2:	0001                	nop
/Users/i/Documents/Risc-V/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:79 (discriminator 1)
204003c4:	8fc1a783          	lw	a5,-1796(gp) # 8000088c <timer_isr_flag>
204003c8:	dff5                	beqz	a5,204003c4 <wait_for_timer+0x60>
/Users/i/Documents/Risc-V/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:81

    timer_isr_flag = 0;
204003ca:	8e01ae23          	sw	zero,-1796(gp) # 8000088c <timer_isr_flag>
/Users/i/Documents/Risc-V/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:84

    // Turn off this LED
    metal_led_off(which_led);
204003ce:	fec42503          	lw	a0,-20(s0)
204003d2:	034010ef          	jal	ra,20401406 <metal_led_off>
/Users/i/Documents/Risc-V/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:85
}
204003d6:	0001                	nop
204003d8:	40f2                	lw	ra,28(sp)
204003da:	4462                	lw	s0,24(sp)
204003dc:	44d2                	lw	s1,20(sp)
204003de:	6105                	addi	sp,sp,32
204003e0:	8082                	ret

204003e2 <main>:
main():
/Users/i/Documents/Risc-V/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:88

int main (void)
{
204003e2:	1101                	addi	sp,sp,-32
204003e4:	ce06                	sw	ra,28(sp)
204003e6:	cc22                	sw	s0,24(sp)
204003e8:	1000                	addi	s0,sp,32
/Users/i/Documents/Risc-V/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:93
    int rc;
    struct metal_led *led0_red, *led0_green, *led0_blue;

    // This demo will toggle LEDs colors so we define them here
    led0_red = metal_led_get_rgb("LD0", "red");
204003ea:	204067b7          	lui	a5,0x20406
204003ee:	1ec78593          	addi	a1,a5,492 # 204061ec <_exit+0x3c8>
204003f2:	204067b7          	lui	a5,0x20406
204003f6:	1f078513          	addi	a0,a5,496 # 204061f0 <_exit+0x3cc>
204003fa:	030010ef          	jal	ra,2040142a <metal_led_get_rgb>
204003fe:	fea42623          	sw	a0,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:94
    led0_green = metal_led_get_rgb("LD0", "green");
20400402:	204067b7          	lui	a5,0x20406
20400406:	1f478593          	addi	a1,a5,500 # 204061f4 <_exit+0x3d0>
2040040a:	204067b7          	lui	a5,0x20406
2040040e:	1f078513          	addi	a0,a5,496 # 204061f0 <_exit+0x3cc>
20400412:	018010ef          	jal	ra,2040142a <metal_led_get_rgb>
20400416:	fea42423          	sw	a0,-24(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:95
    led0_blue = metal_led_get_rgb("LD0", "blue");
2040041a:	204067b7          	lui	a5,0x20406
2040041e:	1fc78593          	addi	a1,a5,508 # 204061fc <_exit+0x3d8>
20400422:	204067b7          	lui	a5,0x20406
20400426:	1f078513          	addi	a0,a5,496 # 204061f0 <_exit+0x3cc>
2040042a:	000010ef          	jal	ra,2040142a <metal_led_get_rgb>
2040042e:	fea42223          	sw	a0,-28(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:96
    if ((led0_red == NULL) || (led0_green == NULL) || (led0_blue == NULL)) {
20400432:	fec42783          	lw	a5,-20(s0)
20400436:	c799                	beqz	a5,20400444 <main+0x62>
/Users/i/Documents/Risc-V/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:96 (discriminator 1)
20400438:	fe842783          	lw	a5,-24(s0)
2040043c:	c781                	beqz	a5,20400444 <main+0x62>
/Users/i/Documents/Risc-V/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:96 (discriminator 2)
2040043e:	fe442783          	lw	a5,-28(s0)
20400442:	eb81                	bnez	a5,20400452 <main+0x70>
/Users/i/Documents/Risc-V/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:97
        printf("At least one of LEDs is null.\n");
20400444:	204067b7          	lui	a5,0x20406
20400448:	20478513          	addi	a0,a5,516 # 20406204 <_exit+0x3e0>
2040044c:	24a1                	jal	20400694 <puts>
/Users/i/Documents/Risc-V/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:98
        return 1;
2040044e:	4785                	li	a5,1
20400450:	aa0d                	j	20400582 <main+0x1a0>
/Users/i/Documents/Risc-V/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:102
    }

    // Enable each LED
    metal_led_enable(led0_red);
20400452:	fec42503          	lw	a0,-20(s0)
20400456:	769000ef          	jal	ra,204013be <metal_led_enable>
/Users/i/Documents/Risc-V/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:103
    metal_led_enable(led0_green);
2040045a:	fe842503          	lw	a0,-24(s0)
2040045e:	761000ef          	jal	ra,204013be <metal_led_enable>
/Users/i/Documents/Risc-V/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:104
    metal_led_enable(led0_blue);
20400462:	fe442503          	lw	a0,-28(s0)
20400466:	759000ef          	jal	ra,204013be <metal_led_enable>
/Users/i/Documents/Risc-V/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:107

    // All Off
    metal_led_off(led0_red);
2040046a:	fec42503          	lw	a0,-20(s0)
2040046e:	799000ef          	jal	ra,20401406 <metal_led_off>
/Users/i/Documents/Risc-V/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:108
    metal_led_off(led0_green);
20400472:	fe842503          	lw	a0,-24(s0)
20400476:	791000ef          	jal	ra,20401406 <metal_led_off>
/Users/i/Documents/Risc-V/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:109
    metal_led_off(led0_blue);
2040047a:	fe442503          	lw	a0,-28(s0)
2040047e:	789000ef          	jal	ra,20401406 <metal_led_off>
/Users/i/Documents/Risc-V/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:112

    // Lets get the CPU and and its interrupt
    cpu0 = metal_cpu_get(0);
20400482:	4501                	li	a0,0
20400484:	635000ef          	jal	ra,204012b8 <metal_cpu_get>
20400488:	872a                	mv	a4,a0
2040048a:	8ee1ac23          	sw	a4,-1800(gp) # 80000888 <cpu0>
/Users/i/Documents/Risc-V/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:113
    if (cpu0 == NULL) {
2040048e:	8f81a783          	lw	a5,-1800(gp) # 80000888 <cpu0>
20400492:	eb81                	bnez	a5,204004a2 <main+0xc0>
/Users/i/Documents/Risc-V/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:114
        printf("CPU null.\n");
20400494:	204067b7          	lui	a5,0x20406
20400498:	22478513          	addi	a0,a5,548 # 20406224 <_exit+0x400>
2040049c:	2ae5                	jal	20400694 <puts>
/Users/i/Documents/Risc-V/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:115
        return 2;
2040049e:	4789                	li	a5,2
204004a0:	a0cd                	j	20400582 <main+0x1a0>
/Users/i/Documents/Risc-V/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:117
    }
    cpu_intr = metal_cpu_interrupt_controller(cpu0);
204004a2:	8f81a783          	lw	a5,-1800(gp) # 80000888 <cpu0>
204004a6:	853e                	mv	a0,a5
204004a8:	5eb000ef          	jal	ra,20401292 <metal_cpu_interrupt_controller>
204004ac:	872a                	mv	a4,a0
204004ae:	8ee1aa23          	sw	a4,-1804(gp) # 80000884 <cpu_intr>
/Users/i/Documents/Risc-V/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:118
    if (cpu_intr == NULL) {
204004b2:	8f41a783          	lw	a5,-1804(gp) # 80000884 <cpu_intr>
204004b6:	eb81                	bnez	a5,204004c6 <main+0xe4>
/Users/i/Documents/Risc-V/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:119
        printf("CPU interrupt controller is null.\n");
204004b8:	204067b7          	lui	a5,0x20406
204004bc:	23078513          	addi	a0,a5,560 # 20406230 <_exit+0x40c>
204004c0:	2ad1                	jal	20400694 <puts>
/Users/i/Documents/Risc-V/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:120
        return 3;
204004c2:	478d                	li	a5,3
204004c4:	a87d                	j	20400582 <main+0x1a0>
/Users/i/Documents/Risc-V/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:122
    }
    metal_interrupt_init(cpu_intr);
204004c6:	8f41a783          	lw	a5,-1804(gp) # 80000884 <cpu_intr>
204004ca:	853e                	mv	a0,a5
204004cc:	635000ef          	jal	ra,20401300 <metal_interrupt_init>
/Users/i/Documents/Risc-V/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:125

    // display welcome banner
    display_banner();
204004d0:	3b05                	jal	20400200 <display_banner>
/Users/i/Documents/Risc-V/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:128

    // Setup Timer and its interrupt so we can toggle LEDs on 1s cadence
    tmr_intr = metal_cpu_timer_interrupt_controller(cpu0);
204004d2:	8f81a783          	lw	a5,-1800(gp) # 80000888 <cpu0>
204004d6:	853e                	mv	a0,a5
204004d8:	56f000ef          	jal	ra,20401246 <metal_cpu_timer_interrupt_controller>
204004dc:	872a                	mv	a4,a0
204004de:	8ee1a823          	sw	a4,-1808(gp) # 80000880 <tmr_intr>
/Users/i/Documents/Risc-V/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:129
    if (tmr_intr == NULL) {
204004e2:	8f01a783          	lw	a5,-1808(gp) # 80000880 <tmr_intr>
204004e6:	eb81                	bnez	a5,204004f6 <main+0x114>
/Users/i/Documents/Risc-V/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:130
        printf("TIMER interrupt controller is  null.\n");
204004e8:	204067b7          	lui	a5,0x20406
204004ec:	25478513          	addi	a0,a5,596 # 20406254 <_exit+0x430>
204004f0:	2255                	jal	20400694 <puts>
/Users/i/Documents/Risc-V/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:131
        return 4;
204004f2:	4791                	li	a5,4
204004f4:	a079                	j	20400582 <main+0x1a0>
/Users/i/Documents/Risc-V/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:133
    }
    metal_interrupt_init(tmr_intr);
204004f6:	8f01a783          	lw	a5,-1808(gp) # 80000880 <tmr_intr>
204004fa:	853e                	mv	a0,a5
204004fc:	605000ef          	jal	ra,20401300 <metal_interrupt_init>
/Users/i/Documents/Risc-V/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:134
    tmr_id = metal_cpu_timer_get_interrupt_id(cpu0);
20400500:	8f81a783          	lw	a5,-1800(gp) # 80000888 <cpu0>
20400504:	853e                	mv	a0,a5
20400506:	567000ef          	jal	ra,2040126c <metal_cpu_timer_get_interrupt_id>
2040050a:	872a                	mv	a4,a0
2040050c:	90e1a023          	sw	a4,-1792(gp) # 80000890 <tmr_id>
/Users/i/Documents/Risc-V/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:135
    rc = metal_interrupt_register_handler(tmr_intr, tmr_id, timer_isr, cpu0);
20400510:	8f01a703          	lw	a4,-1808(gp) # 80000880 <tmr_intr>
20400514:	9001a583          	lw	a1,-1792(gp) # 80000890 <tmr_id>
20400518:	8f81a783          	lw	a5,-1800(gp) # 80000888 <cpu0>
2040051c:	86be                	mv	a3,a5
2040051e:	204007b7          	lui	a5,0x20400
20400522:	33478613          	addi	a2,a5,820 # 20400334 <timer_isr>
20400526:	853a                	mv	a0,a4
20400528:	5fd000ef          	jal	ra,20401324 <metal_interrupt_register_handler>
2040052c:	fea42023          	sw	a0,-32(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:136
    if (rc < 0) {
20400530:	fe042783          	lw	a5,-32(s0)
20400534:	0007dc63          	bgez	a5,2040054c <main+0x16a>
/Users/i/Documents/Risc-V/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:137
        printf("TIMER interrupt handler registration failed\n");
20400538:	204067b7          	lui	a5,0x20406
2040053c:	27c78513          	addi	a0,a5,636 # 2040627c <_exit+0x458>
20400540:	2a91                	jal	20400694 <puts>
/Users/i/Documents/Risc-V/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:138
        return (rc * -1);
20400542:	fe042783          	lw	a5,-32(s0)
20400546:	40f007b3          	neg	a5,a5
2040054a:	a825                	j	20400582 <main+0x1a0>
/Users/i/Documents/Risc-V/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:142
    }

    // Lastly CPU interrupt
    if (metal_interrupt_enable(cpu_intr, 0) == -1) {
2040054c:	8f41a783          	lw	a5,-1804(gp) # 80000884 <cpu_intr>
20400550:	4581                	li	a1,0
20400552:	853e                	mv	a0,a5
20400554:	60f000ef          	jal	ra,20401362 <metal_interrupt_enable>
20400558:	872a                	mv	a4,a0
2040055a:	57fd                	li	a5,-1
2040055c:	00f71963          	bne	a4,a5,2040056e <main+0x18c>
/Users/i/Documents/Risc-V/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:143
        printf("CPU interrupt enable failed\n");
20400560:	204067b7          	lui	a5,0x20406
20400564:	2a878513          	addi	a0,a5,680 # 204062a8 <_exit+0x484>
20400568:	2235                	jal	20400694 <puts>
/Users/i/Documents/Risc-V/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:144
        return 6;
2040056a:	4799                	li	a5,6
2040056c:	a819                	j	20400582 <main+0x1a0>
/Users/i/Documents/Risc-V/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:151 (discriminator 1)

    // Red -> Green -> Blue, repeat
    while (1) {

        // Turn on RED
        wait_for_timer(led0_red);
2040056e:	fec42503          	lw	a0,-20(s0)
20400572:	3bcd                	jal	20400364 <wait_for_timer>
/Users/i/Documents/Risc-V/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:154 (discriminator 1)

        // Turn on Green
        wait_for_timer(led0_green);
20400574:	fe842503          	lw	a0,-24(s0)
20400578:	33f5                	jal	20400364 <wait_for_timer>
/Users/i/Documents/Risc-V/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:157 (discriminator 1)

        // Turn on Blue
        wait_for_timer(led0_blue);
2040057a:	fe442503          	lw	a0,-28(s0)
2040057e:	33dd                	jal	20400364 <wait_for_timer>
/Users/i/Documents/Risc-V/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:151 (discriminator 1)
        wait_for_timer(led0_red);
20400580:	b7fd                	j	2040056e <main+0x18c>
/Users/i/Documents/Risc-V/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:162
    }

    // return
    return 0;
}
20400582:	853e                	mv	a0,a5
20400584:	40f2                	lw	ra,28(sp)
20400586:	4462                	lw	s0,24(sp)
20400588:	6105                	addi	sp,sp,32
2040058a:	8082                	ret

2040058c <putchar>:
putchar():
2040058c:	1101                	addi	sp,sp,-32
2040058e:	5fc00797          	auipc	a5,0x5fc00
20400592:	20278793          	addi	a5,a5,514 # 80000790 <_impure_ptr>
20400596:	cc22                	sw	s0,24(sp)
20400598:	4380                	lw	s0,0(a5)
2040059a:	ce06                	sw	ra,28(sp)
2040059c:	85aa                	mv	a1,a0
2040059e:	c419                	beqz	s0,204005ac <putchar+0x20>
204005a0:	4c1c                	lw	a5,24(s0)
204005a2:	e789                	bnez	a5,204005ac <putchar+0x20>
204005a4:	c62a                	sw	a0,12(sp)
204005a6:	8522                	mv	a0,s0
204005a8:	233d                	jal	20400ad6 <__sinit>
204005aa:	45b2                	lw	a1,12(sp)
204005ac:	4410                	lw	a2,8(s0)
204005ae:	8522                	mv	a0,s0
204005b0:	4462                	lw	s0,24(sp)
204005b2:	40f2                	lw	ra,28(sp)
204005b4:	6105                	addi	sp,sp,32
204005b6:	1bb0006f          	j	20400f70 <_putc_r>

204005ba <_puts_r>:
_puts_r():
204005ba:	1101                	addi	sp,sp,-32
204005bc:	ca26                	sw	s1,20(sp)
204005be:	c84a                	sw	s2,16(sp)
204005c0:	ce06                	sw	ra,28(sp)
204005c2:	cc22                	sw	s0,24(sp)
204005c4:	c64e                	sw	s3,12(sp)
204005c6:	c452                	sw	s4,8(sp)
204005c8:	84aa                	mv	s1,a0
204005ca:	892e                	mv	s2,a1
204005cc:	c501                	beqz	a0,204005d4 <_puts_r+0x1a>
204005ce:	4d1c                	lw	a5,24(a0)
204005d0:	e391                	bnez	a5,204005d4 <_puts_r+0x1a>
204005d2:	2311                	jal	20400ad6 <__sinit>
204005d4:	4c9c                	lw	a5,24(s1)
204005d6:	4480                	lw	s0,8(s1)
204005d8:	e399                	bnez	a5,204005de <_puts_r+0x24>
204005da:	8526                	mv	a0,s1
204005dc:	29ed                	jal	20400ad6 <__sinit>
204005de:	00006797          	auipc	a5,0x6
204005e2:	d0678793          	addi	a5,a5,-762 # 204062e4 <__sf_fake_stdin>
204005e6:	02f41c63          	bne	s0,a5,2040061e <_puts_r+0x64>
204005ea:	40c0                	lw	s0,4(s1)
204005ec:	00c45783          	lhu	a5,12(s0)
204005f0:	8ba1                	andi	a5,a5,8
204005f2:	c7b1                	beqz	a5,2040063e <_puts_r+0x84>
204005f4:	481c                	lw	a5,16(s0)
204005f6:	c7a1                	beqz	a5,2040063e <_puts_r+0x84>
204005f8:	59fd                	li	s3,-1
204005fa:	4a29                	li	s4,10
204005fc:	441c                	lw	a5,8(s0)
204005fe:	00094583          	lbu	a1,0(s2)
20400602:	17fd                	addi	a5,a5,-1
20400604:	e9b1                	bnez	a1,20400658 <_puts_r+0x9e>
20400606:	c41c                	sw	a5,8(s0)
20400608:	0607de63          	bgez	a5,20400684 <_puts_r+0xca>
2040060c:	8622                	mv	a2,s0
2040060e:	45a9                	li	a1,10
20400610:	8526                	mv	a0,s1
20400612:	2841                	jal	204006a2 <__swbuf_r>
20400614:	57fd                	li	a5,-1
20400616:	02f50863          	beq	a0,a5,20400646 <_puts_r+0x8c>
2040061a:	4529                	li	a0,10
2040061c:	a035                	j	20400648 <_puts_r+0x8e>
2040061e:	00006797          	auipc	a5,0x6
20400622:	ce678793          	addi	a5,a5,-794 # 20406304 <__sf_fake_stdout>
20400626:	00f41463          	bne	s0,a5,2040062e <_puts_r+0x74>
2040062a:	4480                	lw	s0,8(s1)
2040062c:	b7c1                	j	204005ec <_puts_r+0x32>
2040062e:	00006797          	auipc	a5,0x6
20400632:	c9678793          	addi	a5,a5,-874 # 204062c4 <__sf_fake_stderr>
20400636:	faf41be3          	bne	s0,a5,204005ec <_puts_r+0x32>
2040063a:	44c0                	lw	s0,12(s1)
2040063c:	bf45                	j	204005ec <_puts_r+0x32>
2040063e:	85a2                	mv	a1,s0
20400640:	8526                	mv	a0,s1
20400642:	2205                	jal	20400762 <__swsetup_r>
20400644:	d955                	beqz	a0,204005f8 <_puts_r+0x3e>
20400646:	557d                	li	a0,-1
20400648:	40f2                	lw	ra,28(sp)
2040064a:	4462                	lw	s0,24(sp)
2040064c:	44d2                	lw	s1,20(sp)
2040064e:	4942                	lw	s2,16(sp)
20400650:	49b2                	lw	s3,12(sp)
20400652:	4a22                	lw	s4,8(sp)
20400654:	6105                	addi	sp,sp,32
20400656:	8082                	ret
20400658:	c41c                	sw	a5,8(s0)
2040065a:	0905                	addi	s2,s2,1
2040065c:	0007d763          	bgez	a5,2040066a <_puts_r+0xb0>
20400660:	4c18                	lw	a4,24(s0)
20400662:	00e7cb63          	blt	a5,a4,20400678 <_puts_r+0xbe>
20400666:	01458963          	beq	a1,s4,20400678 <_puts_r+0xbe>
2040066a:	401c                	lw	a5,0(s0)
2040066c:	00178713          	addi	a4,a5,1
20400670:	c018                	sw	a4,0(s0)
20400672:	00b78023          	sb	a1,0(a5)
20400676:	b759                	j	204005fc <_puts_r+0x42>
20400678:	8622                	mv	a2,s0
2040067a:	8526                	mv	a0,s1
2040067c:	201d                	jal	204006a2 <__swbuf_r>
2040067e:	f7351fe3          	bne	a0,s3,204005fc <_puts_r+0x42>
20400682:	b7d1                	j	20400646 <_puts_r+0x8c>
20400684:	401c                	lw	a5,0(s0)
20400686:	00178713          	addi	a4,a5,1
2040068a:	c018                	sw	a4,0(s0)
2040068c:	4729                	li	a4,10
2040068e:	00e78023          	sb	a4,0(a5)
20400692:	b761                	j	2040061a <_puts_r+0x60>

20400694 <puts>:
puts():
20400694:	5fc00797          	auipc	a5,0x5fc00
20400698:	0fc78793          	addi	a5,a5,252 # 80000790 <_impure_ptr>
2040069c:	85aa                	mv	a1,a0
2040069e:	4388                	lw	a0,0(a5)
204006a0:	bf29                	j	204005ba <_puts_r>

204006a2 <__swbuf_r>:
__swbuf_r():
204006a2:	1101                	addi	sp,sp,-32
204006a4:	cc22                	sw	s0,24(sp)
204006a6:	ca26                	sw	s1,20(sp)
204006a8:	c84a                	sw	s2,16(sp)
204006aa:	ce06                	sw	ra,28(sp)
204006ac:	c64e                	sw	s3,12(sp)
204006ae:	84aa                	mv	s1,a0
204006b0:	892e                	mv	s2,a1
204006b2:	8432                	mv	s0,a2
204006b4:	c501                	beqz	a0,204006bc <__swbuf_r+0x1a>
204006b6:	4d1c                	lw	a5,24(a0)
204006b8:	e391                	bnez	a5,204006bc <__swbuf_r+0x1a>
204006ba:	2931                	jal	20400ad6 <__sinit>
204006bc:	00006797          	auipc	a5,0x6
204006c0:	c2878793          	addi	a5,a5,-984 # 204062e4 <__sf_fake_stdin>
204006c4:	06f41963          	bne	s0,a5,20400736 <__swbuf_r+0x94>
204006c8:	40c0                	lw	s0,4(s1)
204006ca:	4c1c                	lw	a5,24(s0)
204006cc:	c41c                	sw	a5,8(s0)
204006ce:	00c45783          	lhu	a5,12(s0)
204006d2:	8ba1                	andi	a5,a5,8
204006d4:	c3c9                	beqz	a5,20400756 <__swbuf_r+0xb4>
204006d6:	481c                	lw	a5,16(s0)
204006d8:	cfbd                	beqz	a5,20400756 <__swbuf_r+0xb4>
204006da:	481c                	lw	a5,16(s0)
204006dc:	4008                	lw	a0,0(s0)
204006de:	0ff97993          	andi	s3,s2,255
204006e2:	0ff97913          	andi	s2,s2,255
204006e6:	8d1d                	sub	a0,a0,a5
204006e8:	485c                	lw	a5,20(s0)
204006ea:	00f54663          	blt	a0,a5,204006f6 <__swbuf_r+0x54>
204006ee:	85a2                	mv	a1,s0
204006f0:	8526                	mv	a0,s1
204006f2:	24e9                	jal	204009bc <_fflush_r>
204006f4:	e52d                	bnez	a0,2040075e <__swbuf_r+0xbc>
204006f6:	441c                	lw	a5,8(s0)
204006f8:	0505                	addi	a0,a0,1
204006fa:	17fd                	addi	a5,a5,-1
204006fc:	c41c                	sw	a5,8(s0)
204006fe:	401c                	lw	a5,0(s0)
20400700:	00178713          	addi	a4,a5,1
20400704:	c018                	sw	a4,0(s0)
20400706:	01378023          	sb	s3,0(a5)
2040070a:	485c                	lw	a5,20(s0)
2040070c:	00a78963          	beq	a5,a0,2040071e <__swbuf_r+0x7c>
20400710:	00c45783          	lhu	a5,12(s0)
20400714:	8b85                	andi	a5,a5,1
20400716:	cb81                	beqz	a5,20400726 <__swbuf_r+0x84>
20400718:	47a9                	li	a5,10
2040071a:	00f91663          	bne	s2,a5,20400726 <__swbuf_r+0x84>
2040071e:	85a2                	mv	a1,s0
20400720:	8526                	mv	a0,s1
20400722:	2c69                	jal	204009bc <_fflush_r>
20400724:	ed0d                	bnez	a0,2040075e <__swbuf_r+0xbc>
20400726:	40f2                	lw	ra,28(sp)
20400728:	4462                	lw	s0,24(sp)
2040072a:	854a                	mv	a0,s2
2040072c:	44d2                	lw	s1,20(sp)
2040072e:	4942                	lw	s2,16(sp)
20400730:	49b2                	lw	s3,12(sp)
20400732:	6105                	addi	sp,sp,32
20400734:	8082                	ret
20400736:	00006797          	auipc	a5,0x6
2040073a:	bce78793          	addi	a5,a5,-1074 # 20406304 <__sf_fake_stdout>
2040073e:	00f41463          	bne	s0,a5,20400746 <__swbuf_r+0xa4>
20400742:	4480                	lw	s0,8(s1)
20400744:	b759                	j	204006ca <__swbuf_r+0x28>
20400746:	00006797          	auipc	a5,0x6
2040074a:	b7e78793          	addi	a5,a5,-1154 # 204062c4 <__sf_fake_stderr>
2040074e:	f6f41ee3          	bne	s0,a5,204006ca <__swbuf_r+0x28>
20400752:	44c0                	lw	s0,12(s1)
20400754:	bf9d                	j	204006ca <__swbuf_r+0x28>
20400756:	85a2                	mv	a1,s0
20400758:	8526                	mv	a0,s1
2040075a:	2021                	jal	20400762 <__swsetup_r>
2040075c:	dd3d                	beqz	a0,204006da <__swbuf_r+0x38>
2040075e:	597d                	li	s2,-1
20400760:	b7d9                	j	20400726 <__swbuf_r+0x84>

20400762 <__swsetup_r>:
__swsetup_r():
20400762:	1141                	addi	sp,sp,-16
20400764:	5fc00797          	auipc	a5,0x5fc00
20400768:	02c78793          	addi	a5,a5,44 # 80000790 <_impure_ptr>
2040076c:	c226                	sw	s1,4(sp)
2040076e:	4384                	lw	s1,0(a5)
20400770:	c422                	sw	s0,8(sp)
20400772:	c04a                	sw	s2,0(sp)
20400774:	c606                	sw	ra,12(sp)
20400776:	892a                	mv	s2,a0
20400778:	842e                	mv	s0,a1
2040077a:	c489                	beqz	s1,20400784 <__swsetup_r+0x22>
2040077c:	4c9c                	lw	a5,24(s1)
2040077e:	e399                	bnez	a5,20400784 <__swsetup_r+0x22>
20400780:	8526                	mv	a0,s1
20400782:	2e91                	jal	20400ad6 <__sinit>
20400784:	00006797          	auipc	a5,0x6
20400788:	b6078793          	addi	a5,a5,-1184 # 204062e4 <__sf_fake_stdin>
2040078c:	02f41c63          	bne	s0,a5,204007c4 <__swsetup_r+0x62>
20400790:	40c0                	lw	s0,4(s1)
20400792:	00c41703          	lh	a4,12(s0)
20400796:	01071793          	slli	a5,a4,0x10
2040079a:	83c1                	srli	a5,a5,0x10
2040079c:	0087f693          	andi	a3,a5,8
204007a0:	eeb5                	bnez	a3,2040081c <__swsetup_r+0xba>
204007a2:	0107f693          	andi	a3,a5,16
204007a6:	ee9d                	bnez	a3,204007e4 <__swsetup_r+0x82>
204007a8:	47a5                	li	a5,9
204007aa:	00f92023          	sw	a5,0(s2)
204007ae:	04076713          	ori	a4,a4,64
204007b2:	00e41623          	sh	a4,12(s0)
204007b6:	557d                	li	a0,-1
204007b8:	40b2                	lw	ra,12(sp)
204007ba:	4422                	lw	s0,8(sp)
204007bc:	4492                	lw	s1,4(sp)
204007be:	4902                	lw	s2,0(sp)
204007c0:	0141                	addi	sp,sp,16
204007c2:	8082                	ret
204007c4:	00006797          	auipc	a5,0x6
204007c8:	b4078793          	addi	a5,a5,-1216 # 20406304 <__sf_fake_stdout>
204007cc:	00f41463          	bne	s0,a5,204007d4 <__swsetup_r+0x72>
204007d0:	4480                	lw	s0,8(s1)
204007d2:	b7c1                	j	20400792 <__swsetup_r+0x30>
204007d4:	00006797          	auipc	a5,0x6
204007d8:	af078793          	addi	a5,a5,-1296 # 204062c4 <__sf_fake_stderr>
204007dc:	faf41be3          	bne	s0,a5,20400792 <__swsetup_r+0x30>
204007e0:	44c0                	lw	s0,12(s1)
204007e2:	bf45                	j	20400792 <__swsetup_r+0x30>
204007e4:	8b91                	andi	a5,a5,4
204007e6:	c78d                	beqz	a5,20400810 <__swsetup_r+0xae>
204007e8:	584c                	lw	a1,52(s0)
204007ea:	c989                	beqz	a1,204007fc <__swsetup_r+0x9a>
204007ec:	04440793          	addi	a5,s0,68
204007f0:	00f58463          	beq	a1,a5,204007f8 <__swsetup_r+0x96>
204007f4:	854a                	mv	a0,s2
204007f6:	2bc5                	jal	20400de6 <_free_r>
204007f8:	02042a23          	sw	zero,52(s0)
204007fc:	00c45783          	lhu	a5,12(s0)
20400800:	00042223          	sw	zero,4(s0)
20400804:	fdb7f793          	andi	a5,a5,-37
20400808:	00f41623          	sh	a5,12(s0)
2040080c:	481c                	lw	a5,16(s0)
2040080e:	c01c                	sw	a5,0(s0)
20400810:	00c45783          	lhu	a5,12(s0)
20400814:	0087e793          	ori	a5,a5,8
20400818:	00f41623          	sh	a5,12(s0)
2040081c:	481c                	lw	a5,16(s0)
2040081e:	ef81                	bnez	a5,20400836 <__swsetup_r+0xd4>
20400820:	00c45783          	lhu	a5,12(s0)
20400824:	20000713          	li	a4,512
20400828:	2807f793          	andi	a5,a5,640
2040082c:	00e78563          	beq	a5,a4,20400836 <__swsetup_r+0xd4>
20400830:	85a2                	mv	a1,s0
20400832:	854a                	mv	a0,s2
20400834:	21bd                	jal	20400ca2 <__smakebuf_r>
20400836:	00c45783          	lhu	a5,12(s0)
2040083a:	0017f713          	andi	a4,a5,1
2040083e:	c705                	beqz	a4,20400866 <__swsetup_r+0x104>
20400840:	485c                	lw	a5,20(s0)
20400842:	00042423          	sw	zero,8(s0)
20400846:	40f007b3          	neg	a5,a5
2040084a:	cc1c                	sw	a5,24(s0)
2040084c:	481c                	lw	a5,16(s0)
2040084e:	4501                	li	a0,0
20400850:	f7a5                	bnez	a5,204007b8 <__swsetup_r+0x56>
20400852:	00c41783          	lh	a5,12(s0)
20400856:	0807f713          	andi	a4,a5,128
2040085a:	df39                	beqz	a4,204007b8 <__swsetup_r+0x56>
2040085c:	0407e793          	ori	a5,a5,64
20400860:	00f41623          	sh	a5,12(s0)
20400864:	bf89                	j	204007b6 <__swsetup_r+0x54>
20400866:	8b89                	andi	a5,a5,2
20400868:	4701                	li	a4,0
2040086a:	e391                	bnez	a5,2040086e <__swsetup_r+0x10c>
2040086c:	4858                	lw	a4,20(s0)
2040086e:	c418                	sw	a4,8(s0)
20400870:	bff1                	j	2040084c <__swsetup_r+0xea>

20400872 <__sflush_r>:
__sflush_r():
20400872:	00c5d783          	lhu	a5,12(a1) # 800c <__heap_size+0x780c>
20400876:	1101                	addi	sp,sp,-32
20400878:	cc22                	sw	s0,24(sp)
2040087a:	ca26                	sw	s1,20(sp)
2040087c:	ce06                	sw	ra,28(sp)
2040087e:	c84a                	sw	s2,16(sp)
20400880:	c64e                	sw	s3,12(sp)
20400882:	0087f713          	andi	a4,a5,8
20400886:	84aa                	mv	s1,a0
20400888:	842e                	mv	s0,a1
2040088a:	e765                	bnez	a4,20400972 <__sflush_r+0x100>
2040088c:	41d8                	lw	a4,4(a1)
2040088e:	00e04763          	bgtz	a4,2040089c <__sflush_r+0x2a>
20400892:	41b8                	lw	a4,64(a1)
20400894:	00e04463          	bgtz	a4,2040089c <__sflush_r+0x2a>
20400898:	4501                	li	a0,0
2040089a:	a0c1                	j	2040095a <__sflush_r+0xe8>
2040089c:	5458                	lw	a4,44(s0)
2040089e:	df6d                	beqz	a4,20400898 <__sflush_r+0x26>
204008a0:	0004a903          	lw	s2,0(s1)
204008a4:	01379693          	slli	a3,a5,0x13
204008a8:	0004a023          	sw	zero,0(s1)
204008ac:	0606de63          	bgez	a3,20400928 <__sflush_r+0xb6>
204008b0:	4868                	lw	a0,84(s0)
204008b2:	00c45783          	lhu	a5,12(s0)
204008b6:	8b91                	andi	a5,a5,4
204008b8:	c799                	beqz	a5,204008c6 <__sflush_r+0x54>
204008ba:	405c                	lw	a5,4(s0)
204008bc:	8d1d                	sub	a0,a0,a5
204008be:	585c                	lw	a5,52(s0)
204008c0:	c399                	beqz	a5,204008c6 <__sflush_r+0x54>
204008c2:	403c                	lw	a5,64(s0)
204008c4:	8d1d                	sub	a0,a0,a5
204008c6:	545c                	lw	a5,44(s0)
204008c8:	500c                	lw	a1,32(s0)
204008ca:	862a                	mv	a2,a0
204008cc:	4681                	li	a3,0
204008ce:	8526                	mv	a0,s1
204008d0:	9782                	jalr	a5
204008d2:	57fd                	li	a5,-1
204008d4:	00c45703          	lhu	a4,12(s0)
204008d8:	00f51d63          	bne	a0,a5,204008f2 <__sflush_r+0x80>
204008dc:	4094                	lw	a3,0(s1)
204008de:	47f5                	li	a5,29
204008e0:	08d7e463          	bltu	a5,a3,20400968 <__sflush_r+0xf6>
204008e4:	204007b7          	lui	a5,0x20400
204008e8:	0785                	addi	a5,a5,1
204008ea:	00d7d7b3          	srl	a5,a5,a3
204008ee:	8b85                	andi	a5,a5,1
204008f0:	cfa5                	beqz	a5,20400968 <__sflush_r+0xf6>
204008f2:	481c                	lw	a5,16(s0)
204008f4:	00042223          	sw	zero,4(s0)
204008f8:	c01c                	sw	a5,0(s0)
204008fa:	01371793          	slli	a5,a4,0x13
204008fe:	0007d863          	bgez	a5,2040090e <__sflush_r+0x9c>
20400902:	57fd                	li	a5,-1
20400904:	00f51463          	bne	a0,a5,2040090c <__sflush_r+0x9a>
20400908:	409c                	lw	a5,0(s1)
2040090a:	e391                	bnez	a5,2040090e <__sflush_r+0x9c>
2040090c:	c868                	sw	a0,84(s0)
2040090e:	584c                	lw	a1,52(s0)
20400910:	0124a023          	sw	s2,0(s1)
20400914:	d1d1                	beqz	a1,20400898 <__sflush_r+0x26>
20400916:	04440793          	addi	a5,s0,68
2040091a:	00f58463          	beq	a1,a5,20400922 <__sflush_r+0xb0>
2040091e:	8526                	mv	a0,s1
20400920:	21d9                	jal	20400de6 <_free_r>
20400922:	02042a23          	sw	zero,52(s0)
20400926:	bf8d                	j	20400898 <__sflush_r+0x26>
20400928:	500c                	lw	a1,32(s0)
2040092a:	4685                	li	a3,1
2040092c:	4601                	li	a2,0
2040092e:	8526                	mv	a0,s1
20400930:	9702                	jalr	a4
20400932:	57fd                	li	a5,-1
20400934:	f6f51fe3          	bne	a0,a5,204008b2 <__sflush_r+0x40>
20400938:	409c                	lw	a5,0(s1)
2040093a:	dfa5                	beqz	a5,204008b2 <__sflush_r+0x40>
2040093c:	4775                	li	a4,29
2040093e:	00e78563          	beq	a5,a4,20400948 <__sflush_r+0xd6>
20400942:	4759                	li	a4,22
20400944:	00e79563          	bne	a5,a4,2040094e <__sflush_r+0xdc>
20400948:	0124a023          	sw	s2,0(s1)
2040094c:	b7b1                	j	20400898 <__sflush_r+0x26>
2040094e:	00c45783          	lhu	a5,12(s0)
20400952:	0407e793          	ori	a5,a5,64
20400956:	00f41623          	sh	a5,12(s0)
2040095a:	40f2                	lw	ra,28(sp)
2040095c:	4462                	lw	s0,24(sp)
2040095e:	44d2                	lw	s1,20(sp)
20400960:	4942                	lw	s2,16(sp)
20400962:	49b2                	lw	s3,12(sp)
20400964:	6105                	addi	sp,sp,32
20400966:	8082                	ret
20400968:	04076713          	ori	a4,a4,64
2040096c:	00e41623          	sh	a4,12(s0)
20400970:	b7ed                	j	2040095a <__sflush_r+0xe8>
20400972:	0105a983          	lw	s3,16(a1)
20400976:	f20981e3          	beqz	s3,20400898 <__sflush_r+0x26>
2040097a:	0005a903          	lw	s2,0(a1)
2040097e:	8b8d                	andi	a5,a5,3
20400980:	0135a023          	sw	s3,0(a1)
20400984:	41390933          	sub	s2,s2,s3
20400988:	4701                	li	a4,0
2040098a:	e391                	bnez	a5,2040098e <__sflush_r+0x11c>
2040098c:	49d8                	lw	a4,20(a1)
2040098e:	c418                	sw	a4,8(s0)
20400990:	f12054e3          	blez	s2,20400898 <__sflush_r+0x26>
20400994:	541c                	lw	a5,40(s0)
20400996:	500c                	lw	a1,32(s0)
20400998:	86ca                	mv	a3,s2
2040099a:	864e                	mv	a2,s3
2040099c:	8526                	mv	a0,s1
2040099e:	9782                	jalr	a5
204009a0:	00a04a63          	bgtz	a0,204009b4 <__sflush_r+0x142>
204009a4:	00c45783          	lhu	a5,12(s0)
204009a8:	557d                	li	a0,-1
204009aa:	0407e793          	ori	a5,a5,64
204009ae:	00f41623          	sh	a5,12(s0)
204009b2:	b765                	j	2040095a <__sflush_r+0xe8>
204009b4:	99aa                	add	s3,s3,a0
204009b6:	40a90933          	sub	s2,s2,a0
204009ba:	bfd9                	j	20400990 <__sflush_r+0x11e>

204009bc <_fflush_r>:
_fflush_r():
204009bc:	499c                	lw	a5,16(a1)
204009be:	cfb9                	beqz	a5,20400a1c <_fflush_r+0x60>
204009c0:	1101                	addi	sp,sp,-32
204009c2:	cc22                	sw	s0,24(sp)
204009c4:	ce06                	sw	ra,28(sp)
204009c6:	842a                	mv	s0,a0
204009c8:	c511                	beqz	a0,204009d4 <_fflush_r+0x18>
204009ca:	4d1c                	lw	a5,24(a0)
204009cc:	e781                	bnez	a5,204009d4 <_fflush_r+0x18>
204009ce:	c62e                	sw	a1,12(sp)
204009d0:	2219                	jal	20400ad6 <__sinit>
204009d2:	45b2                	lw	a1,12(sp)
204009d4:	00006797          	auipc	a5,0x6
204009d8:	91078793          	addi	a5,a5,-1776 # 204062e4 <__sf_fake_stdin>
204009dc:	00f59b63          	bne	a1,a5,204009f2 <_fflush_r+0x36>
204009e0:	404c                	lw	a1,4(s0)
204009e2:	00c59783          	lh	a5,12(a1)
204009e6:	c795                	beqz	a5,20400a12 <_fflush_r+0x56>
204009e8:	8522                	mv	a0,s0
204009ea:	4462                	lw	s0,24(sp)
204009ec:	40f2                	lw	ra,28(sp)
204009ee:	6105                	addi	sp,sp,32
204009f0:	b549                	j	20400872 <__sflush_r>
204009f2:	00006797          	auipc	a5,0x6
204009f6:	91278793          	addi	a5,a5,-1774 # 20406304 <__sf_fake_stdout>
204009fa:	00f59463          	bne	a1,a5,20400a02 <_fflush_r+0x46>
204009fe:	440c                	lw	a1,8(s0)
20400a00:	b7cd                	j	204009e2 <_fflush_r+0x26>
20400a02:	00006797          	auipc	a5,0x6
20400a06:	8c278793          	addi	a5,a5,-1854 # 204062c4 <__sf_fake_stderr>
20400a0a:	fcf59ce3          	bne	a1,a5,204009e2 <_fflush_r+0x26>
20400a0e:	444c                	lw	a1,12(s0)
20400a10:	bfc9                	j	204009e2 <_fflush_r+0x26>
20400a12:	40f2                	lw	ra,28(sp)
20400a14:	4462                	lw	s0,24(sp)
20400a16:	4501                	li	a0,0
20400a18:	6105                	addi	sp,sp,32
20400a1a:	8082                	ret
20400a1c:	4501                	li	a0,0
20400a1e:	8082                	ret

20400a20 <std>:
std():
20400a20:	1141                	addi	sp,sp,-16
20400a22:	c422                	sw	s0,8(sp)
20400a24:	c606                	sw	ra,12(sp)
20400a26:	842a                	mv	s0,a0
20400a28:	00b51623          	sh	a1,12(a0)
20400a2c:	00c51723          	sh	a2,14(a0)
20400a30:	00052023          	sw	zero,0(a0)
20400a34:	00052223          	sw	zero,4(a0)
20400a38:	00052423          	sw	zero,8(a0)
20400a3c:	06052223          	sw	zero,100(a0)
20400a40:	00052823          	sw	zero,16(a0)
20400a44:	00052a23          	sw	zero,20(a0)
20400a48:	00052c23          	sw	zero,24(a0)
20400a4c:	4621                	li	a2,8
20400a4e:	4581                	li	a1,0
20400a50:	05c50513          	addi	a0,a0,92
20400a54:	24ed                	jal	20400d3e <memset>
20400a56:	00000797          	auipc	a5,0x0
20400a5a:	5c878793          	addi	a5,a5,1480 # 2040101e <__sread>
20400a5e:	d05c                	sw	a5,36(s0)
20400a60:	00000797          	auipc	a5,0x0
20400a64:	5ee78793          	addi	a5,a5,1518 # 2040104e <__swrite>
20400a68:	d41c                	sw	a5,40(s0)
20400a6a:	00000797          	auipc	a5,0x0
20400a6e:	63278793          	addi	a5,a5,1586 # 2040109c <__sseek>
20400a72:	d45c                	sw	a5,44(s0)
20400a74:	00000797          	auipc	a5,0x0
20400a78:	65e78793          	addi	a5,a5,1630 # 204010d2 <__sclose>
20400a7c:	d000                	sw	s0,32(s0)
20400a7e:	d81c                	sw	a5,48(s0)
20400a80:	40b2                	lw	ra,12(sp)
20400a82:	4422                	lw	s0,8(sp)
20400a84:	0141                	addi	sp,sp,16
20400a86:	8082                	ret

20400a88 <_cleanup_r>:
_cleanup_r():
20400a88:	00000597          	auipc	a1,0x0
20400a8c:	f3458593          	addi	a1,a1,-204 # 204009bc <_fflush_r>
20400a90:	a2b9                	j	20400bde <_fwalk_reent>

20400a92 <__sfmoreglue>:
__sfmoreglue():
20400a92:	1141                	addi	sp,sp,-16
20400a94:	c226                	sw	s1,4(sp)
20400a96:	06800613          	li	a2,104
20400a9a:	fff58493          	addi	s1,a1,-1
20400a9e:	02c484b3          	mul	s1,s1,a2
20400aa2:	c04a                	sw	s2,0(sp)
20400aa4:	892e                	mv	s2,a1
20400aa6:	c422                	sw	s0,8(sp)
20400aa8:	c606                	sw	ra,12(sp)
20400aaa:	07448593          	addi	a1,s1,116
20400aae:	26d5                	jal	20400e92 <_malloc_r>
20400ab0:	842a                	mv	s0,a0
20400ab2:	c919                	beqz	a0,20400ac8 <__sfmoreglue+0x36>
20400ab4:	00052023          	sw	zero,0(a0)
20400ab8:	01252223          	sw	s2,4(a0)
20400abc:	0531                	addi	a0,a0,12
20400abe:	c408                	sw	a0,8(s0)
20400ac0:	06848613          	addi	a2,s1,104
20400ac4:	4581                	li	a1,0
20400ac6:	2ca5                	jal	20400d3e <memset>
20400ac8:	8522                	mv	a0,s0
20400aca:	40b2                	lw	ra,12(sp)
20400acc:	4422                	lw	s0,8(sp)
20400ace:	4492                	lw	s1,4(sp)
20400ad0:	4902                	lw	s2,0(sp)
20400ad2:	0141                	addi	sp,sp,16
20400ad4:	8082                	ret

20400ad6 <__sinit>:
__sinit():
20400ad6:	4d1c                	lw	a5,24(a0)
20400ad8:	e3bd                	bnez	a5,20400b3e <__sinit+0x68>
20400ada:	1141                	addi	sp,sp,-16
20400adc:	c606                	sw	ra,12(sp)
20400ade:	c422                	sw	s0,8(sp)
20400ae0:	00000797          	auipc	a5,0x0
20400ae4:	fa878793          	addi	a5,a5,-88 # 20400a88 <_cleanup_r>
20400ae8:	d51c                	sw	a5,40(a0)
20400aea:	5fc00797          	auipc	a5,0x5fc00
20400aee:	caa78793          	addi	a5,a5,-854 # 80000794 <_global_impure_ptr>
20400af2:	439c                	lw	a5,0(a5)
20400af4:	04052423          	sw	zero,72(a0)
20400af8:	04052623          	sw	zero,76(a0)
20400afc:	04052823          	sw	zero,80(a0)
20400b00:	00f51463          	bne	a0,a5,20400b08 <__sinit+0x32>
20400b04:	4785                	li	a5,1
20400b06:	cd1c                	sw	a5,24(a0)
20400b08:	842a                	mv	s0,a0
20400b0a:	281d                	jal	20400b40 <__sfp>
20400b0c:	c048                	sw	a0,4(s0)
20400b0e:	8522                	mv	a0,s0
20400b10:	2805                	jal	20400b40 <__sfp>
20400b12:	c408                	sw	a0,8(s0)
20400b14:	8522                	mv	a0,s0
20400b16:	202d                	jal	20400b40 <__sfp>
20400b18:	c448                	sw	a0,12(s0)
20400b1a:	4048                	lw	a0,4(s0)
20400b1c:	4601                	li	a2,0
20400b1e:	4591                	li	a1,4
20400b20:	3701                	jal	20400a20 <std>
20400b22:	4408                	lw	a0,8(s0)
20400b24:	4605                	li	a2,1
20400b26:	45a5                	li	a1,9
20400b28:	3de5                	jal	20400a20 <std>
20400b2a:	4448                	lw	a0,12(s0)
20400b2c:	4609                	li	a2,2
20400b2e:	45c9                	li	a1,18
20400b30:	3dc5                	jal	20400a20 <std>
20400b32:	4785                	li	a5,1
20400b34:	cc1c                	sw	a5,24(s0)
20400b36:	40b2                	lw	ra,12(sp)
20400b38:	4422                	lw	s0,8(sp)
20400b3a:	0141                	addi	sp,sp,16
20400b3c:	8082                	ret
20400b3e:	8082                	ret

20400b40 <__sfp>:
__sfp():
20400b40:	1141                	addi	sp,sp,-16
20400b42:	5fc00797          	auipc	a5,0x5fc00
20400b46:	c5278793          	addi	a5,a5,-942 # 80000794 <_global_impure_ptr>
20400b4a:	c226                	sw	s1,4(sp)
20400b4c:	4384                	lw	s1,0(a5)
20400b4e:	c04a                	sw	s2,0(sp)
20400b50:	c606                	sw	ra,12(sp)
20400b52:	4c9c                	lw	a5,24(s1)
20400b54:	c422                	sw	s0,8(sp)
20400b56:	892a                	mv	s2,a0
20400b58:	e399                	bnez	a5,20400b5e <__sfp+0x1e>
20400b5a:	8526                	mv	a0,s1
20400b5c:	3fad                	jal	20400ad6 <__sinit>
20400b5e:	04848493          	addi	s1,s1,72
20400b62:	4480                	lw	s0,8(s1)
20400b64:	40dc                	lw	a5,4(s1)
20400b66:	17fd                	addi	a5,a5,-1
20400b68:	0007d663          	bgez	a5,20400b74 <__sfp+0x34>
20400b6c:	409c                	lw	a5,0(s1)
20400b6e:	cfb1                	beqz	a5,20400bca <__sfp+0x8a>
20400b70:	4084                	lw	s1,0(s1)
20400b72:	bfc5                	j	20400b62 <__sfp+0x22>
20400b74:	00c41703          	lh	a4,12(s0)
20400b78:	e731                	bnez	a4,20400bc4 <__sfp+0x84>
20400b7a:	77c1                	lui	a5,0xffff0
20400b7c:	0785                	addi	a5,a5,1
20400b7e:	06042223          	sw	zero,100(s0)
20400b82:	00042023          	sw	zero,0(s0)
20400b86:	00042223          	sw	zero,4(s0)
20400b8a:	00042423          	sw	zero,8(s0)
20400b8e:	c45c                	sw	a5,12(s0)
20400b90:	00042823          	sw	zero,16(s0)
20400b94:	00042a23          	sw	zero,20(s0)
20400b98:	00042c23          	sw	zero,24(s0)
20400b9c:	4621                	li	a2,8
20400b9e:	4581                	li	a1,0
20400ba0:	05c40513          	addi	a0,s0,92
20400ba4:	2a69                	jal	20400d3e <memset>
20400ba6:	02042a23          	sw	zero,52(s0)
20400baa:	02042c23          	sw	zero,56(s0)
20400bae:	04042423          	sw	zero,72(s0)
20400bb2:	04042623          	sw	zero,76(s0)
20400bb6:	8522                	mv	a0,s0
20400bb8:	40b2                	lw	ra,12(sp)
20400bba:	4422                	lw	s0,8(sp)
20400bbc:	4492                	lw	s1,4(sp)
20400bbe:	4902                	lw	s2,0(sp)
20400bc0:	0141                	addi	sp,sp,16
20400bc2:	8082                	ret
20400bc4:	06840413          	addi	s0,s0,104
20400bc8:	bf79                	j	20400b66 <__sfp+0x26>
20400bca:	4591                	li	a1,4
20400bcc:	854a                	mv	a0,s2
20400bce:	35d1                	jal	20400a92 <__sfmoreglue>
20400bd0:	c088                	sw	a0,0(s1)
20400bd2:	842a                	mv	s0,a0
20400bd4:	fd51                	bnez	a0,20400b70 <__sfp+0x30>
20400bd6:	47b1                	li	a5,12
20400bd8:	00f92023          	sw	a5,0(s2)
20400bdc:	bfe9                	j	20400bb6 <__sfp+0x76>

20400bde <_fwalk_reent>:
_fwalk_reent():
20400bde:	7179                	addi	sp,sp,-48
20400be0:	d422                	sw	s0,40(sp)
20400be2:	d04a                	sw	s2,32(sp)
20400be4:	cc52                	sw	s4,24(sp)
20400be6:	ca56                	sw	s5,20(sp)
20400be8:	c85a                	sw	s6,16(sp)
20400bea:	c65e                	sw	s7,12(sp)
20400bec:	d606                	sw	ra,44(sp)
20400bee:	d226                	sw	s1,36(sp)
20400bf0:	ce4e                	sw	s3,28(sp)
20400bf2:	8a2a                	mv	s4,a0
20400bf4:	8aae                	mv	s5,a1
20400bf6:	04850413          	addi	s0,a0,72
20400bfa:	4901                	li	s2,0
20400bfc:	4b05                	li	s6,1
20400bfe:	5bfd                	li	s7,-1
20400c00:	ec09                	bnez	s0,20400c1a <_fwalk_reent+0x3c>
20400c02:	50b2                	lw	ra,44(sp)
20400c04:	5422                	lw	s0,40(sp)
20400c06:	854a                	mv	a0,s2
20400c08:	5492                	lw	s1,36(sp)
20400c0a:	5902                	lw	s2,32(sp)
20400c0c:	49f2                	lw	s3,28(sp)
20400c0e:	4a62                	lw	s4,24(sp)
20400c10:	4ad2                	lw	s5,20(sp)
20400c12:	4b42                	lw	s6,16(sp)
20400c14:	4bb2                	lw	s7,12(sp)
20400c16:	6145                	addi	sp,sp,48
20400c18:	8082                	ret
20400c1a:	4404                	lw	s1,8(s0)
20400c1c:	00442983          	lw	s3,4(s0)
20400c20:	19fd                	addi	s3,s3,-1
20400c22:	0009d463          	bgez	s3,20400c2a <_fwalk_reent+0x4c>
20400c26:	4000                	lw	s0,0(s0)
20400c28:	bfe1                	j	20400c00 <_fwalk_reent+0x22>
20400c2a:	00c4d783          	lhu	a5,12(s1)
20400c2e:	00fb7b63          	bgeu	s6,a5,20400c44 <_fwalk_reent+0x66>
20400c32:	00e49783          	lh	a5,14(s1)
20400c36:	01778763          	beq	a5,s7,20400c44 <_fwalk_reent+0x66>
20400c3a:	85a6                	mv	a1,s1
20400c3c:	8552                	mv	a0,s4
20400c3e:	9a82                	jalr	s5
20400c40:	00a96933          	or	s2,s2,a0
20400c44:	06848493          	addi	s1,s1,104
20400c48:	bfe1                	j	20400c20 <_fwalk_reent+0x42>

20400c4a <__swhatbuf_r>:
__swhatbuf_r():
20400c4a:	7119                	addi	sp,sp,-128
20400c4c:	daa6                	sw	s1,116(sp)
20400c4e:	84ae                	mv	s1,a1
20400c50:	00e59583          	lh	a1,14(a1)
20400c54:	dca2                	sw	s0,120(sp)
20400c56:	de86                	sw	ra,124(sp)
20400c58:	8432                	mv	s0,a2
20400c5a:	0005dc63          	bgez	a1,20400c72 <__swhatbuf_r+0x28>
20400c5e:	00c4d783          	lhu	a5,12(s1)
20400c62:	0006a023          	sw	zero,0(a3)
20400c66:	0807f793          	andi	a5,a5,128
20400c6a:	e39d                	bnez	a5,20400c90 <__swhatbuf_r+0x46>
20400c6c:	40000793          	li	a5,1024
20400c70:	a015                	j	20400c94 <__swhatbuf_r+0x4a>
20400c72:	0830                	addi	a2,sp,24
20400c74:	c636                	sw	a3,12(sp)
20400c76:	296d                	jal	20401130 <_fstat_r>
20400c78:	46b2                	lw	a3,12(sp)
20400c7a:	fe0542e3          	bltz	a0,20400c5e <__swhatbuf_r+0x14>
20400c7e:	4772                	lw	a4,28(sp)
20400c80:	67bd                	lui	a5,0xf
20400c82:	8ff9                	and	a5,a5,a4
20400c84:	7779                	lui	a4,0xffffe
20400c86:	97ba                	add	a5,a5,a4
20400c88:	0017b793          	seqz	a5,a5
20400c8c:	c29c                	sw	a5,0(a3)
20400c8e:	bff9                	j	20400c6c <__swhatbuf_r+0x22>
20400c90:	04000793          	li	a5,64
20400c94:	c01c                	sw	a5,0(s0)
20400c96:	50f6                	lw	ra,124(sp)
20400c98:	5466                	lw	s0,120(sp)
20400c9a:	54d6                	lw	s1,116(sp)
20400c9c:	4501                	li	a0,0
20400c9e:	6109                	addi	sp,sp,128
20400ca0:	8082                	ret

20400ca2 <__smakebuf_r>:
__smakebuf_r():
20400ca2:	00c5d783          	lhu	a5,12(a1)
20400ca6:	1101                	addi	sp,sp,-32
20400ca8:	cc22                	sw	s0,24(sp)
20400caa:	ce06                	sw	ra,28(sp)
20400cac:	ca26                	sw	s1,20(sp)
20400cae:	c84a                	sw	s2,16(sp)
20400cb0:	8b89                	andi	a5,a5,2
20400cb2:	842e                	mv	s0,a1
20400cb4:	cf89                	beqz	a5,20400cce <__smakebuf_r+0x2c>
20400cb6:	04740793          	addi	a5,s0,71
20400cba:	c01c                	sw	a5,0(s0)
20400cbc:	c81c                	sw	a5,16(s0)
20400cbe:	4785                	li	a5,1
20400cc0:	c85c                	sw	a5,20(s0)
20400cc2:	40f2                	lw	ra,28(sp)
20400cc4:	4462                	lw	s0,24(sp)
20400cc6:	44d2                	lw	s1,20(sp)
20400cc8:	4942                	lw	s2,16(sp)
20400cca:	6105                	addi	sp,sp,32
20400ccc:	8082                	ret
20400cce:	0074                	addi	a3,sp,12
20400cd0:	0030                	addi	a2,sp,8
20400cd2:	84aa                	mv	s1,a0
20400cd4:	3f9d                	jal	20400c4a <__swhatbuf_r>
20400cd6:	45a2                	lw	a1,8(sp)
20400cd8:	892a                	mv	s2,a0
20400cda:	8526                	mv	a0,s1
20400cdc:	2a5d                	jal	20400e92 <_malloc_r>
20400cde:	ed01                	bnez	a0,20400cf6 <__smakebuf_r+0x54>
20400ce0:	00c41783          	lh	a5,12(s0)
20400ce4:	2007f713          	andi	a4,a5,512
20400ce8:	ff69                	bnez	a4,20400cc2 <__smakebuf_r+0x20>
20400cea:	9bf1                	andi	a5,a5,-4
20400cec:	0027e793          	ori	a5,a5,2
20400cf0:	00f41623          	sh	a5,12(s0)
20400cf4:	b7c9                	j	20400cb6 <__smakebuf_r+0x14>
20400cf6:	00000797          	auipc	a5,0x0
20400cfa:	d9278793          	addi	a5,a5,-622 # 20400a88 <_cleanup_r>
20400cfe:	d49c                	sw	a5,40(s1)
20400d00:	00c45783          	lhu	a5,12(s0)
20400d04:	c008                	sw	a0,0(s0)
20400d06:	c808                	sw	a0,16(s0)
20400d08:	0807e793          	ori	a5,a5,128
20400d0c:	00f41623          	sh	a5,12(s0)
20400d10:	47a2                	lw	a5,8(sp)
20400d12:	c85c                	sw	a5,20(s0)
20400d14:	47b2                	lw	a5,12(sp)
20400d16:	cf89                	beqz	a5,20400d30 <__smakebuf_r+0x8e>
20400d18:	00e41583          	lh	a1,14(s0)
20400d1c:	8526                	mv	a0,s1
20400d1e:	293d                	jal	2040115c <_isatty_r>
20400d20:	c901                	beqz	a0,20400d30 <__smakebuf_r+0x8e>
20400d22:	00c45783          	lhu	a5,12(s0)
20400d26:	9bf1                	andi	a5,a5,-4
20400d28:	0017e793          	ori	a5,a5,1
20400d2c:	00f41623          	sh	a5,12(s0)
20400d30:	00c45783          	lhu	a5,12(s0)
20400d34:	00f96933          	or	s2,s2,a5
20400d38:	01241623          	sh	s2,12(s0)
20400d3c:	b759                	j	20400cc2 <__smakebuf_r+0x20>

20400d3e <memset>:
memset():
20400d3e:	433d                	li	t1,15
20400d40:	872a                	mv	a4,a0
20400d42:	02c37363          	bgeu	t1,a2,20400d68 <memset+0x2a>
20400d46:	00f77793          	andi	a5,a4,15
20400d4a:	efbd                	bnez	a5,20400dc8 <memset+0x8a>
20400d4c:	e5ad                	bnez	a1,20400db6 <memset+0x78>
20400d4e:	ff067693          	andi	a3,a2,-16
20400d52:	8a3d                	andi	a2,a2,15
20400d54:	96ba                	add	a3,a3,a4
20400d56:	c30c                	sw	a1,0(a4)
20400d58:	c34c                	sw	a1,4(a4)
20400d5a:	c70c                	sw	a1,8(a4)
20400d5c:	c74c                	sw	a1,12(a4)
20400d5e:	0741                	addi	a4,a4,16
20400d60:	fed76be3          	bltu	a4,a3,20400d56 <memset+0x18>
20400d64:	e211                	bnez	a2,20400d68 <memset+0x2a>
20400d66:	8082                	ret
20400d68:	40c306b3          	sub	a3,t1,a2
20400d6c:	068a                	slli	a3,a3,0x2
20400d6e:	00000297          	auipc	t0,0x0
20400d72:	9696                	add	a3,a3,t0
20400d74:	00a68067          	jr	10(a3)
20400d78:	00b70723          	sb	a1,14(a4) # ffffe00e <metal_segment_heap_target_end+0x7fffcb76>
20400d7c:	00b706a3          	sb	a1,13(a4)
20400d80:	00b70623          	sb	a1,12(a4)
20400d84:	00b705a3          	sb	a1,11(a4)
20400d88:	00b70523          	sb	a1,10(a4)
20400d8c:	00b704a3          	sb	a1,9(a4)
20400d90:	00b70423          	sb	a1,8(a4)
20400d94:	00b703a3          	sb	a1,7(a4)
20400d98:	00b70323          	sb	a1,6(a4)
20400d9c:	00b702a3          	sb	a1,5(a4)
20400da0:	00b70223          	sb	a1,4(a4)
20400da4:	00b701a3          	sb	a1,3(a4)
20400da8:	00b70123          	sb	a1,2(a4)
20400dac:	00b700a3          	sb	a1,1(a4)
20400db0:	00b70023          	sb	a1,0(a4)
20400db4:	8082                	ret
20400db6:	0ff5f593          	andi	a1,a1,255
20400dba:	00859693          	slli	a3,a1,0x8
20400dbe:	8dd5                	or	a1,a1,a3
20400dc0:	01059693          	slli	a3,a1,0x10
20400dc4:	8dd5                	or	a1,a1,a3
20400dc6:	b761                	j	20400d4e <memset+0x10>
20400dc8:	00279693          	slli	a3,a5,0x2
20400dcc:	00000297          	auipc	t0,0x0
20400dd0:	9696                	add	a3,a3,t0
20400dd2:	8286                	mv	t0,ra
20400dd4:	fa8680e7          	jalr	-88(a3)
20400dd8:	8096                	mv	ra,t0
20400dda:	17c1                	addi	a5,a5,-16
20400ddc:	8f1d                	sub	a4,a4,a5
20400dde:	963e                	add	a2,a2,a5
20400de0:	f8c374e3          	bgeu	t1,a2,20400d68 <memset+0x2a>
20400de4:	b7a5                	j	20400d4c <memset+0xe>

20400de6 <_free_r>:
_free_r():
20400de6:	c5cd                	beqz	a1,20400e90 <_free_r+0xaa>
20400de8:	ffc5a783          	lw	a5,-4(a1)
20400dec:	1141                	addi	sp,sp,-16
20400dee:	c422                	sw	s0,8(sp)
20400df0:	c606                	sw	ra,12(sp)
20400df2:	c226                	sw	s1,4(sp)
20400df4:	ffc58413          	addi	s0,a1,-4
20400df8:	0007d363          	bgez	a5,20400dfe <_free_r+0x18>
20400dfc:	943e                	add	s0,s0,a5
20400dfe:	84aa                	mv	s1,a0
20400e00:	2e55                	jal	204011b4 <__malloc_lock>
20400e02:	5fc00797          	auipc	a5,0x5fc00
20400e06:	9e678793          	addi	a5,a5,-1562 # 800007e8 <metal_segment_data_target_end>
20400e0a:	439c                	lw	a5,0(a5)
20400e0c:	ef89                	bnez	a5,20400e26 <_free_r+0x40>
20400e0e:	00042223          	sw	zero,4(s0)
20400e12:	5fc00797          	auipc	a5,0x5fc00
20400e16:	9c87ab23          	sw	s0,-1578(a5) # 800007e8 <metal_segment_data_target_end>
20400e1a:	4422                	lw	s0,8(sp)
20400e1c:	40b2                	lw	ra,12(sp)
20400e1e:	8526                	mv	a0,s1
20400e20:	4492                	lw	s1,4(sp)
20400e22:	0141                	addi	sp,sp,16
20400e24:	ae49                	j	204011b6 <__malloc_unlock>
20400e26:	00f47e63          	bgeu	s0,a5,20400e42 <_free_r+0x5c>
20400e2a:	4014                	lw	a3,0(s0)
20400e2c:	00d40733          	add	a4,s0,a3
20400e30:	00e79663          	bne	a5,a4,20400e3c <_free_r+0x56>
20400e34:	4398                	lw	a4,0(a5)
20400e36:	43dc                	lw	a5,4(a5)
20400e38:	9736                	add	a4,a4,a3
20400e3a:	c018                	sw	a4,0(s0)
20400e3c:	c05c                	sw	a5,4(s0)
20400e3e:	bfd1                	j	20400e12 <_free_r+0x2c>
20400e40:	87ba                	mv	a5,a4
20400e42:	43d8                	lw	a4,4(a5)
20400e44:	c319                	beqz	a4,20400e4a <_free_r+0x64>
20400e46:	fee47de3          	bgeu	s0,a4,20400e40 <_free_r+0x5a>
20400e4a:	4394                	lw	a3,0(a5)
20400e4c:	00d78633          	add	a2,a5,a3
20400e50:	00861f63          	bne	a2,s0,20400e6e <_free_r+0x88>
20400e54:	4010                	lw	a2,0(s0)
20400e56:	96b2                	add	a3,a3,a2
20400e58:	c394                	sw	a3,0(a5)
20400e5a:	00d78633          	add	a2,a5,a3
20400e5e:	fac71ee3          	bne	a4,a2,20400e1a <_free_r+0x34>
20400e62:	4310                	lw	a2,0(a4)
20400e64:	4358                	lw	a4,4(a4)
20400e66:	96b2                	add	a3,a3,a2
20400e68:	c394                	sw	a3,0(a5)
20400e6a:	c3d8                	sw	a4,4(a5)
20400e6c:	b77d                	j	20400e1a <_free_r+0x34>
20400e6e:	00c47563          	bgeu	s0,a2,20400e78 <_free_r+0x92>
20400e72:	47b1                	li	a5,12
20400e74:	c09c                	sw	a5,0(s1)
20400e76:	b755                	j	20400e1a <_free_r+0x34>
20400e78:	4010                	lw	a2,0(s0)
20400e7a:	00c406b3          	add	a3,s0,a2
20400e7e:	00d71663          	bne	a4,a3,20400e8a <_free_r+0xa4>
20400e82:	4314                	lw	a3,0(a4)
20400e84:	4358                	lw	a4,4(a4)
20400e86:	96b2                	add	a3,a3,a2
20400e88:	c014                	sw	a3,0(s0)
20400e8a:	c058                	sw	a4,4(s0)
20400e8c:	c3c0                	sw	s0,4(a5)
20400e8e:	b771                	j	20400e1a <_free_r+0x34>
20400e90:	8082                	ret

20400e92 <_malloc_r>:
_malloc_r():
20400e92:	1101                	addi	sp,sp,-32
20400e94:	ca26                	sw	s1,20(sp)
20400e96:	00358493          	addi	s1,a1,3
20400e9a:	98f1                	andi	s1,s1,-4
20400e9c:	ce06                	sw	ra,28(sp)
20400e9e:	cc22                	sw	s0,24(sp)
20400ea0:	c84a                	sw	s2,16(sp)
20400ea2:	c64e                	sw	s3,12(sp)
20400ea4:	04a1                	addi	s1,s1,8
20400ea6:	47b1                	li	a5,12
20400ea8:	04f4f763          	bgeu	s1,a5,20400ef6 <_malloc_r+0x64>
20400eac:	44b1                	li	s1,12
20400eae:	04b4e663          	bltu	s1,a1,20400efa <_malloc_r+0x68>
20400eb2:	892a                	mv	s2,a0
20400eb4:	2601                	jal	204011b4 <__malloc_lock>
20400eb6:	5fc00797          	auipc	a5,0x5fc00
20400eba:	93278793          	addi	a5,a5,-1742 # 800007e8 <metal_segment_data_target_end>
20400ebe:	4398                	lw	a4,0(a5)
20400ec0:	843a                	mv	s0,a4
20400ec2:	e431                	bnez	s0,20400f0e <_malloc_r+0x7c>
20400ec4:	5fc00797          	auipc	a5,0x5fc00
20400ec8:	92878793          	addi	a5,a5,-1752 # 800007ec <__malloc_sbrk_start>
20400ecc:	439c                	lw	a5,0(a5)
20400ece:	eb81                	bnez	a5,20400ede <_malloc_r+0x4c>
20400ed0:	4581                	li	a1,0
20400ed2:	854a                	mv	a0,s2
20400ed4:	2205                	jal	20400ff4 <_sbrk_r>
20400ed6:	5fc00797          	auipc	a5,0x5fc00
20400eda:	90a7ab23          	sw	a0,-1770(a5) # 800007ec <__malloc_sbrk_start>
20400ede:	85a6                	mv	a1,s1
20400ee0:	854a                	mv	a0,s2
20400ee2:	2a09                	jal	20400ff4 <_sbrk_r>
20400ee4:	59fd                	li	s3,-1
20400ee6:	07351963          	bne	a0,s3,20400f58 <_malloc_r+0xc6>
20400eea:	47b1                	li	a5,12
20400eec:	00f92023          	sw	a5,0(s2)
20400ef0:	854a                	mv	a0,s2
20400ef2:	24d1                	jal	204011b6 <__malloc_unlock>
20400ef4:	a029                	j	20400efe <_malloc_r+0x6c>
20400ef6:	fa04dce3          	bgez	s1,20400eae <_malloc_r+0x1c>
20400efa:	47b1                	li	a5,12
20400efc:	c11c                	sw	a5,0(a0)
20400efe:	4501                	li	a0,0
20400f00:	40f2                	lw	ra,28(sp)
20400f02:	4462                	lw	s0,24(sp)
20400f04:	44d2                	lw	s1,20(sp)
20400f06:	4942                	lw	s2,16(sp)
20400f08:	49b2                	lw	s3,12(sp)
20400f0a:	6105                	addi	sp,sp,32
20400f0c:	8082                	ret
20400f0e:	401c                	lw	a5,0(s0)
20400f10:	8f85                	sub	a5,a5,s1
20400f12:	0407c063          	bltz	a5,20400f52 <_malloc_r+0xc0>
20400f16:	46ad                	li	a3,11
20400f18:	00f6f663          	bgeu	a3,a5,20400f24 <_malloc_r+0x92>
20400f1c:	c01c                	sw	a5,0(s0)
20400f1e:	943e                	add	s0,s0,a5
20400f20:	c004                	sw	s1,0(s0)
20400f22:	a801                	j	20400f32 <_malloc_r+0xa0>
20400f24:	405c                	lw	a5,4(s0)
20400f26:	02871463          	bne	a4,s0,20400f4e <_malloc_r+0xbc>
20400f2a:	5fc00717          	auipc	a4,0x5fc00
20400f2e:	8af72f23          	sw	a5,-1858(a4) # 800007e8 <metal_segment_data_target_end>
20400f32:	854a                	mv	a0,s2
20400f34:	2449                	jal	204011b6 <__malloc_unlock>
20400f36:	00b40513          	addi	a0,s0,11
20400f3a:	00440793          	addi	a5,s0,4
20400f3e:	9961                	andi	a0,a0,-8
20400f40:	40f50733          	sub	a4,a0,a5
20400f44:	df55                	beqz	a4,20400f00 <_malloc_r+0x6e>
20400f46:	943a                	add	s0,s0,a4
20400f48:	8f89                	sub	a5,a5,a0
20400f4a:	c01c                	sw	a5,0(s0)
20400f4c:	bf55                	j	20400f00 <_malloc_r+0x6e>
20400f4e:	c35c                	sw	a5,4(a4)
20400f50:	b7cd                	j	20400f32 <_malloc_r+0xa0>
20400f52:	8722                	mv	a4,s0
20400f54:	4040                	lw	s0,4(s0)
20400f56:	b7b5                	j	20400ec2 <_malloc_r+0x30>
20400f58:	00350413          	addi	s0,a0,3
20400f5c:	9871                	andi	s0,s0,-4
20400f5e:	fc8501e3          	beq	a0,s0,20400f20 <_malloc_r+0x8e>
20400f62:	40a405b3          	sub	a1,s0,a0
20400f66:	854a                	mv	a0,s2
20400f68:	2071                	jal	20400ff4 <_sbrk_r>
20400f6a:	fb351be3          	bne	a0,s3,20400f20 <_malloc_r+0x8e>
20400f6e:	bfb5                	j	20400eea <_malloc_r+0x58>

20400f70 <_putc_r>:
_putc_r():
20400f70:	1101                	addi	sp,sp,-32
20400f72:	cc22                	sw	s0,24(sp)
20400f74:	ce06                	sw	ra,28(sp)
20400f76:	842a                	mv	s0,a0
20400f78:	c901                	beqz	a0,20400f88 <_putc_r+0x18>
20400f7a:	4d1c                	lw	a5,24(a0)
20400f7c:	e791                	bnez	a5,20400f88 <_putc_r+0x18>
20400f7e:	c632                	sw	a2,12(sp)
20400f80:	c42e                	sw	a1,8(sp)
20400f82:	3e91                	jal	20400ad6 <__sinit>
20400f84:	4632                	lw	a2,12(sp)
20400f86:	45a2                	lw	a1,8(sp)
20400f88:	00005797          	auipc	a5,0x5
20400f8c:	35c78793          	addi	a5,a5,860 # 204062e4 <__sf_fake_stdin>
20400f90:	02f61663          	bne	a2,a5,20400fbc <_putc_r+0x4c>
20400f94:	4050                	lw	a2,4(s0)
20400f96:	461c                	lw	a5,8(a2)
20400f98:	17fd                	addi	a5,a5,-1
20400f9a:	c61c                	sw	a5,8(a2)
20400f9c:	0407d063          	bgez	a5,20400fdc <_putc_r+0x6c>
20400fa0:	4e18                	lw	a4,24(a2)
20400fa2:	00e7c763          	blt	a5,a4,20400fb0 <_putc_r+0x40>
20400fa6:	0ff5f793          	andi	a5,a1,255
20400faa:	4729                	li	a4,10
20400fac:	02e79863          	bne	a5,a4,20400fdc <_putc_r+0x6c>
20400fb0:	8522                	mv	a0,s0
20400fb2:	4462                	lw	s0,24(sp)
20400fb4:	40f2                	lw	ra,28(sp)
20400fb6:	6105                	addi	sp,sp,32
20400fb8:	eeaff06f          	j	204006a2 <__swbuf_r>
20400fbc:	00005797          	auipc	a5,0x5
20400fc0:	34878793          	addi	a5,a5,840 # 20406304 <__sf_fake_stdout>
20400fc4:	00f61463          	bne	a2,a5,20400fcc <_putc_r+0x5c>
20400fc8:	4410                	lw	a2,8(s0)
20400fca:	b7f1                	j	20400f96 <_putc_r+0x26>
20400fcc:	00005797          	auipc	a5,0x5
20400fd0:	2f878793          	addi	a5,a5,760 # 204062c4 <__sf_fake_stderr>
20400fd4:	fcf611e3          	bne	a2,a5,20400f96 <_putc_r+0x26>
20400fd8:	4450                	lw	a2,12(s0)
20400fda:	bf75                	j	20400f96 <_putc_r+0x26>
20400fdc:	421c                	lw	a5,0(a2)
20400fde:	0ff5f513          	andi	a0,a1,255
20400fe2:	00178713          	addi	a4,a5,1
20400fe6:	c218                	sw	a4,0(a2)
20400fe8:	00b78023          	sb	a1,0(a5)
20400fec:	40f2                	lw	ra,28(sp)
20400fee:	4462                	lw	s0,24(sp)
20400ff0:	6105                	addi	sp,sp,32
20400ff2:	8082                	ret

20400ff4 <_sbrk_r>:
_sbrk_r():
20400ff4:	1141                	addi	sp,sp,-16
20400ff6:	c422                	sw	s0,8(sp)
20400ff8:	842a                	mv	s0,a0
20400ffa:	852e                	mv	a0,a1
20400ffc:	9001a223          	sw	zero,-1788(gp) # 80000894 <errno>
20401000:	c606                	sw	ra,12(sp)
20401002:	161040ef          	jal	ra,20405962 <_sbrk>
20401006:	57fd                	li	a5,-1
20401008:	00f51763          	bne	a0,a5,20401016 <_sbrk_r+0x22>
2040100c:	90418793          	addi	a5,gp,-1788 # 80000894 <errno>
20401010:	439c                	lw	a5,0(a5)
20401012:	c391                	beqz	a5,20401016 <_sbrk_r+0x22>
20401014:	c01c                	sw	a5,0(s0)
20401016:	40b2                	lw	ra,12(sp)
20401018:	4422                	lw	s0,8(sp)
2040101a:	0141                	addi	sp,sp,16
2040101c:	8082                	ret

2040101e <__sread>:
__sread():
2040101e:	1141                	addi	sp,sp,-16
20401020:	c422                	sw	s0,8(sp)
20401022:	842e                	mv	s0,a1
20401024:	00e59583          	lh	a1,14(a1)
20401028:	c606                	sw	ra,12(sp)
2040102a:	2279                	jal	204011b8 <_read_r>
2040102c:	00054963          	bltz	a0,2040103e <__sread+0x20>
20401030:	487c                	lw	a5,84(s0)
20401032:	97aa                	add	a5,a5,a0
20401034:	c87c                	sw	a5,84(s0)
20401036:	40b2                	lw	ra,12(sp)
20401038:	4422                	lw	s0,8(sp)
2040103a:	0141                	addi	sp,sp,16
2040103c:	8082                	ret
2040103e:	00c45783          	lhu	a5,12(s0)
20401042:	777d                	lui	a4,0xfffff
20401044:	177d                	addi	a4,a4,-1
20401046:	8ff9                	and	a5,a5,a4
20401048:	00f41623          	sh	a5,12(s0)
2040104c:	b7ed                	j	20401036 <__sread+0x18>

2040104e <__swrite>:
__swrite():
2040104e:	00c5d783          	lhu	a5,12(a1)
20401052:	1101                	addi	sp,sp,-32
20401054:	cc22                	sw	s0,24(sp)
20401056:	ca26                	sw	s1,20(sp)
20401058:	c84a                	sw	s2,16(sp)
2040105a:	c64e                	sw	s3,12(sp)
2040105c:	ce06                	sw	ra,28(sp)
2040105e:	1007f793          	andi	a5,a5,256
20401062:	84aa                	mv	s1,a0
20401064:	842e                	mv	s0,a1
20401066:	8932                	mv	s2,a2
20401068:	89b6                	mv	s3,a3
2040106a:	c791                	beqz	a5,20401076 <__swrite+0x28>
2040106c:	00e59583          	lh	a1,14(a1)
20401070:	4689                	li	a3,2
20401072:	4601                	li	a2,0
20401074:	2a09                	jal	20401186 <_lseek_r>
20401076:	00c45783          	lhu	a5,12(s0)
2040107a:	777d                	lui	a4,0xfffff
2040107c:	177d                	addi	a4,a4,-1
2040107e:	8ff9                	and	a5,a5,a4
20401080:	00f41623          	sh	a5,12(s0)
20401084:	00e41583          	lh	a1,14(s0)
20401088:	4462                	lw	s0,24(sp)
2040108a:	40f2                	lw	ra,28(sp)
2040108c:	86ce                	mv	a3,s3
2040108e:	864a                	mv	a2,s2
20401090:	49b2                	lw	s3,12(sp)
20401092:	4942                	lw	s2,16(sp)
20401094:	8526                	mv	a0,s1
20401096:	44d2                	lw	s1,20(sp)
20401098:	6105                	addi	sp,sp,32
2040109a:	a83d                	j	204010d8 <_write_r>

2040109c <__sseek>:
__sseek():
2040109c:	1141                	addi	sp,sp,-16
2040109e:	c422                	sw	s0,8(sp)
204010a0:	842e                	mv	s0,a1
204010a2:	00e59583          	lh	a1,14(a1)
204010a6:	c606                	sw	ra,12(sp)
204010a8:	28f9                	jal	20401186 <_lseek_r>
204010aa:	57fd                	li	a5,-1
204010ac:	00c45703          	lhu	a4,12(s0)
204010b0:	00f51b63          	bne	a0,a5,204010c6 <__sseek+0x2a>
204010b4:	77fd                	lui	a5,0xfffff
204010b6:	17fd                	addi	a5,a5,-1
204010b8:	8ff9                	and	a5,a5,a4
204010ba:	00f41623          	sh	a5,12(s0)
204010be:	40b2                	lw	ra,12(sp)
204010c0:	4422                	lw	s0,8(sp)
204010c2:	0141                	addi	sp,sp,16
204010c4:	8082                	ret
204010c6:	6785                	lui	a5,0x1
204010c8:	8fd9                	or	a5,a5,a4
204010ca:	00f41623          	sh	a5,12(s0)
204010ce:	c868                	sw	a0,84(s0)
204010d0:	b7fd                	j	204010be <__sseek+0x22>

204010d2 <__sclose>:
__sclose():
204010d2:	00e59583          	lh	a1,14(a1)
204010d6:	a805                	j	20401106 <_close_r>

204010d8 <_write_r>:
_write_r():
204010d8:	1141                	addi	sp,sp,-16
204010da:	c422                	sw	s0,8(sp)
204010dc:	842a                	mv	s0,a0
204010de:	852e                	mv	a0,a1
204010e0:	85b2                	mv	a1,a2
204010e2:	8636                	mv	a2,a3
204010e4:	9001a223          	sw	zero,-1788(gp) # 80000894 <errno>
204010e8:	c606                	sw	ra,12(sp)
204010ea:	0d3040ef          	jal	ra,204059bc <_write>
204010ee:	57fd                	li	a5,-1
204010f0:	00f51763          	bne	a0,a5,204010fe <_write_r+0x26>
204010f4:	90418793          	addi	a5,gp,-1788 # 80000894 <errno>
204010f8:	439c                	lw	a5,0(a5)
204010fa:	c391                	beqz	a5,204010fe <_write_r+0x26>
204010fc:	c01c                	sw	a5,0(s0)
204010fe:	40b2                	lw	ra,12(sp)
20401100:	4422                	lw	s0,8(sp)
20401102:	0141                	addi	sp,sp,16
20401104:	8082                	ret

20401106 <_close_r>:
_close_r():
20401106:	1141                	addi	sp,sp,-16
20401108:	c422                	sw	s0,8(sp)
2040110a:	842a                	mv	s0,a0
2040110c:	852e                	mv	a0,a1
2040110e:	9001a223          	sw	zero,-1788(gp) # 80000894 <errno>
20401112:	c606                	sw	ra,12(sp)
20401114:	792040ef          	jal	ra,204058a6 <_close>
20401118:	57fd                	li	a5,-1
2040111a:	00f51763          	bne	a0,a5,20401128 <_close_r+0x22>
2040111e:	90418793          	addi	a5,gp,-1788 # 80000894 <errno>
20401122:	439c                	lw	a5,0(a5)
20401124:	c391                	beqz	a5,20401128 <_close_r+0x22>
20401126:	c01c                	sw	a5,0(s0)
20401128:	40b2                	lw	ra,12(sp)
2040112a:	4422                	lw	s0,8(sp)
2040112c:	0141                	addi	sp,sp,16
2040112e:	8082                	ret

20401130 <_fstat_r>:
_fstat_r():
20401130:	1141                	addi	sp,sp,-16
20401132:	c422                	sw	s0,8(sp)
20401134:	842a                	mv	s0,a0
20401136:	852e                	mv	a0,a1
20401138:	85b2                	mv	a1,a2
2040113a:	9001a223          	sw	zero,-1788(gp) # 80000894 <errno>
2040113e:	c606                	sw	ra,12(sp)
20401140:	788040ef          	jal	ra,204058c8 <_fstat>
20401144:	57fd                	li	a5,-1
20401146:	00f51763          	bne	a0,a5,20401154 <_fstat_r+0x24>
2040114a:	90418793          	addi	a5,gp,-1788 # 80000894 <errno>
2040114e:	439c                	lw	a5,0(a5)
20401150:	c391                	beqz	a5,20401154 <_fstat_r+0x24>
20401152:	c01c                	sw	a5,0(s0)
20401154:	40b2                	lw	ra,12(sp)
20401156:	4422                	lw	s0,8(sp)
20401158:	0141                	addi	sp,sp,16
2040115a:	8082                	ret

2040115c <_isatty_r>:
_isatty_r():
2040115c:	1141                	addi	sp,sp,-16
2040115e:	c422                	sw	s0,8(sp)
20401160:	842a                	mv	s0,a0
20401162:	852e                	mv	a0,a1
20401164:	9001a223          	sw	zero,-1788(gp) # 80000894 <errno>
20401168:	c606                	sw	ra,12(sp)
2040116a:	784040ef          	jal	ra,204058ee <_isatty>
2040116e:	57fd                	li	a5,-1
20401170:	00f51763          	bne	a0,a5,2040117e <_isatty_r+0x22>
20401174:	90418793          	addi	a5,gp,-1788 # 80000894 <errno>
20401178:	439c                	lw	a5,0(a5)
2040117a:	c391                	beqz	a5,2040117e <_isatty_r+0x22>
2040117c:	c01c                	sw	a5,0(s0)
2040117e:	40b2                	lw	ra,12(sp)
20401180:	4422                	lw	s0,8(sp)
20401182:	0141                	addi	sp,sp,16
20401184:	8082                	ret

20401186 <_lseek_r>:
_lseek_r():
20401186:	1141                	addi	sp,sp,-16
20401188:	c422                	sw	s0,8(sp)
2040118a:	842a                	mv	s0,a0
2040118c:	852e                	mv	a0,a1
2040118e:	85b2                	mv	a1,a2
20401190:	8636                	mv	a2,a3
20401192:	9001a223          	sw	zero,-1788(gp) # 80000894 <errno>
20401196:	c606                	sw	ra,12(sp)
20401198:	776040ef          	jal	ra,2040590e <_lseek>
2040119c:	57fd                	li	a5,-1
2040119e:	00f51763          	bne	a0,a5,204011ac <_lseek_r+0x26>
204011a2:	90418793          	addi	a5,gp,-1788 # 80000894 <errno>
204011a6:	439c                	lw	a5,0(a5)
204011a8:	c391                	beqz	a5,204011ac <_lseek_r+0x26>
204011aa:	c01c                	sw	a5,0(s0)
204011ac:	40b2                	lw	ra,12(sp)
204011ae:	4422                	lw	s0,8(sp)
204011b0:	0141                	addi	sp,sp,16
204011b2:	8082                	ret

204011b4 <__malloc_lock>:
__malloc_lock():
204011b4:	8082                	ret

204011b6 <__malloc_unlock>:
__malloc_unlock():
204011b6:	8082                	ret

204011b8 <_read_r>:
_read_r():
204011b8:	1141                	addi	sp,sp,-16
204011ba:	c422                	sw	s0,8(sp)
204011bc:	842a                	mv	s0,a0
204011be:	852e                	mv	a0,a1
204011c0:	85b2                	mv	a1,a2
204011c2:	8636                	mv	a2,a3
204011c4:	9001a223          	sw	zero,-1788(gp) # 80000894 <errno>
204011c8:	c606                	sw	ra,12(sp)
204011ca:	76e040ef          	jal	ra,20405938 <_read>
204011ce:	57fd                	li	a5,-1
204011d0:	00f51763          	bne	a0,a5,204011de <_read_r+0x26>
204011d4:	90418793          	addi	a5,gp,-1788 # 80000894 <errno>
204011d8:	439c                	lw	a5,0(a5)
204011da:	c391                	beqz	a5,204011de <_read_r+0x26>
204011dc:	c01c                	sw	a5,0(s0)
204011de:	40b2                	lw	ra,12(sp)
204011e0:	4422                	lw	s0,8(sp)
204011e2:	0141                	addi	sp,sp,16
204011e4:	8082                	ret

204011e6 <metal_cpu_get_mtime>:
metal_cpu_get_mtime():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/metal/cpu.h:94
 *
 * @param cpu The CPU device handle
 * @return The value of mtime, or 0 if failure
 */
__inline__ unsigned long long metal_cpu_get_mtime(struct metal_cpu *cpu)
{ return cpu->vtable->mtime_get(cpu); }
204011e6:	1101                	addi	sp,sp,-32
204011e8:	ce06                	sw	ra,28(sp)
204011ea:	cc22                	sw	s0,24(sp)
204011ec:	1000                	addi	s0,sp,32
204011ee:	fea42623          	sw	a0,-20(s0)
204011f2:	fec42783          	lw	a5,-20(s0)
204011f6:	439c                	lw	a5,0(a5)
204011f8:	479c                	lw	a5,8(a5)
204011fa:	fec42503          	lw	a0,-20(s0)
204011fe:	9782                	jalr	a5
20401200:	87aa                	mv	a5,a0
20401202:	882e                	mv	a6,a1
20401204:	853e                	mv	a0,a5
20401206:	85c2                	mv	a1,a6
20401208:	40f2                	lw	ra,28(sp)
2040120a:	4462                	lw	s0,24(sp)
2040120c:	6105                	addi	sp,sp,32
2040120e:	8082                	ret

20401210 <metal_cpu_set_mtimecmp>:
metal_cpu_set_mtimecmp():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/metal/cpu.h:107
 * @param cpu The CPU device handle
 * @param time The value to set the compare register to
 * @return The value of mtimecmp or -1 if error
 */
__inline__ int metal_cpu_set_mtimecmp(struct metal_cpu *cpu, unsigned long long time)
{ return cpu->vtable->mtimecmp_set(cpu, time); }
20401210:	1101                	addi	sp,sp,-32
20401212:	ce06                	sw	ra,28(sp)
20401214:	cc22                	sw	s0,24(sp)
20401216:	1000                	addi	s0,sp,32
20401218:	fea42623          	sw	a0,-20(s0)
2040121c:	feb42023          	sw	a1,-32(s0)
20401220:	fec42223          	sw	a2,-28(s0)
20401224:	fec42783          	lw	a5,-20(s0)
20401228:	439c                	lw	a5,0(a5)
2040122a:	47dc                	lw	a5,12(a5)
2040122c:	fe042583          	lw	a1,-32(s0)
20401230:	fe442603          	lw	a2,-28(s0)
20401234:	fec42503          	lw	a0,-20(s0)
20401238:	9782                	jalr	a5
2040123a:	87aa                	mv	a5,a0
2040123c:	853e                	mv	a0,a5
2040123e:	40f2                	lw	ra,28(sp)
20401240:	4462                	lw	s0,24(sp)
20401242:	6105                	addi	sp,sp,32
20401244:	8082                	ret

20401246 <metal_cpu_timer_interrupt_controller>:
metal_cpu_timer_interrupt_controller():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/metal/cpu.h:119
 *
 * @param cpu The CPU device handle
 * @return A pointer to the timer interrupt handle
 */
__inline__ struct metal_interrupt* metal_cpu_timer_interrupt_controller(struct metal_cpu *cpu)
{ return cpu->vtable->tmr_controller_interrupt(cpu); }
20401246:	1101                	addi	sp,sp,-32
20401248:	ce06                	sw	ra,28(sp)
2040124a:	cc22                	sw	s0,24(sp)
2040124c:	1000                	addi	s0,sp,32
2040124e:	fea42623          	sw	a0,-20(s0)
20401252:	fec42783          	lw	a5,-20(s0)
20401256:	439c                	lw	a5,0(a5)
20401258:	4b9c                	lw	a5,16(a5)
2040125a:	fec42503          	lw	a0,-20(s0)
2040125e:	9782                	jalr	a5
20401260:	87aa                	mv	a5,a0
20401262:	853e                	mv	a0,a5
20401264:	40f2                	lw	ra,28(sp)
20401266:	4462                	lw	s0,24(sp)
20401268:	6105                	addi	sp,sp,32
2040126a:	8082                	ret

2040126c <metal_cpu_timer_get_interrupt_id>:
metal_cpu_timer_get_interrupt_id():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/metal/cpu.h:129
 *
 * @param cpu The CPU device handle
 * @return The timer interrupt ID
 */
__inline__ int metal_cpu_timer_get_interrupt_id(struct metal_cpu *cpu)
{ return cpu->vtable->get_tmr_interrupt_id(cpu); }
2040126c:	1101                	addi	sp,sp,-32
2040126e:	ce06                	sw	ra,28(sp)
20401270:	cc22                	sw	s0,24(sp)
20401272:	1000                	addi	s0,sp,32
20401274:	fea42623          	sw	a0,-20(s0)
20401278:	fec42783          	lw	a5,-20(s0)
2040127c:	439c                	lw	a5,0(a5)
2040127e:	4bdc                	lw	a5,20(a5)
20401280:	fec42503          	lw	a0,-20(s0)
20401284:	9782                	jalr	a5
20401286:	87aa                	mv	a5,a0
20401288:	853e                	mv	a0,a5
2040128a:	40f2                	lw	ra,28(sp)
2040128c:	4462                	lw	s0,24(sp)
2040128e:	6105                	addi	sp,sp,32
20401290:	8082                	ret

20401292 <metal_cpu_interrupt_controller>:
metal_cpu_interrupt_controller():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/metal/cpu.h:208
 *
 * @param cpu The CPU device handle
 * @return The handle for the CPU interrupt controller
 */
__inline__ struct metal_interrupt* metal_cpu_interrupt_controller(struct metal_cpu *cpu)
{ return cpu->vtable->controller_interrupt(cpu); }
20401292:	1101                	addi	sp,sp,-32
20401294:	ce06                	sw	ra,28(sp)
20401296:	cc22                	sw	s0,24(sp)
20401298:	1000                	addi	s0,sp,32
2040129a:	fea42623          	sw	a0,-20(s0)
2040129e:	fec42783          	lw	a5,-20(s0)
204012a2:	439c                	lw	a5,0(a5)
204012a4:	57dc                	lw	a5,44(a5)
204012a6:	fec42503          	lw	a0,-20(s0)
204012aa:	9782                	jalr	a5
204012ac:	87aa                	mv	a5,a0
204012ae:	853e                	mv	a0,a5
204012b0:	40f2                	lw	ra,28(sp)
204012b2:	4462                	lw	s0,24(sp)
204012b4:	6105                	addi	sp,sp,32
204012b6:	8082                	ret

204012b8 <metal_cpu_get>:
metal_cpu_get():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/cpu.c:8

#include <metal/cpu.h>
#include <metal/machine.h>

struct metal_cpu* metal_cpu_get(unsigned int hartid)
{
204012b8:	1101                	addi	sp,sp,-32
204012ba:	ce22                	sw	s0,28(sp)
204012bc:	1000                	addi	s0,sp,32
204012be:	fea42623          	sw	a0,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/cpu.c:9
    if (hartid < __METAL_DT_MAX_HARTS) {
204012c2:	fec42783          	lw	a5,-20(s0)
204012c6:	eb99                	bnez	a5,204012dc <metal_cpu_get+0x24>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/cpu.c:10
        return (struct metal_cpu *)__metal_cpu_table[hartid];
204012c8:	800007b7          	lui	a5,0x80000
204012cc:	fec42703          	lw	a4,-20(s0)
204012d0:	070a                	slli	a4,a4,0x2
204012d2:	79878793          	addi	a5,a5,1944 # 80000798 <metal_segment_heap_target_end+0xfffff300>
204012d6:	97ba                	add	a5,a5,a4
204012d8:	439c                	lw	a5,0(a5)
204012da:	a011                	j	204012de <metal_cpu_get+0x26>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/cpu.c:12
    }   
    return NULL;
204012dc:	4781                	li	a5,0
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/cpu.c:13
}
204012de:	853e                	mv	a0,a5
204012e0:	4472                	lw	s0,28(sp)
204012e2:	6105                	addi	sp,sp,32
204012e4:	8082                	ret

204012e6 <metal_cpu_get_current_hartid>:
metal_cpu_get_current_hartid():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/cpu.c:16

int metal_cpu_get_current_hartid()
{
204012e6:	1101                	addi	sp,sp,-32
204012e8:	ce22                	sw	s0,28(sp)
204012ea:	1000                	addi	s0,sp,32
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/cpu.c:19
#ifdef __riscv
    int mhartid;
    __asm__ volatile("csrr %0, mhartid" : "=r" (mhartid));
204012ec:	f14027f3          	csrr	a5,mhartid
204012f0:	fef42623          	sw	a5,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/cpu.c:20
    return mhartid;
204012f4:	fec42783          	lw	a5,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/cpu.c:22
#endif
}
204012f8:	853e                	mv	a0,a5
204012fa:	4472                	lw	s0,28(sp)
204012fc:	6105                	addi	sp,sp,32
204012fe:	8082                	ret

20401300 <metal_interrupt_init>:
metal_interrupt_init():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/metal/interrupt.h:92
 * is invalid to initialize an interrupt controller more than once.
 *
 * @param controller The handle for the interrupt controller
 */
__inline__ void metal_interrupt_init(struct metal_interrupt *controller)
{
20401300:	1101                	addi	sp,sp,-32
20401302:	ce06                	sw	ra,28(sp)
20401304:	cc22                	sw	s0,24(sp)
20401306:	1000                	addi	s0,sp,32
20401308:	fea42623          	sw	a0,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/metal/interrupt.h:93
    controller->vtable->interrupt_init(controller);
2040130c:	fec42783          	lw	a5,-20(s0)
20401310:	439c                	lw	a5,0(a5)
20401312:	439c                	lw	a5,0(a5)
20401314:	fec42503          	lw	a0,-20(s0)
20401318:	9782                	jalr	a5
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/metal/interrupt.h:94
}
2040131a:	0001                	nop
2040131c:	40f2                	lw	ra,28(sp)
2040131e:	4462                	lw	s0,24(sp)
20401320:	6105                	addi	sp,sp,32
20401322:	8082                	ret

20401324 <metal_interrupt_register_handler>:
metal_interrupt_register_handler():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/metal/interrupt.h:205
 */
__inline__ int metal_interrupt_register_handler(struct metal_interrupt *controller,
                                          int id,
                                          metal_interrupt_handler_t handler,
                                          void *priv_data)
{
20401324:	1101                	addi	sp,sp,-32
20401326:	ce06                	sw	ra,28(sp)
20401328:	cc22                	sw	s0,24(sp)
2040132a:	1000                	addi	s0,sp,32
2040132c:	fea42623          	sw	a0,-20(s0)
20401330:	feb42423          	sw	a1,-24(s0)
20401334:	fec42223          	sw	a2,-28(s0)
20401338:	fed42023          	sw	a3,-32(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/metal/interrupt.h:206
    return controller->vtable->interrupt_register(controller, id, handler, priv_data);
2040133c:	fec42783          	lw	a5,-20(s0)
20401340:	439c                	lw	a5,0(a5)
20401342:	4fdc                	lw	a5,28(a5)
20401344:	fe042683          	lw	a3,-32(s0)
20401348:	fe442603          	lw	a2,-28(s0)
2040134c:	fe842583          	lw	a1,-24(s0)
20401350:	fec42503          	lw	a0,-20(s0)
20401354:	9782                	jalr	a5
20401356:	87aa                	mv	a5,a0
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/metal/interrupt.h:207
}
20401358:	853e                	mv	a0,a5
2040135a:	40f2                	lw	ra,28(sp)
2040135c:	4462                	lw	s0,24(sp)
2040135e:	6105                	addi	sp,sp,32
20401360:	8082                	ret

20401362 <metal_interrupt_enable>:
metal_interrupt_enable():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/metal/interrupt.h:232
 * @param controller The handle for the interrupt controller
 * @param id The interrupt ID to enable
 * @return 0 upon success
 */
__inline__ int metal_interrupt_enable(struct metal_interrupt *controller, int id)
{
20401362:	1101                	addi	sp,sp,-32
20401364:	ce06                	sw	ra,28(sp)
20401366:	cc22                	sw	s0,24(sp)
20401368:	1000                	addi	s0,sp,32
2040136a:	fea42623          	sw	a0,-20(s0)
2040136e:	feb42423          	sw	a1,-24(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/metal/interrupt.h:233
    return controller->vtable->interrupt_enable(controller, id);
20401372:	fec42783          	lw	a5,-20(s0)
20401376:	439c                	lw	a5,0(a5)
20401378:	53dc                	lw	a5,36(a5)
2040137a:	fe842583          	lw	a1,-24(s0)
2040137e:	fec42503          	lw	a0,-20(s0)
20401382:	9782                	jalr	a5
20401384:	87aa                	mv	a5,a0
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/metal/interrupt.h:234
}
20401386:	853e                	mv	a0,a5
20401388:	40f2                	lw	ra,28(sp)
2040138a:	4462                	lw	s0,24(sp)
2040138c:	6105                	addi	sp,sp,32
2040138e:	8082                	ret

20401390 <metal_interrupt_disable>:
metal_interrupt_disable():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/metal/interrupt.h:243
 * @param controller The handle for the interrupt controller
 * @param id The interrupt ID to disable
 * @return 0 upon success
 */
__inline__ int metal_interrupt_disable(struct metal_interrupt *controller, int id)
{
20401390:	1101                	addi	sp,sp,-32
20401392:	ce06                	sw	ra,28(sp)
20401394:	cc22                	sw	s0,24(sp)
20401396:	1000                	addi	s0,sp,32
20401398:	fea42623          	sw	a0,-20(s0)
2040139c:	feb42423          	sw	a1,-24(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/metal/interrupt.h:244
    return controller->vtable->interrupt_disable(controller, id);
204013a0:	fec42783          	lw	a5,-20(s0)
204013a4:	439c                	lw	a5,0(a5)
204013a6:	579c                	lw	a5,40(a5)
204013a8:	fe842583          	lw	a1,-24(s0)
204013ac:	fec42503          	lw	a0,-20(s0)
204013b0:	9782                	jalr	a5
204013b2:	87aa                	mv	a5,a0
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/metal/interrupt.h:245
}
204013b4:	853e                	mv	a0,a5
204013b6:	40f2                	lw	ra,28(sp)
204013b8:	4462                	lw	s0,24(sp)
204013ba:	6105                	addi	sp,sp,32
204013bc:	8082                	ret

204013be <metal_led_enable>:
metal_led_enable():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/metal/led.h:48

/*!
 * @brief Enable an LED
 * @param led The handle for the LED
 */
__inline__ void metal_led_enable(struct metal_led *led) { led->vtable->led_enable(led); }
204013be:	1101                	addi	sp,sp,-32
204013c0:	ce06                	sw	ra,28(sp)
204013c2:	cc22                	sw	s0,24(sp)
204013c4:	1000                	addi	s0,sp,32
204013c6:	fea42623          	sw	a0,-20(s0)
204013ca:	fec42783          	lw	a5,-20(s0)
204013ce:	439c                	lw	a5,0(a5)
204013d0:	43dc                	lw	a5,4(a5)
204013d2:	fec42503          	lw	a0,-20(s0)
204013d6:	9782                	jalr	a5
204013d8:	0001                	nop
204013da:	40f2                	lw	ra,28(sp)
204013dc:	4462                	lw	s0,24(sp)
204013de:	6105                	addi	sp,sp,32
204013e0:	8082                	ret

204013e2 <metal_led_on>:
metal_led_on():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/metal/led.h:54

/*!
 * @brief Turn an LED on
 * @param led The handle for the LED
 */
__inline__ void metal_led_on(struct metal_led *led) { led->vtable->led_on(led); }
204013e2:	1101                	addi	sp,sp,-32
204013e4:	ce06                	sw	ra,28(sp)
204013e6:	cc22                	sw	s0,24(sp)
204013e8:	1000                	addi	s0,sp,32
204013ea:	fea42623          	sw	a0,-20(s0)
204013ee:	fec42783          	lw	a5,-20(s0)
204013f2:	439c                	lw	a5,0(a5)
204013f4:	479c                	lw	a5,8(a5)
204013f6:	fec42503          	lw	a0,-20(s0)
204013fa:	9782                	jalr	a5
204013fc:	0001                	nop
204013fe:	40f2                	lw	ra,28(sp)
20401400:	4462                	lw	s0,24(sp)
20401402:	6105                	addi	sp,sp,32
20401404:	8082                	ret

20401406 <metal_led_off>:
metal_led_off():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/metal/led.h:60

/*!
 * @brief Turn an LED off
 * @param led The handle for the LED
 */
__inline__ void metal_led_off(struct metal_led *led) { led->vtable->led_off(led); }
20401406:	1101                	addi	sp,sp,-32
20401408:	ce06                	sw	ra,28(sp)
2040140a:	cc22                	sw	s0,24(sp)
2040140c:	1000                	addi	s0,sp,32
2040140e:	fea42623          	sw	a0,-20(s0)
20401412:	fec42783          	lw	a5,-20(s0)
20401416:	439c                	lw	a5,0(a5)
20401418:	47dc                	lw	a5,12(a5)
2040141a:	fec42503          	lw	a0,-20(s0)
2040141e:	9782                	jalr	a5
20401420:	0001                	nop
20401422:	40f2                	lw	ra,28(sp)
20401424:	4462                	lw	s0,24(sp)
20401426:	6105                	addi	sp,sp,32
20401428:	8082                	ret

2040142a <metal_led_get_rgb>:
metal_led_get_rgb():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/led.c:9
#include <string.h>
#include <metal/led.h>
#include <metal/machine.h>

struct metal_led* metal_led_get_rgb (char *label, char *color)
{
2040142a:	7175                	addi	sp,sp,-144
2040142c:	c706                	sw	ra,140(sp)
2040142e:	c522                	sw	s0,136(sp)
20401430:	0900                	addi	s0,sp,144
20401432:	f6a42e23          	sw	a0,-132(s0)
20401436:	f6b42c23          	sw	a1,-136(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/led.c:14
    int i;
    struct metal_led *led;
    char led_label[100];

    if ((__METAL_DT_MAX_LEDS == 0) ||
2040143a:	f7c42783          	lw	a5,-132(s0)
2040143e:	c781                	beqz	a5,20401446 <metal_led_get_rgb+0x1c>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/led.c:15
	(label == NULL) || (color == NULL)) {
20401440:	f7842783          	lw	a5,-136(s0)
20401444:	e399                	bnez	a5,2040144a <metal_led_get_rgb+0x20>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/led.c:16
        return NULL;
20401446:	4781                	li	a5,0
20401448:	a0bd                	j	204014b6 <metal_led_get_rgb+0x8c>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/led.c:19
    }

    strcpy(led_label, label);
2040144a:	f8440793          	addi	a5,s0,-124
2040144e:	f7c42583          	lw	a1,-132(s0)
20401452:	853e                	mv	a0,a5
20401454:	7f6040ef          	jal	ra,20405c4a <strcpy>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/led.c:20
    strcat(led_label, color);
20401458:	f8440793          	addi	a5,s0,-124
2040145c:	f7842583          	lw	a1,-136(s0)
20401460:	853e                	mv	a0,a5
20401462:	6aa040ef          	jal	ra,20405b0c <strcat>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/led.c:21
    for (i = 0; i < __METAL_DT_MAX_LEDS; i++) {
20401466:	fe042623          	sw	zero,-20(s0)
2040146a:	a081                	j	204014aa <metal_led_get_rgb+0x80>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/led.c:22
        led = (struct metal_led*)__metal_led_table[i];
2040146c:	800007b7          	lui	a5,0x80000
20401470:	06078713          	addi	a4,a5,96 # 80000060 <metal_segment_heap_target_end+0xffffebc8>
20401474:	fec42783          	lw	a5,-20(s0)
20401478:	078a                	slli	a5,a5,0x2
2040147a:	97ba                	add	a5,a5,a4
2040147c:	439c                	lw	a5,0(a5)
2040147e:	fef42423          	sw	a5,-24(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/led.c:23
        if (led->vtable->led_exist(led, led_label)) {
20401482:	fe842783          	lw	a5,-24(s0)
20401486:	439c                	lw	a5,0(a5)
20401488:	4398                	lw	a4,0(a5)
2040148a:	f8440793          	addi	a5,s0,-124
2040148e:	85be                	mv	a1,a5
20401490:	fe842503          	lw	a0,-24(s0)
20401494:	9702                	jalr	a4
20401496:	87aa                	mv	a5,a0
20401498:	c781                	beqz	a5,204014a0 <metal_led_get_rgb+0x76>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/led.c:24
	    return led;
2040149a:	fe842783          	lw	a5,-24(s0)
2040149e:	a821                	j	204014b6 <metal_led_get_rgb+0x8c>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/led.c:21 (discriminator 2)
    for (i = 0; i < __METAL_DT_MAX_LEDS; i++) {
204014a0:	fec42783          	lw	a5,-20(s0)
204014a4:	0785                	addi	a5,a5,1
204014a6:	fef42623          	sw	a5,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/led.c:21 (discriminator 1)
204014aa:	fec42703          	lw	a4,-20(s0)
204014ae:	4789                	li	a5,2
204014b0:	fae7dee3          	bge	a5,a4,2040146c <metal_led_get_rgb+0x42>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/led.c:27
	}
    }
    return NULL;
204014b4:	4781                	li	a5,0
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/led.c:28 (discriminator 1)
}
204014b6:	853e                	mv	a0,a5
204014b8:	40ba                	lw	ra,140(sp)
204014ba:	442a                	lw	s0,136(sp)
204014bc:	6149                	addi	sp,sp,144
204014be:	8082                	ret

204014c0 <__metal_driver_sifive_clint0_control_base>:
__metal_driver_sifive_clint0_control_base():
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:188
/* --------------------- fixed_factor_clock ------------ */


/* --------------------- sifive_clint0 ------------ */
static __inline__ unsigned long __metal_driver_sifive_clint0_control_base(struct metal_interrupt *controller)
{
204014c0:	1101                	addi	sp,sp,-32
204014c2:	ce22                	sw	s0,28(sp)
204014c4:	1000                	addi	s0,sp,32
204014c6:	fea42623          	sw	a0,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:189
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_clint_2000000) {
204014ca:	fec42703          	lw	a4,-20(s0)
204014ce:	800007b7          	lui	a5,0x80000
204014d2:	79c78793          	addi	a5,a5,1948 # 8000079c <metal_segment_heap_target_end+0xfffff304>
204014d6:	00f71563          	bne	a4,a5,204014e0 <__metal_driver_sifive_clint0_control_base+0x20>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:190
		return METAL_RISCV_CLINT0_2000000_BASE_ADDRESS;
204014da:	020007b7          	lui	a5,0x2000
204014de:	a011                	j	204014e2 <__metal_driver_sifive_clint0_control_base+0x22>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:193
	}
	else {
		return 0;
204014e0:	4781                	li	a5,0
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:195
	}
}
204014e2:	853e                	mv	a0,a5
204014e4:	4472                	lw	s0,28(sp)
204014e6:	6105                	addi	sp,sp,32
204014e8:	8082                	ret

204014ea <__metal_driver_sifive_clint0_num_interrupts>:
__metal_driver_sifive_clint0_num_interrupts():
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:208
		return 0;
	}
}

static __inline__ int __metal_driver_sifive_clint0_num_interrupts(struct metal_interrupt *controller)
{
204014ea:	1101                	addi	sp,sp,-32
204014ec:	ce22                	sw	s0,28(sp)
204014ee:	1000                	addi	s0,sp,32
204014f0:	fea42623          	sw	a0,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:209
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_clint_2000000) {
204014f4:	fec42703          	lw	a4,-20(s0)
204014f8:	800007b7          	lui	a5,0x80000
204014fc:	79c78793          	addi	a5,a5,1948 # 8000079c <metal_segment_heap_target_end+0xfffff304>
20401500:	00f71463          	bne	a4,a5,20401508 <__metal_driver_sifive_clint0_num_interrupts+0x1e>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:210
		return METAL_MAX_CLINT_INTERRUPTS;
20401504:	4789                	li	a5,2
20401506:	a011                	j	2040150a <__metal_driver_sifive_clint0_num_interrupts+0x20>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:213
	}
	else {
		return 0;
20401508:	4781                	li	a5,0
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:215
	}
}
2040150a:	853e                	mv	a0,a5
2040150c:	4472                	lw	s0,28(sp)
2040150e:	6105                	addi	sp,sp,32
20401510:	8082                	ret

20401512 <__metal_driver_sifive_clint0_interrupt_parents>:
__metal_driver_sifive_clint0_interrupt_parents():
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:218

static __inline__ struct metal_interrupt * __metal_driver_sifive_clint0_interrupt_parents(struct metal_interrupt *controller, int idx)
{
20401512:	1101                	addi	sp,sp,-32
20401514:	ce22                	sw	s0,28(sp)
20401516:	1000                	addi	s0,sp,32
20401518:	fea42623          	sw	a0,-20(s0)
2040151c:	feb42423          	sw	a1,-24(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:219
	if (idx == 0) {
20401520:	fe842783          	lw	a5,-24(s0)
20401524:	e791                	bnez	a5,20401530 <__metal_driver_sifive_clint0_interrupt_parents+0x1e>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:220
		return (struct metal_interrupt *)&__metal_dt_cpu_0_interrupt_controller.controller;
20401526:	800007b7          	lui	a5,0x80000
2040152a:	09078793          	addi	a5,a5,144 # 80000090 <metal_segment_heap_target_end+0xffffebf8>
2040152e:	a821                	j	20401546 <__metal_driver_sifive_clint0_interrupt_parents+0x34>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:222
	}
	else if (idx == 1) {
20401530:	fe842703          	lw	a4,-24(s0)
20401534:	4785                	li	a5,1
20401536:	00f71763          	bne	a4,a5,20401544 <__metal_driver_sifive_clint0_interrupt_parents+0x32>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:223
		return (struct metal_interrupt *)&__metal_dt_cpu_0_interrupt_controller.controller;
2040153a:	800007b7          	lui	a5,0x80000
2040153e:	09078793          	addi	a5,a5,144 # 80000090 <metal_segment_heap_target_end+0xffffebf8>
20401542:	a011                	j	20401546 <__metal_driver_sifive_clint0_interrupt_parents+0x34>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:226
	}
	else {
		return NULL;
20401544:	4781                	li	a5,0
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:228
	}
}
20401546:	853e                	mv	a0,a5
20401548:	4472                	lw	s0,28(sp)
2040154a:	6105                	addi	sp,sp,32
2040154c:	8082                	ret

2040154e <__metal_driver_sifive_clint0_interrupt_lines>:
__metal_driver_sifive_clint0_interrupt_lines():
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:231

static __inline__ int __metal_driver_sifive_clint0_interrupt_lines(struct metal_interrupt *controller, int idx)
{
2040154e:	1101                	addi	sp,sp,-32
20401550:	ce22                	sw	s0,28(sp)
20401552:	1000                	addi	s0,sp,32
20401554:	fea42623          	sw	a0,-20(s0)
20401558:	feb42423          	sw	a1,-24(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:232
	if (idx == 0) {
2040155c:	fe842783          	lw	a5,-24(s0)
20401560:	e399                	bnez	a5,20401566 <__metal_driver_sifive_clint0_interrupt_lines+0x18>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:233
		return 3;
20401562:	478d                	li	a5,3
20401564:	a809                	j	20401576 <__metal_driver_sifive_clint0_interrupt_lines+0x28>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:235
	}
	else if (idx == 1) {
20401566:	fe842703          	lw	a4,-24(s0)
2040156a:	4785                	li	a5,1
2040156c:	00f71463          	bne	a4,a5,20401574 <__metal_driver_sifive_clint0_interrupt_lines+0x26>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:236
		return 7;
20401570:	479d                	li	a5,7
20401572:	a011                	j	20401576 <__metal_driver_sifive_clint0_interrupt_lines+0x28>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:239
	}
	else {
		return 0;
20401574:	4781                	li	a5,0
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:241
	}
}
20401576:	853e                	mv	a0,a5
20401578:	4472                	lw	s0,28(sp)
2040157a:	6105                	addi	sp,sp,32
2040157c:	8082                	ret

2040157e <__metal_clint0_mtime_get>:
__metal_clint0_mtime_get():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:14
#include <metal/cpu.h>
#include <metal/drivers/riscv_clint0.h>
#include <metal/machine.h>

unsigned long long __metal_clint0_mtime_get (struct __metal_driver_riscv_clint0 *clint)
{
2040157e:	715d                	addi	sp,sp,-80
20401580:	c686                	sw	ra,76(sp)
20401582:	c4a2                	sw	s0,72(sp)
20401584:	c2ca                	sw	s2,68(sp)
20401586:	c0ce                	sw	s3,64(sp)
20401588:	de52                	sw	s4,60(sp)
2040158a:	dc56                	sw	s5,56(sp)
2040158c:	da5a                	sw	s6,52(sp)
2040158e:	d85e                	sw	s7,48(sp)
20401590:	d662                	sw	s8,44(sp)
20401592:	d466                	sw	s9,40(sp)
20401594:	0880                	addi	s0,sp,80
20401596:	faa42e23          	sw	a0,-68(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:16
    __metal_io_u32 lo, hi;
    unsigned long control_base = __metal_driver_sifive_clint0_control_base(&clint->controller);
2040159a:	fbc42783          	lw	a5,-68(s0)
2040159e:	853e                	mv	a0,a5
204015a0:	3705                	jal	204014c0 <__metal_driver_sifive_clint0_control_base>
204015a2:	fca42623          	sw	a0,-52(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:20 (discriminator 1)

    /* Guard against rollover when reading */
    do {
	hi = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + METAL_RISCV_CLINT0_MTIME + 4));
204015a6:	fcc42703          	lw	a4,-52(s0)
204015aa:	67b1                	lui	a5,0xc
204015ac:	17f1                	addi	a5,a5,-4
204015ae:	97ba                	add	a5,a5,a4
204015b0:	439c                	lw	a5,0(a5)
204015b2:	fcf42423          	sw	a5,-56(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:21 (discriminator 1)
	lo = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + METAL_RISCV_CLINT0_MTIME));
204015b6:	fcc42703          	lw	a4,-52(s0)
204015ba:	67b1                	lui	a5,0xc
204015bc:	17e1                	addi	a5,a5,-8
204015be:	97ba                	add	a5,a5,a4
204015c0:	439c                	lw	a5,0(a5)
204015c2:	fcf42223          	sw	a5,-60(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:22 (discriminator 1)
    } while (__METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + METAL_RISCV_CLINT0_MTIME + 4)) != hi);
204015c6:	fcc42703          	lw	a4,-52(s0)
204015ca:	67b1                	lui	a5,0xc
204015cc:	17f1                	addi	a5,a5,-4
204015ce:	97ba                	add	a5,a5,a4
204015d0:	439c                	lw	a5,0(a5)
204015d2:	fc842703          	lw	a4,-56(s0)
204015d6:	fcf718e3          	bne	a4,a5,204015a6 <__metal_clint0_mtime_get+0x28>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:24

    return (((unsigned long long)hi) << 32) | lo;
204015da:	fc842783          	lw	a5,-56(s0)
204015de:	8c3e                	mv	s8,a5
204015e0:	4c81                	li	s9,0
204015e2:	000c1993          	slli	s3,s8,0x0
204015e6:	4901                	li	s2,0
204015e8:	fc442783          	lw	a5,-60(s0)
204015ec:	8a3e                	mv	s4,a5
204015ee:	4a81                	li	s5,0
204015f0:	01496b33          	or	s6,s2,s4
204015f4:	0159ebb3          	or	s7,s3,s5
204015f8:	87da                	mv	a5,s6
204015fa:	885e                	mv	a6,s7
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:25
}
204015fc:	853e                	mv	a0,a5
204015fe:	85c2                	mv	a1,a6
20401600:	40b6                	lw	ra,76(sp)
20401602:	4426                	lw	s0,72(sp)
20401604:	4916                	lw	s2,68(sp)
20401606:	4986                	lw	s3,64(sp)
20401608:	5a72                	lw	s4,60(sp)
2040160a:	5ae2                	lw	s5,56(sp)
2040160c:	5b52                	lw	s6,52(sp)
2040160e:	5bc2                	lw	s7,48(sp)
20401610:	5c32                	lw	s8,44(sp)
20401612:	5ca2                	lw	s9,40(sp)
20401614:	6161                	addi	sp,sp,80
20401616:	8082                	ret

20401618 <__metal_driver_riscv_clint0_mtimecmp_set>:
__metal_driver_riscv_clint0_mtimecmp_set():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:30

int __metal_driver_riscv_clint0_mtimecmp_set(struct metal_interrupt *controller,
                                             int hartid,
                                             unsigned long long time)
{   
20401618:	7179                	addi	sp,sp,-48
2040161a:	d606                	sw	ra,44(sp)
2040161c:	d422                	sw	s0,40(sp)
2040161e:	d24a                	sw	s2,36(sp)
20401620:	d04e                	sw	s3,32(sp)
20401622:	1800                	addi	s0,sp,48
20401624:	fca42e23          	sw	a0,-36(s0)
20401628:	fcb42c23          	sw	a1,-40(s0)
2040162c:	fcc42823          	sw	a2,-48(s0)
20401630:	fcd42a23          	sw	a3,-44(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:31
    struct __metal_driver_riscv_clint0 *clint =
20401634:	fdc42783          	lw	a5,-36(s0)
20401638:	fef42623          	sw	a5,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:33
                              (struct __metal_driver_riscv_clint0 *)(controller);
    unsigned long control_base = __metal_driver_sifive_clint0_control_base(&clint->controller);
2040163c:	fec42783          	lw	a5,-20(s0)
20401640:	853e                	mv	a0,a5
20401642:	3dbd                	jal	204014c0 <__metal_driver_sifive_clint0_control_base>
20401644:	fea42423          	sw	a0,-24(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:40
     * and are NOT internally latched for multiword transfers.
     * Need to be careful about sequencing to avoid triggering
     * spurious interrupts: For that set the high word to a max
     * value first.
     */
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + (8 * hartid) + METAL_RISCV_CLINT0_MTIMECMP_BASE + 4)) = 0xFFFFFFFF;
20401648:	fd842783          	lw	a5,-40(s0)
2040164c:	078e                	slli	a5,a5,0x3
2040164e:	873e                	mv	a4,a5
20401650:	fe842783          	lw	a5,-24(s0)
20401654:	973e                	add	a4,a4,a5
20401656:	6791                	lui	a5,0x4
20401658:	0791                	addi	a5,a5,4
2040165a:	97ba                	add	a5,a5,a4
2040165c:	873e                	mv	a4,a5
2040165e:	57fd                	li	a5,-1
20401660:	c31c                	sw	a5,0(a4)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:41
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + (8 * hartid) + METAL_RISCV_CLINT0_MTIMECMP_BASE)) = (__metal_io_u32)time;
20401662:	fd842783          	lw	a5,-40(s0)
20401666:	078e                	slli	a5,a5,0x3
20401668:	873e                	mv	a4,a5
2040166a:	fe842783          	lw	a5,-24(s0)
2040166e:	973e                	add	a4,a4,a5
20401670:	6791                	lui	a5,0x4
20401672:	97ba                	add	a5,a5,a4
20401674:	873e                	mv	a4,a5
20401676:	fd042783          	lw	a5,-48(s0)
2040167a:	c31c                	sw	a5,0(a4)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:42
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + (8 * hartid) + METAL_RISCV_CLINT0_MTIMECMP_BASE + 4)) = (__metal_io_u32)(time >> 32);
2040167c:	fd442783          	lw	a5,-44(s0)
20401680:	0007d913          	srli	s2,a5,0x0
20401684:	4981                	li	s3,0
20401686:	fd842783          	lw	a5,-40(s0)
2040168a:	078e                	slli	a5,a5,0x3
2040168c:	873e                	mv	a4,a5
2040168e:	fe842783          	lw	a5,-24(s0)
20401692:	973e                	add	a4,a4,a5
20401694:	6791                	lui	a5,0x4
20401696:	0791                	addi	a5,a5,4
20401698:	97ba                	add	a5,a5,a4
2040169a:	874a                	mv	a4,s2
2040169c:	c398                	sw	a4,0(a5)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:43
    return 0;
2040169e:	4781                	li	a5,0
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:44
}
204016a0:	853e                	mv	a0,a5
204016a2:	50b2                	lw	ra,44(sp)
204016a4:	5422                	lw	s0,40(sp)
204016a6:	5912                	lw	s2,36(sp)
204016a8:	5982                	lw	s3,32(sp)
204016aa:	6145                	addi	sp,sp,48
204016ac:	8082                	ret

204016ae <_get_cpu_intc>:
_get_cpu_intc():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:47

static struct metal_interrupt *_get_cpu_intc()
{
204016ae:	1101                	addi	sp,sp,-32
204016b0:	ce06                	sw	ra,28(sp)
204016b2:	cc22                	sw	s0,24(sp)
204016b4:	1000                	addi	s0,sp,32
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:48
    int hartid = 0;
204016b6:	fe042623          	sw	zero,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:49
    __asm__ volatile("csrr %[hartid], mhartid"
204016ba:	f14027f3          	csrr	a5,mhartid
204016be:	fef42623          	sw	a5,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:52
                     : [hartid] "=r" (hartid) :: "memory");

    struct metal_cpu *cpu = metal_cpu_get(hartid);
204016c2:	fec42783          	lw	a5,-20(s0)
204016c6:	853e                	mv	a0,a5
204016c8:	3ec5                	jal	204012b8 <metal_cpu_get>
204016ca:	fea42423          	sw	a0,-24(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:54

    return metal_cpu_interrupt_controller(cpu);
204016ce:	fe842503          	lw	a0,-24(s0)
204016d2:	36c1                	jal	20401292 <metal_cpu_interrupt_controller>
204016d4:	87aa                	mv	a5,a0
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:55
}
204016d6:	853e                	mv	a0,a5
204016d8:	40f2                	lw	ra,28(sp)
204016da:	4462                	lw	s0,24(sp)
204016dc:	6105                	addi	sp,sp,32
204016de:	8082                	ret

204016e0 <__metal_driver_riscv_clint0_init>:
__metal_driver_riscv_clint0_init():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:58

void __metal_driver_riscv_clint0_init (struct metal_interrupt *controller)
{
204016e0:	7139                	addi	sp,sp,-64
204016e2:	de06                	sw	ra,60(sp)
204016e4:	dc22                	sw	s0,56(sp)
204016e6:	0080                	addi	s0,sp,64
204016e8:	fca42623          	sw	a0,-52(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:59
    int num_interrupts = __metal_driver_sifive_clint0_num_interrupts(controller);
204016ec:	fcc42503          	lw	a0,-52(s0)
204016f0:	3bed                	jal	204014ea <__metal_driver_sifive_clint0_num_interrupts>
204016f2:	fea42423          	sw	a0,-24(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:60
    struct __metal_driver_riscv_clint0 *clint =
204016f6:	fcc42783          	lw	a5,-52(s0)
204016fa:	fef42223          	sw	a5,-28(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:63
                              (struct __metal_driver_riscv_clint0 *)(controller);

    if ( !clint->init_done ) {
204016fe:	fe442783          	lw	a5,-28(s0)
20401702:	43dc                	lw	a5,4(a5)
20401704:	efa9                	bnez	a5,2040175e <__metal_driver_riscv_clint0_init+0x7e>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:65
	/* Register its interrupts with with parent controller, aka sw and timerto its default isr */
        for (int i = 0; i < num_interrupts; i++) {
20401706:	fe042623          	sw	zero,-20(s0)
2040170a:	a081                	j	2040174a <__metal_driver_riscv_clint0_init+0x6a>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:66 (discriminator 3)
	  struct metal_interrupt *intc = __metal_driver_sifive_clint0_interrupt_parents(controller, i);
2040170c:	fec42583          	lw	a1,-20(s0)
20401710:	fcc42503          	lw	a0,-52(s0)
20401714:	3bfd                	jal	20401512 <__metal_driver_sifive_clint0_interrupt_parents>
20401716:	fea42023          	sw	a0,-32(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:67 (discriminator 3)
	  int line = __metal_driver_sifive_clint0_interrupt_lines(controller, i);
2040171a:	fec42583          	lw	a1,-20(s0)
2040171e:	fcc42503          	lw	a0,-52(s0)
20401722:	3535                	jal	2040154e <__metal_driver_sifive_clint0_interrupt_lines>
20401724:	fca42e23          	sw	a0,-36(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:68 (discriminator 3)
            intc->vtable->interrupt_register(intc, line, NULL, controller);
20401728:	fe042783          	lw	a5,-32(s0)
2040172c:	439c                	lw	a5,0(a5)
2040172e:	4fdc                	lw	a5,28(a5)
20401730:	fcc42683          	lw	a3,-52(s0)
20401734:	4601                	li	a2,0
20401736:	fdc42583          	lw	a1,-36(s0)
2040173a:	fe042503          	lw	a0,-32(s0)
2040173e:	9782                	jalr	a5
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:65 (discriminator 3)
        for (int i = 0; i < num_interrupts; i++) {
20401740:	fec42783          	lw	a5,-20(s0)
20401744:	0785                	addi	a5,a5,1
20401746:	fef42623          	sw	a5,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:65 (discriminator 1)
2040174a:	fec42703          	lw	a4,-20(s0)
2040174e:	fe842783          	lw	a5,-24(s0)
20401752:	faf74de3          	blt	a4,a5,2040170c <__metal_driver_riscv_clint0_init+0x2c>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:70
	}
	clint->init_done = 1;
20401756:	fe442783          	lw	a5,-28(s0)
2040175a:	4705                	li	a4,1
2040175c:	c3d8                	sw	a4,4(a5)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:72
    }	
}
2040175e:	0001                	nop
20401760:	50f2                	lw	ra,60(sp)
20401762:	5462                	lw	s0,56(sp)
20401764:	6121                	addi	sp,sp,64
20401766:	8082                	ret

20401768 <__metal_driver_riscv_clint0_register>:
__metal_driver_riscv_clint0_register():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:77

int __metal_driver_riscv_clint0_register (struct metal_interrupt *controller,
                                        int id, metal_interrupt_handler_t isr,
                                        void *priv)
{
20401768:	7139                	addi	sp,sp,-64
2040176a:	de06                	sw	ra,60(sp)
2040176c:	dc22                	sw	s0,56(sp)
2040176e:	0080                	addi	s0,sp,64
20401770:	fca42623          	sw	a0,-52(s0)
20401774:	fcb42423          	sw	a1,-56(s0)
20401778:	fcc42223          	sw	a2,-60(s0)
2040177c:	fcd42023          	sw	a3,-64(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:78
    int rc = -1;
20401780:	57fd                	li	a5,-1
20401782:	fef42623          	sw	a5,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:79
    metal_vector_mode mode = __metal_controller_interrupt_vector_mode();
20401786:	3d4010ef          	jal	ra,20402b5a <__metal_controller_interrupt_vector_mode>
2040178a:	fea42023          	sw	a0,-32(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:80
    struct metal_interrupt *intc = NULL;
2040178e:	fe042423          	sw	zero,-24(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:81
    struct metal_interrupt *cpu_intc = _get_cpu_intc();
20401792:	3f31                	jal	204016ae <_get_cpu_intc>
20401794:	fca42e23          	sw	a0,-36(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:82
    int num_interrupts = __metal_driver_sifive_clint0_num_interrupts(controller);
20401798:	fcc42503          	lw	a0,-52(s0)
2040179c:	33b9                	jal	204014ea <__metal_driver_sifive_clint0_num_interrupts>
2040179e:	fca42c23          	sw	a0,-40(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:84

    if ( (mode != METAL_VECTOR_MODE) && (mode != METAL_DIRECT_MODE) ) {
204017a2:	fe042703          	lw	a4,-32(s0)
204017a6:	4785                	li	a5,1
204017a8:	00f70863          	beq	a4,a5,204017b8 <__metal_driver_riscv_clint0_register+0x50>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:84 (discriminator 1)
204017ac:	fe042783          	lw	a5,-32(s0)
204017b0:	c781                	beqz	a5,204017b8 <__metal_driver_riscv_clint0_register+0x50>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:85
        return rc;
204017b2:	fec42783          	lw	a5,-20(s0)
204017b6:	a049                	j	20401838 <__metal_driver_riscv_clint0_register+0xd0>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:88
    }

    for(int i = 0; i < num_interrupts; i++) {
204017b8:	fe042223          	sw	zero,-28(s0)
204017bc:	a091                	j	20401800 <__metal_driver_riscv_clint0_register+0x98>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:89
	int line = __metal_driver_sifive_clint0_interrupt_lines(controller, i);
204017be:	fe442583          	lw	a1,-28(s0)
204017c2:	fcc42503          	lw	a0,-52(s0)
204017c6:	3361                	jal	2040154e <__metal_driver_sifive_clint0_interrupt_lines>
204017c8:	fca42a23          	sw	a0,-44(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:90
        intc = __metal_driver_sifive_clint0_interrupt_parents(controller, i);
204017cc:	fe442583          	lw	a1,-28(s0)
204017d0:	fcc42503          	lw	a0,-52(s0)
204017d4:	3b3d                	jal	20401512 <__metal_driver_sifive_clint0_interrupt_parents>
204017d6:	fea42423          	sw	a0,-24(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:91
        if (cpu_intc == intc && id == line) {
204017da:	fdc42703          	lw	a4,-36(s0)
204017de:	fe842783          	lw	a5,-24(s0)
204017e2:	00f71863          	bne	a4,a5,204017f2 <__metal_driver_riscv_clint0_register+0x8a>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:91 (discriminator 1)
204017e6:	fc842703          	lw	a4,-56(s0)
204017ea:	fd442783          	lw	a5,-44(s0)
204017ee:	02f70063          	beq	a4,a5,2040180e <__metal_driver_riscv_clint0_register+0xa6>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:94 (discriminator 2)
            break;
        }
	intc = NULL;
204017f2:	fe042423          	sw	zero,-24(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:88 (discriminator 2)
    for(int i = 0; i < num_interrupts; i++) {
204017f6:	fe442783          	lw	a5,-28(s0)
204017fa:	0785                	addi	a5,a5,1
204017fc:	fef42223          	sw	a5,-28(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:88 (discriminator 1)
20401800:	fe442703          	lw	a4,-28(s0)
20401804:	fd842783          	lw	a5,-40(s0)
20401808:	faf74be3          	blt	a4,a5,204017be <__metal_driver_riscv_clint0_register+0x56>
2040180c:	a011                	j	20401810 <__metal_driver_riscv_clint0_register+0xa8>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:92
            break;
2040180e:	0001                	nop
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:98
    }

    /* Register its interrupts with parent controller */
    if (intc) {
20401810:	fe842783          	lw	a5,-24(s0)
20401814:	c385                	beqz	a5,20401834 <__metal_driver_riscv_clint0_register+0xcc>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:99
        rc = intc->vtable->interrupt_register(intc, id, isr, priv);
20401816:	fe842783          	lw	a5,-24(s0)
2040181a:	439c                	lw	a5,0(a5)
2040181c:	4fdc                	lw	a5,28(a5)
2040181e:	fc042683          	lw	a3,-64(s0)
20401822:	fc442603          	lw	a2,-60(s0)
20401826:	fc842583          	lw	a1,-56(s0)
2040182a:	fe842503          	lw	a0,-24(s0)
2040182e:	9782                	jalr	a5
20401830:	fea42623          	sw	a0,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:101
    }
    return rc;
20401834:	fec42783          	lw	a5,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:102
}
20401838:	853e                	mv	a0,a5
2040183a:	50f2                	lw	ra,60(sp)
2040183c:	5462                	lw	s0,56(sp)
2040183e:	6121                	addi	sp,sp,64
20401840:	8082                	ret

20401842 <__metal_driver_riscv_clint0_vector_register>:
__metal_driver_riscv_clint0_vector_register():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:107

int __metal_driver_riscv_clint0_vector_register (struct metal_interrupt *controller,
                                                 int id, metal_interrupt_vector_handler_t isr,
                                                 void *priv)
{   
20401842:	7179                	addi	sp,sp,-48
20401844:	d622                	sw	s0,44(sp)
20401846:	1800                	addi	s0,sp,48
20401848:	fca42e23          	sw	a0,-36(s0)
2040184c:	fcb42c23          	sw	a1,-40(s0)
20401850:	fcc42a23          	sw	a2,-44(s0)
20401854:	fcd42823          	sw	a3,-48(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:109
    /* Not supported. User can override the 'weak' handler with their own */
    int rc = -1;
20401858:	57fd                	li	a5,-1
2040185a:	fef42623          	sw	a5,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:110
    return rc;
2040185e:	fec42783          	lw	a5,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:111
}
20401862:	853e                	mv	a0,a5
20401864:	5432                	lw	s0,44(sp)
20401866:	6145                	addi	sp,sp,48
20401868:	8082                	ret

2040186a <__metal_driver_riscv_clint0_get_vector_mode>:
__metal_driver_riscv_clint0_get_vector_mode():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:114

metal_vector_mode __metal_driver_riscv_clint0_get_vector_mode (struct metal_interrupt *controller)
{
2040186a:	1101                	addi	sp,sp,-32
2040186c:	ce06                	sw	ra,28(sp)
2040186e:	cc22                	sw	s0,24(sp)
20401870:	1000                	addi	s0,sp,32
20401872:	fea42623          	sw	a0,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:115
    return __metal_controller_interrupt_vector_mode();
20401876:	2e4010ef          	jal	ra,20402b5a <__metal_controller_interrupt_vector_mode>
2040187a:	87aa                	mv	a5,a0
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:116
}
2040187c:	853e                	mv	a0,a5
2040187e:	40f2                	lw	ra,28(sp)
20401880:	4462                	lw	s0,24(sp)
20401882:	6105                	addi	sp,sp,32
20401884:	8082                	ret

20401886 <__metal_driver_riscv_clint0_set_vector_mode>:
__metal_driver_riscv_clint0_set_vector_mode():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:119

int __metal_driver_riscv_clint0_set_vector_mode (struct metal_interrupt *controller, metal_vector_mode mode)
{
20401886:	7179                	addi	sp,sp,-48
20401888:	d606                	sw	ra,44(sp)
2040188a:	d422                	sw	s0,40(sp)
2040188c:	1800                	addi	s0,sp,48
2040188e:	fca42e23          	sw	a0,-36(s0)
20401892:	fcb42c23          	sw	a1,-40(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:120
    int rc = -1;
20401896:	57fd                	li	a5,-1
20401898:	fef42623          	sw	a5,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:121
    struct metal_interrupt *intc = _get_cpu_intc();
2040189c:	3d09                	jal	204016ae <_get_cpu_intc>
2040189e:	fea42423          	sw	a0,-24(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:123

    if (intc) {
204018a2:	fe842783          	lw	a5,-24(s0)
204018a6:	c395                	beqz	a5,204018ca <__metal_driver_riscv_clint0_set_vector_mode+0x44>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:125
	/* Valid vector modes are VECTOR and DIRECT, anything else is invalid (-1) */
        switch (mode) {
204018a8:	fd842703          	lw	a4,-40(s0)
204018ac:	4785                	li	a5,1
204018ae:	00e7ef63          	bltu	a5,a4,204018cc <__metal_driver_riscv_clint0_set_vector_mode+0x46>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:128
        case METAL_VECTOR_MODE:
        case METAL_DIRECT_MODE:
            rc = intc->vtable->interrupt_set_vector_mode(intc, mode);
204018b2:	fe842783          	lw	a5,-24(s0)
204018b6:	439c                	lw	a5,0(a5)
204018b8:	43dc                	lw	a5,4(a5)
204018ba:	fd842583          	lw	a1,-40(s0)
204018be:	fe842503          	lw	a0,-24(s0)
204018c2:	9782                	jalr	a5
204018c4:	fea42623          	sw	a0,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:129
            break;
204018c8:	a011                	j	204018cc <__metal_driver_riscv_clint0_set_vector_mode+0x46>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:131
        }
    }
204018ca:	0001                	nop
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:132
    return rc;
204018cc:	fec42783          	lw	a5,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:133
}
204018d0:	853e                	mv	a0,a5
204018d2:	50b2                	lw	ra,44(sp)
204018d4:	5422                	lw	s0,40(sp)
204018d6:	6145                	addi	sp,sp,48
204018d8:	8082                	ret

204018da <__metal_driver_riscv_clint0_enable>:
__metal_driver_riscv_clint0_enable():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:136

int __metal_driver_riscv_clint0_enable (struct metal_interrupt *controller, int id)
{
204018da:	7139                	addi	sp,sp,-64
204018dc:	de06                	sw	ra,60(sp)
204018de:	dc22                	sw	s0,56(sp)
204018e0:	0080                	addi	s0,sp,64
204018e2:	fca42623          	sw	a0,-52(s0)
204018e6:	fcb42423          	sw	a1,-56(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:137
    int rc = -1;
204018ea:	57fd                	li	a5,-1
204018ec:	fef42623          	sw	a5,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:139

    if ( id ) {
204018f0:	fc842783          	lw	a5,-56(s0)
204018f4:	c7c9                	beqz	a5,2040197e <__metal_driver_riscv_clint0_enable+0xa4>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:140
        struct metal_interrupt *intc = NULL;
204018f6:	fe042423          	sw	zero,-24(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:141
        struct metal_interrupt *cpu_intc = _get_cpu_intc();
204018fa:	3b55                	jal	204016ae <_get_cpu_intc>
204018fc:	fea42023          	sw	a0,-32(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:142
	int num_interrupts = __metal_driver_sifive_clint0_num_interrupts(controller);
20401900:	fcc42503          	lw	a0,-52(s0)
20401904:	36dd                	jal	204014ea <__metal_driver_sifive_clint0_num_interrupts>
20401906:	fca42e23          	sw	a0,-36(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:144

        for(int i = 0; i < num_interrupts; i++) {
2040190a:	fe042223          	sw	zero,-28(s0)
2040190e:	a091                	j	20401952 <__metal_driver_riscv_clint0_enable+0x78>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:145
	    int line = __metal_driver_sifive_clint0_interrupt_lines(controller, i);
20401910:	fe442583          	lw	a1,-28(s0)
20401914:	fcc42503          	lw	a0,-52(s0)
20401918:	391d                	jal	2040154e <__metal_driver_sifive_clint0_interrupt_lines>
2040191a:	fca42c23          	sw	a0,-40(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:146
	    intc = __metal_driver_sifive_clint0_interrupt_parents(controller, i);
2040191e:	fe442583          	lw	a1,-28(s0)
20401922:	fcc42503          	lw	a0,-52(s0)
20401926:	36f5                	jal	20401512 <__metal_driver_sifive_clint0_interrupt_parents>
20401928:	fea42423          	sw	a0,-24(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:147
            if(cpu_intc == intc && id == line) {
2040192c:	fe042703          	lw	a4,-32(s0)
20401930:	fe842783          	lw	a5,-24(s0)
20401934:	00f71863          	bne	a4,a5,20401944 <__metal_driver_riscv_clint0_enable+0x6a>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:147 (discriminator 1)
20401938:	fc842703          	lw	a4,-56(s0)
2040193c:	fd842783          	lw	a5,-40(s0)
20401940:	02f70063          	beq	a4,a5,20401960 <__metal_driver_riscv_clint0_enable+0x86>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:150 (discriminator 2)
                break;
            }
	    intc = NULL;
20401944:	fe042423          	sw	zero,-24(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:144 (discriminator 2)
        for(int i = 0; i < num_interrupts; i++) {
20401948:	fe442783          	lw	a5,-28(s0)
2040194c:	0785                	addi	a5,a5,1
2040194e:	fef42223          	sw	a5,-28(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:144 (discriminator 1)
20401952:	fe442703          	lw	a4,-28(s0)
20401956:	fdc42783          	lw	a5,-36(s0)
2040195a:	faf74be3          	blt	a4,a5,20401910 <__metal_driver_riscv_clint0_enable+0x36>
2040195e:	a011                	j	20401962 <__metal_driver_riscv_clint0_enable+0x88>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:148
                break;
20401960:	0001                	nop
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:154
        }
        
        /* Enable its interrupts with parent controller */
        if (intc) {
20401962:	fe842783          	lw	a5,-24(s0)
20401966:	cf81                	beqz	a5,2040197e <__metal_driver_riscv_clint0_enable+0xa4>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:155
            rc = intc->vtable->interrupt_enable(intc, id);
20401968:	fe842783          	lw	a5,-24(s0)
2040196c:	439c                	lw	a5,0(a5)
2040196e:	53dc                	lw	a5,36(a5)
20401970:	fc842583          	lw	a1,-56(s0)
20401974:	fe842503          	lw	a0,-24(s0)
20401978:	9782                	jalr	a5
2040197a:	fea42623          	sw	a0,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:159
        }
    }

    return rc;
2040197e:	fec42783          	lw	a5,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:160
}
20401982:	853e                	mv	a0,a5
20401984:	50f2                	lw	ra,60(sp)
20401986:	5462                	lw	s0,56(sp)
20401988:	6121                	addi	sp,sp,64
2040198a:	8082                	ret

2040198c <__metal_driver_riscv_clint0_disable>:
__metal_driver_riscv_clint0_disable():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:163

int __metal_driver_riscv_clint0_disable (struct metal_interrupt *controller, int id)
{
2040198c:	7139                	addi	sp,sp,-64
2040198e:	de06                	sw	ra,60(sp)
20401990:	dc22                	sw	s0,56(sp)
20401992:	0080                	addi	s0,sp,64
20401994:	fca42623          	sw	a0,-52(s0)
20401998:	fcb42423          	sw	a1,-56(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:164
    int rc = -1;
2040199c:	57fd                	li	a5,-1
2040199e:	fef42623          	sw	a5,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:166

    if ( id ) {
204019a2:	fc842783          	lw	a5,-56(s0)
204019a6:	c7d9                	beqz	a5,20401a34 <__metal_driver_riscv_clint0_disable+0xa8>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:167
        struct metal_interrupt *intc = NULL;
204019a8:	fe042423          	sw	zero,-24(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:168
        struct metal_interrupt *cpu_intc = _get_cpu_intc();
204019ac:	3309                	jal	204016ae <_get_cpu_intc>
204019ae:	fea42023          	sw	a0,-32(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:169
	int num_interrupts = __metal_driver_sifive_clint0_num_interrupts(controller);
204019b2:	fcc42503          	lw	a0,-52(s0)
204019b6:	b35ff0ef          	jal	ra,204014ea <__metal_driver_sifive_clint0_num_interrupts>
204019ba:	fca42e23          	sw	a0,-36(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:171

        for(int i = 0; i < num_interrupts; i++) {
204019be:	fe042223          	sw	zero,-28(s0)
204019c2:	a099                	j	20401a08 <__metal_driver_riscv_clint0_disable+0x7c>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:172
	    int line = __metal_driver_sifive_clint0_interrupt_lines(controller, i);
204019c4:	fe442583          	lw	a1,-28(s0)
204019c8:	fcc42503          	lw	a0,-52(s0)
204019cc:	3649                	jal	2040154e <__metal_driver_sifive_clint0_interrupt_lines>
204019ce:	fca42c23          	sw	a0,-40(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:173
	    intc = __metal_driver_sifive_clint0_interrupt_parents(controller, i);
204019d2:	fe442583          	lw	a1,-28(s0)
204019d6:	fcc42503          	lw	a0,-52(s0)
204019da:	b39ff0ef          	jal	ra,20401512 <__metal_driver_sifive_clint0_interrupt_parents>
204019de:	fea42423          	sw	a0,-24(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:174
            if(cpu_intc == intc && id == line) {
204019e2:	fe042703          	lw	a4,-32(s0)
204019e6:	fe842783          	lw	a5,-24(s0)
204019ea:	00f71863          	bne	a4,a5,204019fa <__metal_driver_riscv_clint0_disable+0x6e>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:174 (discriminator 1)
204019ee:	fc842703          	lw	a4,-56(s0)
204019f2:	fd842783          	lw	a5,-40(s0)
204019f6:	02f70063          	beq	a4,a5,20401a16 <__metal_driver_riscv_clint0_disable+0x8a>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:177 (discriminator 2)
                break;
            }
	    intc = NULL;
204019fa:	fe042423          	sw	zero,-24(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:171 (discriminator 2)
        for(int i = 0; i < num_interrupts; i++) {
204019fe:	fe442783          	lw	a5,-28(s0)
20401a02:	0785                	addi	a5,a5,1
20401a04:	fef42223          	sw	a5,-28(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:171 (discriminator 1)
20401a08:	fe442703          	lw	a4,-28(s0)
20401a0c:	fdc42783          	lw	a5,-36(s0)
20401a10:	faf74ae3          	blt	a4,a5,204019c4 <__metal_driver_riscv_clint0_disable+0x38>
20401a14:	a011                	j	20401a18 <__metal_driver_riscv_clint0_disable+0x8c>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:175
                break;
20401a16:	0001                	nop
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:181
        }
        
        /* Disable its interrupts with parent controller */
        if (intc) {
20401a18:	fe842783          	lw	a5,-24(s0)
20401a1c:	cf81                	beqz	a5,20401a34 <__metal_driver_riscv_clint0_disable+0xa8>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:182
            rc = intc->vtable->interrupt_disable(intc, id);
20401a1e:	fe842783          	lw	a5,-24(s0)
20401a22:	439c                	lw	a5,0(a5)
20401a24:	579c                	lw	a5,40(a5)
20401a26:	fc842583          	lw	a1,-56(s0)
20401a2a:	fe842503          	lw	a0,-24(s0)
20401a2e:	9782                	jalr	a5
20401a30:	fea42623          	sw	a0,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:186
        }
    }

    return rc;
20401a34:	fec42783          	lw	a5,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:187
}
20401a38:	853e                	mv	a0,a5
20401a3a:	50f2                	lw	ra,60(sp)
20401a3c:	5462                	lw	s0,56(sp)
20401a3e:	6121                	addi	sp,sp,64
20401a40:	8082                	ret

20401a42 <__metal_driver_riscv_clint0_command_request>:
__metal_driver_riscv_clint0_command_request():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:191

int __metal_driver_riscv_clint0_command_request (struct metal_interrupt *controller,
                                               int command, void *data)
{
20401a42:	7179                	addi	sp,sp,-48
20401a44:	d606                	sw	ra,44(sp)
20401a46:	d422                	sw	s0,40(sp)
20401a48:	1800                	addi	s0,sp,48
20401a4a:	fca42e23          	sw	a0,-36(s0)
20401a4e:	fcb42c23          	sw	a1,-40(s0)
20401a52:	fcc42a23          	sw	a2,-44(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:193
    int hartid;
    int rc = -1;
20401a56:	57fd                	li	a5,-1
20401a58:	fef42623          	sw	a5,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:194
    struct __metal_driver_riscv_clint0 *clint =
20401a5c:	fdc42783          	lw	a5,-36(s0)
20401a60:	fef42423          	sw	a5,-24(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:196
                              (struct __metal_driver_riscv_clint0 *)(controller);
    unsigned long control_base = __metal_driver_sifive_clint0_control_base(controller);
20401a64:	fdc42503          	lw	a0,-36(s0)
20401a68:	a59ff0ef          	jal	ra,204014c0 <__metal_driver_sifive_clint0_control_base>
20401a6c:	fea42223          	sw	a0,-28(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:198

    switch (command) {
20401a70:	fd842703          	lw	a4,-40(s0)
20401a74:	4789                	li	a5,2
20401a76:	04f70963          	beq	a4,a5,20401ac8 <__metal_driver_riscv_clint0_command_request+0x86>
20401a7a:	fd842703          	lw	a4,-40(s0)
20401a7e:	4789                	li	a5,2
20401a80:	00e7c863          	blt	a5,a4,20401a90 <__metal_driver_riscv_clint0_command_request+0x4e>
20401a84:	fd842703          	lw	a4,-40(s0)
20401a88:	4785                	li	a5,1
20401a8a:	00f70e63          	beq	a4,a5,20401aa6 <__metal_driver_riscv_clint0_command_request+0x64>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:242
            rc = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
						    (hartid * 4)));
        }
        break;
    default:
	break;
20401a8e:	a8f1                	j	20401b6a <__metal_driver_riscv_clint0_command_request+0x128>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:198
    switch (command) {
20401a90:	fd842703          	lw	a4,-40(s0)
20401a94:	478d                	li	a5,3
20401a96:	04f70d63          	beq	a4,a5,20401af0 <__metal_driver_riscv_clint0_command_request+0xae>
20401a9a:	fd842703          	lw	a4,-40(s0)
20401a9e:	4791                	li	a5,4
20401aa0:	08f70963          	beq	a4,a5,20401b32 <__metal_driver_riscv_clint0_command_request+0xf0>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:242
	break;
20401aa4:	a0d9                	j	20401b6a <__metal_driver_riscv_clint0_command_request+0x128>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:200
        if (data) {
20401aa6:	fd442783          	lw	a5,-44(s0)
20401aaa:	cbcd                	beqz	a5,20401b5c <__metal_driver_riscv_clint0_command_request+0x11a>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:201
	    *(unsigned long long *)data = __metal_clint0_mtime_get(clint);
20401aac:	fe842503          	lw	a0,-24(s0)
20401ab0:	acfff0ef          	jal	ra,2040157e <__metal_clint0_mtime_get>
20401ab4:	87aa                	mv	a5,a0
20401ab6:	882e                	mv	a6,a1
20401ab8:	fd442703          	lw	a4,-44(s0)
20401abc:	c31c                	sw	a5,0(a4)
20401abe:	01072223          	sw	a6,4(a4) # fffff004 <metal_segment_heap_target_end+0x7fffdb6c>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:202
            rc = 0;
20401ac2:	fe042623          	sw	zero,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:204
        break;
20401ac6:	a859                	j	20401b5c <__metal_driver_riscv_clint0_command_request+0x11a>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:206
	if (data) {
20401ac8:	fd442783          	lw	a5,-44(s0)
20401acc:	cbd1                	beqz	a5,20401b60 <__metal_driver_riscv_clint0_command_request+0x11e>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:207
	    hartid = *(int *)data;
20401ace:	fd442783          	lw	a5,-44(s0)
20401ad2:	439c                	lw	a5,0(a5)
20401ad4:	fef42023          	sw	a5,-32(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:208
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20401ad8:	fe042783          	lw	a5,-32(s0)
20401adc:	078a                	slli	a5,a5,0x2
20401ade:	873e                	mv	a4,a5
20401ae0:	fe442783          	lw	a5,-28(s0)
20401ae4:	97ba                	add	a5,a5,a4
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:209
					       (hartid * 4))) = METAL_DISABLE;
20401ae6:	0007a023          	sw	zero,0(a5) # 4000 <__heap_size+0x3800>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:210
            rc = 0;
20401aea:	fe042623          	sw	zero,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:212
        break;
20401aee:	a88d                	j	20401b60 <__metal_driver_riscv_clint0_command_request+0x11e>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:214
	if (data) {
20401af0:	fd442783          	lw	a5,-44(s0)
20401af4:	cba5                	beqz	a5,20401b64 <__metal_driver_riscv_clint0_command_request+0x122>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:215
	    hartid = *(int *)data;
20401af6:	fd442783          	lw	a5,-44(s0)
20401afa:	439c                	lw	a5,0(a5)
20401afc:	fef42023          	sw	a5,-32(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:216
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20401b00:	fe042783          	lw	a5,-32(s0)
20401b04:	078a                	slli	a5,a5,0x2
20401b06:	873e                	mv	a4,a5
20401b08:	fe442783          	lw	a5,-28(s0)
20401b0c:	97ba                	add	a5,a5,a4
20401b0e:	873e                	mv	a4,a5
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:217
					       (hartid * 4))) = METAL_ENABLE;
20401b10:	4785                	li	a5,1
20401b12:	c31c                	sw	a5,0(a4)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:227
	    __METAL_IO_FENCE(o,i);
20401b14:	0480000f          	fence	o,i
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:228
            rc = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20401b18:	fe042783          	lw	a5,-32(s0)
20401b1c:	078a                	slli	a5,a5,0x2
20401b1e:	873e                	mv	a4,a5
20401b20:	fe442783          	lw	a5,-28(s0)
20401b24:	97ba                	add	a5,a5,a4
20401b26:	439c                	lw	a5,0(a5)
20401b28:	fef42623          	sw	a5,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:230
            rc = 0;
20401b2c:	fe042623          	sw	zero,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:232
        break;
20401b30:	a815                	j	20401b64 <__metal_driver_riscv_clint0_command_request+0x122>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:234
        rc = 0;
20401b32:	fe042623          	sw	zero,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:235
	if (data) {
20401b36:	fd442783          	lw	a5,-44(s0)
20401b3a:	c79d                	beqz	a5,20401b68 <__metal_driver_riscv_clint0_command_request+0x126>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:236
	    hartid = *(int *)data;
20401b3c:	fd442783          	lw	a5,-44(s0)
20401b40:	439c                	lw	a5,0(a5)
20401b42:	fef42023          	sw	a5,-32(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:237
            rc = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20401b46:	fe042783          	lw	a5,-32(s0)
20401b4a:	078a                	slli	a5,a5,0x2
20401b4c:	873e                	mv	a4,a5
20401b4e:	fe442783          	lw	a5,-28(s0)
20401b52:	97ba                	add	a5,a5,a4
20401b54:	439c                	lw	a5,0(a5)
20401b56:	fef42623          	sw	a5,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:240
        break;
20401b5a:	a039                	j	20401b68 <__metal_driver_riscv_clint0_command_request+0x126>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:204
        break;
20401b5c:	0001                	nop
20401b5e:	a031                	j	20401b6a <__metal_driver_riscv_clint0_command_request+0x128>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:212
        break;
20401b60:	0001                	nop
20401b62:	a021                	j	20401b6a <__metal_driver_riscv_clint0_command_request+0x128>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:232
        break;
20401b64:	0001                	nop
20401b66:	a011                	j	20401b6a <__metal_driver_riscv_clint0_command_request+0x128>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:240
        break;
20401b68:	0001                	nop
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:245
    }

    return rc;
20401b6a:	fec42783          	lw	a5,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:246
}
20401b6e:	853e                	mv	a0,a5
20401b70:	50b2                	lw	ra,44(sp)
20401b72:	5422                	lw	s0,40(sp)
20401b74:	6145                	addi	sp,sp,48
20401b76:	8082                	ret

20401b78 <__metal_driver_riscv_clint0_clear_interrupt>:
__metal_driver_riscv_clint0_clear_interrupt():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:249

int __metal_driver_riscv_clint0_clear_interrupt (struct metal_interrupt *controller, int id)
{
20401b78:	7179                	addi	sp,sp,-48
20401b7a:	d606                	sw	ra,44(sp)
20401b7c:	d422                	sw	s0,40(sp)
20401b7e:	1800                	addi	s0,sp,48
20401b80:	fca42e23          	sw	a0,-36(s0)
20401b84:	fcb42c23          	sw	a1,-40(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:250
    int hartid = metal_cpu_get_current_hartid();
20401b88:	f5eff0ef          	jal	ra,204012e6 <metal_cpu_get_current_hartid>
20401b8c:	87aa                	mv	a5,a0
20401b8e:	fef42623          	sw	a5,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:251
    return __metal_driver_riscv_clint0_command_request(controller,
20401b92:	fec40793          	addi	a5,s0,-20
20401b96:	863e                	mv	a2,a5
20401b98:	4589                	li	a1,2
20401b9a:	fdc42503          	lw	a0,-36(s0)
20401b9e:	3555                	jal	20401a42 <__metal_driver_riscv_clint0_command_request>
20401ba0:	87aa                	mv	a5,a0
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:253
						METAL_SOFTWARE_IPI_CLEAR, &hartid);
}
20401ba2:	853e                	mv	a0,a5
20401ba4:	50b2                	lw	ra,44(sp)
20401ba6:	5422                	lw	s0,40(sp)
20401ba8:	6145                	addi	sp,sp,48
20401baa:	8082                	ret

20401bac <__metal_driver_riscv_clint0_set_interrupt>:
__metal_driver_riscv_clint0_set_interrupt():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:256

int __metal_driver_riscv_clint0_set_interrupt (struct metal_interrupt *controller, int id)
{
20401bac:	7179                	addi	sp,sp,-48
20401bae:	d606                	sw	ra,44(sp)
20401bb0:	d422                	sw	s0,40(sp)
20401bb2:	1800                	addi	s0,sp,48
20401bb4:	fca42e23          	sw	a0,-36(s0)
20401bb8:	fcb42c23          	sw	a1,-40(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:257
    int hartid = metal_cpu_get_current_hartid();
20401bbc:	f2aff0ef          	jal	ra,204012e6 <metal_cpu_get_current_hartid>
20401bc0:	87aa                	mv	a5,a0
20401bc2:	fef42623          	sw	a5,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:258
    return __metal_driver_riscv_clint0_command_request(controller,
20401bc6:	fec40793          	addi	a5,s0,-20
20401bca:	863e                	mv	a2,a5
20401bcc:	458d                	li	a1,3
20401bce:	fdc42503          	lw	a0,-36(s0)
20401bd2:	3d85                	jal	20401a42 <__metal_driver_riscv_clint0_command_request>
20401bd4:	87aa                	mv	a5,a0
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:260
						METAL_SOFTWARE_IPI_SET, &hartid);
}
20401bd6:	853e                	mv	a0,a5
20401bd8:	50b2                	lw	ra,44(sp)
20401bda:	5422                	lw	s0,40(sp)
20401bdc:	6145                	addi	sp,sp,48
20401bde:	8082                	ret

20401be0 <__metal_driver_cpu_hartid>:
__metal_driver_cpu_hartid():
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:247



/* --------------------- cpu ------------ */
static __inline__ int __metal_driver_cpu_hartid(struct metal_cpu *cpu)
{
20401be0:	1101                	addi	sp,sp,-32
20401be2:	ce22                	sw	s0,28(sp)
20401be4:	1000                	addi	s0,sp,32
20401be6:	fea42623          	sw	a0,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:248
	if ((uintptr_t)cpu == (uintptr_t)&__metal_dt_cpu_0) {
20401bea:	fec42703          	lw	a4,-20(s0)
20401bee:	81418793          	addi	a5,gp,-2028 # 800007a4 <__metal_dt_cpu_0>
20401bf2:	00f71463          	bne	a4,a5,20401bfa <__metal_driver_cpu_hartid+0x1a>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:249
		return 0;
20401bf6:	4781                	li	a5,0
20401bf8:	a011                	j	20401bfc <__metal_driver_cpu_hartid+0x1c>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:252
	}
	else {
		return -1;
20401bfa:	57fd                	li	a5,-1
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:254
	}
}
20401bfc:	853e                	mv	a0,a5
20401bfe:	4472                	lw	s0,28(sp)
20401c00:	6105                	addi	sp,sp,32
20401c02:	8082                	ret

20401c04 <__metal_driver_cpu_timebase>:
__metal_driver_cpu_timebase():
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:257

static __inline__ int __metal_driver_cpu_timebase(struct metal_cpu *cpu)
{
20401c04:	1101                	addi	sp,sp,-32
20401c06:	ce22                	sw	s0,28(sp)
20401c08:	1000                	addi	s0,sp,32
20401c0a:	fea42623          	sw	a0,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:258
	if ((uintptr_t)cpu == (uintptr_t)&__metal_dt_cpu_0) {
20401c0e:	fec42703          	lw	a4,-20(s0)
20401c12:	81418793          	addi	a5,gp,-2028 # 800007a4 <__metal_dt_cpu_0>
20401c16:	00f71763          	bne	a4,a5,20401c24 <__metal_driver_cpu_timebase+0x20>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:259
		return 1000000;
20401c1a:	000f47b7          	lui	a5,0xf4
20401c1e:	24078793          	addi	a5,a5,576 # f4240 <__heap_size+0xf3a40>
20401c22:	a011                	j	20401c26 <__metal_driver_cpu_timebase+0x22>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:262
	}
	else {
		return 0;
20401c24:	4781                	li	a5,0
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:264
	}
}
20401c26:	853e                	mv	a0,a5
20401c28:	4472                	lw	s0,28(sp)
20401c2a:	6105                	addi	sp,sp,32
20401c2c:	8082                	ret

20401c2e <__metal_driver_cpu_interrupt_controller>:
__metal_driver_cpu_interrupt_controller():
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:267

static __inline__ struct metal_interrupt * __metal_driver_cpu_interrupt_controller(struct metal_cpu *cpu)
{
20401c2e:	1101                	addi	sp,sp,-32
20401c30:	ce22                	sw	s0,28(sp)
20401c32:	1000                	addi	s0,sp,32
20401c34:	fea42623          	sw	a0,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:268
	if ((uintptr_t)cpu == (uintptr_t)&__metal_dt_cpu_0) {
20401c38:	fec42703          	lw	a4,-20(s0)
20401c3c:	81418793          	addi	a5,gp,-2028 # 800007a4 <__metal_dt_cpu_0>
20401c40:	00f71763          	bne	a4,a5,20401c4e <__metal_driver_cpu_interrupt_controller+0x20>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:269
		return &__metal_dt_cpu_0_interrupt_controller.controller;
20401c44:	800007b7          	lui	a5,0x80000
20401c48:	09078793          	addi	a5,a5,144 # 80000090 <metal_segment_heap_target_end+0xffffebf8>
20401c4c:	a011                	j	20401c50 <__metal_driver_cpu_interrupt_controller+0x22>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:272
	}
	else {
		return NULL;
20401c4e:	4781                	li	a5,0
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:274
	}
}
20401c50:	853e                	mv	a0,a5
20401c52:	4472                	lw	s0,28(sp)
20401c54:	6105                	addi	sp,sp,32
20401c56:	8082                	ret

20401c58 <__metal_driver_cpu_get>:
__metal_driver_cpu_get():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:14
extern void __metal_vector_table();
unsigned long long __metal_driver_cpu_mtime_get(struct metal_cpu *cpu);
int __metal_driver_cpu_mtimecmp_set(struct metal_cpu *cpu, unsigned long long time);

struct metal_cpu *__metal_driver_cpu_get(int hartid)
{
20401c58:	1101                	addi	sp,sp,-32
20401c5a:	ce22                	sw	s0,28(sp)
20401c5c:	1000                	addi	s0,sp,32
20401c5e:	fea42623          	sw	a0,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:15
    if (hartid < __METAL_DT_MAX_HARTS) {
20401c62:	fec42783          	lw	a5,-20(s0)
20401c66:	00f04c63          	bgtz	a5,20401c7e <__metal_driver_cpu_get+0x26>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:16
        return &(__metal_cpu_table[hartid]->cpu);
20401c6a:	800007b7          	lui	a5,0x80000
20401c6e:	fec42703          	lw	a4,-20(s0)
20401c72:	070a                	slli	a4,a4,0x2
20401c74:	79878793          	addi	a5,a5,1944 # 80000798 <metal_segment_heap_target_end+0xfffff300>
20401c78:	97ba                	add	a5,a5,a4
20401c7a:	439c                	lw	a5,0(a5)
20401c7c:	a011                	j	20401c80 <__metal_driver_cpu_get+0x28>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:18
    }
    return (struct metal_cpu *)NULL;
20401c7e:	4781                	li	a5,0
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:19
}
20401c80:	853e                	mv	a0,a5
20401c82:	4472                	lw	s0,28(sp)
20401c84:	6105                	addi	sp,sp,32
20401c86:	8082                	ret

20401c88 <__metal_myhart_id>:
__metal_myhart_id():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:22

uintptr_t __metal_myhart_id (void)
{
20401c88:	1101                	addi	sp,sp,-32
20401c8a:	ce22                	sw	s0,28(sp)
20401c8c:	1000                	addi	s0,sp,32
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:24
    uintptr_t myhart;
    __asm__ volatile ("csrr %0, mhartid" : "=r"(myhart));
20401c8e:	f14027f3          	csrr	a5,mhartid
20401c92:	fef42623          	sw	a5,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:25
    return myhart;
20401c96:	fec42783          	lw	a5,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:26
}
20401c9a:	853e                	mv	a0,a5
20401c9c:	4472                	lw	s0,28(sp)
20401c9e:	6105                	addi	sp,sp,32
20401ca0:	8082                	ret

20401ca2 <__metal_interrupt_global_enable>:
__metal_interrupt_global_enable():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:36
    for (ptr = base; ptr < (base + size); ptr++){
        *ptr = 0;
    }
}

void __metal_interrupt_global_enable (void) {
20401ca2:	1101                	addi	sp,sp,-32
20401ca4:	ce22                	sw	s0,28(sp)
20401ca6:	1000                	addi	s0,sp,32
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:38
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mstatus, %1" : "=r"(m) : "r"(METAL_MIE_INTERRUPT));
20401ca8:	47a1                	li	a5,8
20401caa:	3007a7f3          	csrrs	a5,mstatus,a5
20401cae:	fef42623          	sw	a5,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:39
}
20401cb2:	0001                	nop
20401cb4:	4472                	lw	s0,28(sp)
20401cb6:	6105                	addi	sp,sp,32
20401cb8:	8082                	ret

20401cba <__metal_interrupt_global_disable>:
__metal_interrupt_global_disable():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:41

void __metal_interrupt_global_disable (void) {
20401cba:	1101                	addi	sp,sp,-32
20401cbc:	ce22                	sw	s0,28(sp)
20401cbe:	1000                	addi	s0,sp,32
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:43
    uintptr_t m;
    __asm__ volatile ("csrrc %0, mstatus, %1" : "=r"(m) : "r"(METAL_MIE_INTERRUPT));
20401cc0:	47a1                	li	a5,8
20401cc2:	3007b7f3          	csrrc	a5,mstatus,a5
20401cc6:	fef42623          	sw	a5,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:44
}
20401cca:	0001                	nop
20401ccc:	4472                	lw	s0,28(sp)
20401cce:	6105                	addi	sp,sp,32
20401cd0:	8082                	ret

20401cd2 <__metal_interrupt_software_enable>:
__metal_interrupt_software_enable():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:46

void __metal_interrupt_software_enable (void) {
20401cd2:	1101                	addi	sp,sp,-32
20401cd4:	ce22                	sw	s0,28(sp)
20401cd6:	1000                	addi	s0,sp,32
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:48
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_SW));
20401cd8:	47a1                	li	a5,8
20401cda:	3047a7f3          	csrrs	a5,mie,a5
20401cde:	fef42623          	sw	a5,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:49
}
20401ce2:	0001                	nop
20401ce4:	4472                	lw	s0,28(sp)
20401ce6:	6105                	addi	sp,sp,32
20401ce8:	8082                	ret

20401cea <__metal_interrupt_software_disable>:
__metal_interrupt_software_disable():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:51

void __metal_interrupt_software_disable (void) {
20401cea:	1101                	addi	sp,sp,-32
20401cec:	ce22                	sw	s0,28(sp)
20401cee:	1000                	addi	s0,sp,32
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:53
    uintptr_t m;
    __asm__ volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_SW));
20401cf0:	47a1                	li	a5,8
20401cf2:	3047b7f3          	csrrc	a5,mie,a5
20401cf6:	fef42623          	sw	a5,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:54
}
20401cfa:	0001                	nop
20401cfc:	4472                	lw	s0,28(sp)
20401cfe:	6105                	addi	sp,sp,32
20401d00:	8082                	ret

20401d02 <__metal_interrupt_timer_enable>:
__metal_interrupt_timer_enable():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:56

void __metal_interrupt_timer_enable (void) {
20401d02:	1101                	addi	sp,sp,-32
20401d04:	ce22                	sw	s0,28(sp)
20401d06:	1000                	addi	s0,sp,32
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:58
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_TMR));
20401d08:	08000793          	li	a5,128
20401d0c:	3047a7f3          	csrrs	a5,mie,a5
20401d10:	fef42623          	sw	a5,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:59
}
20401d14:	0001                	nop
20401d16:	4472                	lw	s0,28(sp)
20401d18:	6105                	addi	sp,sp,32
20401d1a:	8082                	ret

20401d1c <__metal_interrupt_timer_disable>:
__metal_interrupt_timer_disable():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:61

void __metal_interrupt_timer_disable (void) {
20401d1c:	1101                	addi	sp,sp,-32
20401d1e:	ce22                	sw	s0,28(sp)
20401d20:	1000                	addi	s0,sp,32
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:63
    uintptr_t m;
    __asm__ volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_TMR));
20401d22:	08000793          	li	a5,128
20401d26:	3047b7f3          	csrrc	a5,mie,a5
20401d2a:	fef42623          	sw	a5,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:64
}
20401d2e:	0001                	nop
20401d30:	4472                	lw	s0,28(sp)
20401d32:	6105                	addi	sp,sp,32
20401d34:	8082                	ret

20401d36 <__metal_interrupt_external_enable>:
__metal_interrupt_external_enable():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:66

void __metal_interrupt_external_enable (void) {
20401d36:	1101                	addi	sp,sp,-32
20401d38:	ce22                	sw	s0,28(sp)
20401d3a:	1000                	addi	s0,sp,32
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:68
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_EXT));
20401d3c:	6785                	lui	a5,0x1
20401d3e:	80078793          	addi	a5,a5,-2048 # 800 <__heap_size>
20401d42:	3047a7f3          	csrrs	a5,mie,a5
20401d46:	fef42623          	sw	a5,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:69
}
20401d4a:	0001                	nop
20401d4c:	4472                	lw	s0,28(sp)
20401d4e:	6105                	addi	sp,sp,32
20401d50:	8082                	ret

20401d52 <__metal_interrupt_external_disable>:
__metal_interrupt_external_disable():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:71

void __metal_interrupt_external_disable (void) {
20401d52:	1101                	addi	sp,sp,-32
20401d54:	ce22                	sw	s0,28(sp)
20401d56:	1000                	addi	s0,sp,32
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:73
    unsigned long m;
    __asm__ volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_EXT));
20401d58:	6785                	lui	a5,0x1
20401d5a:	80078793          	addi	a5,a5,-2048 # 800 <__heap_size>
20401d5e:	3047b7f3          	csrrc	a5,mie,a5
20401d62:	fef42623          	sw	a5,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:74
}
20401d66:	0001                	nop
20401d68:	4472                	lw	s0,28(sp)
20401d6a:	6105                	addi	sp,sp,32
20401d6c:	8082                	ret

20401d6e <__metal_interrupt_local_enable>:
__metal_interrupt_local_enable():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:76

void __metal_interrupt_local_enable (int id) {
20401d6e:	7179                	addi	sp,sp,-48
20401d70:	d622                	sw	s0,44(sp)
20401d72:	1800                	addi	s0,sp,48
20401d74:	fca42e23          	sw	a0,-36(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:77
    uintptr_t b = 1 << id;
20401d78:	fdc42783          	lw	a5,-36(s0)
20401d7c:	4705                	li	a4,1
20401d7e:	00f717b3          	sll	a5,a4,a5
20401d82:	fef42623          	sw	a5,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:79
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(b));
20401d86:	fec42783          	lw	a5,-20(s0)
20401d8a:	3047a7f3          	csrrs	a5,mie,a5
20401d8e:	fef42423          	sw	a5,-24(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:80
}
20401d92:	0001                	nop
20401d94:	5432                	lw	s0,44(sp)
20401d96:	6145                	addi	sp,sp,48
20401d98:	8082                	ret

20401d9a <__metal_interrupt_local_disable>:
__metal_interrupt_local_disable():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:82

void __metal_interrupt_local_disable (int id) {
20401d9a:	7179                	addi	sp,sp,-48
20401d9c:	d622                	sw	s0,44(sp)
20401d9e:	1800                	addi	s0,sp,48
20401da0:	fca42e23          	sw	a0,-36(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:83
    uintptr_t b = 1 << id;
20401da4:	fdc42783          	lw	a5,-36(s0)
20401da8:	4705                	li	a4,1
20401daa:	00f717b3          	sll	a5,a4,a5
20401dae:	fef42623          	sw	a5,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:85
    uintptr_t m;
    __asm__ volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(b));
20401db2:	fec42783          	lw	a5,-20(s0)
20401db6:	3047b7f3          	csrrc	a5,mie,a5
20401dba:	fef42423          	sw	a5,-24(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:86
}
20401dbe:	0001                	nop
20401dc0:	5432                	lw	s0,44(sp)
20401dc2:	6145                	addi	sp,sp,48
20401dc4:	8082                	ret

20401dc6 <__metal_default_exception_handler>:
__metal_default_exception_handler():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:88

void __metal_default_exception_handler (struct metal_cpu *cpu, int ecode) {
20401dc6:	1101                	addi	sp,sp,-32
20401dc8:	ce06                	sw	ra,28(sp)
20401dca:	cc22                	sw	s0,24(sp)
20401dcc:	1000                	addi	s0,sp,32
20401dce:	fea42623          	sw	a0,-20(s0)
20401dd2:	feb42423          	sw	a1,-24(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:89
    metal_shutdown(100);
20401dd6:	06400513          	li	a0,100
20401dda:	0df030ef          	jal	ra,204056b8 <metal_shutdown>

20401dde <__metal_default_interrupt_handler>:
__metal_default_interrupt_handler():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:92
}

void __metal_default_interrupt_handler (int id, void *priv) {
20401dde:	1101                	addi	sp,sp,-32
20401de0:	ce06                	sw	ra,28(sp)
20401de2:	cc22                	sw	s0,24(sp)
20401de4:	1000                	addi	s0,sp,32
20401de6:	fea42623          	sw	a0,-20(s0)
20401dea:	feb42423          	sw	a1,-24(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:93
    metal_shutdown(200);
20401dee:	0c800513          	li	a0,200
20401df2:	0c7030ef          	jal	ra,204056b8 <metal_shutdown>

20401df6 <metal_interrupt_vector_handler>:
metal_interrupt_vector_handler():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:97
}

/* The metal_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_interrupt_vector_handler (void) {
20401df6:	715d                	addi	sp,sp,-80
20401df8:	c686                	sw	ra,76(sp)
20401dfa:	c496                	sw	t0,72(sp)
20401dfc:	c29a                	sw	t1,68(sp)
20401dfe:	c09e                	sw	t2,64(sp)
20401e00:	de22                	sw	s0,60(sp)
20401e02:	dc2a                	sw	a0,56(sp)
20401e04:	da2e                	sw	a1,52(sp)
20401e06:	d832                	sw	a2,48(sp)
20401e08:	d636                	sw	a3,44(sp)
20401e0a:	d43a                	sw	a4,40(sp)
20401e0c:	d23e                	sw	a5,36(sp)
20401e0e:	d042                	sw	a6,32(sp)
20401e10:	ce46                	sw	a7,28(sp)
20401e12:	cc72                	sw	t3,24(sp)
20401e14:	ca76                	sw	t4,20(sp)
20401e16:	c87a                	sw	t5,16(sp)
20401e18:	c67e                	sw	t6,12(sp)
20401e1a:	0880                	addi	s0,sp,80
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:98
    metal_shutdown(300);
20401e1c:	12c00513          	li	a0,300
20401e20:	099030ef          	jal	ra,204056b8 <metal_shutdown>

20401e24 <metal_software_interrupt_vector_handler>:
metal_software_interrupt_vector_handler():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:102
}

/* The metal_software_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_software_interrupt_vector_handler (void) {
20401e24:	711d                	addi	sp,sp,-96
20401e26:	ce86                	sw	ra,92(sp)
20401e28:	cc96                	sw	t0,88(sp)
20401e2a:	ca9a                	sw	t1,84(sp)
20401e2c:	c89e                	sw	t2,80(sp)
20401e2e:	c6a2                	sw	s0,76(sp)
20401e30:	c4aa                	sw	a0,72(sp)
20401e32:	c2ae                	sw	a1,68(sp)
20401e34:	c0b2                	sw	a2,64(sp)
20401e36:	de36                	sw	a3,60(sp)
20401e38:	dc3a                	sw	a4,56(sp)
20401e3a:	da3e                	sw	a5,52(sp)
20401e3c:	d842                	sw	a6,48(sp)
20401e3e:	d646                	sw	a7,44(sp)
20401e40:	d472                	sw	t3,40(sp)
20401e42:	d276                	sw	t4,36(sp)
20401e44:	d07a                	sw	t5,32(sp)
20401e46:	ce7e                	sw	t6,28(sp)
20401e48:	1080                	addi	s0,sp,96
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:105
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20401e4a:	3d3d                	jal	20401c88 <__metal_myhart_id>
20401e4c:	872a                	mv	a4,a0
20401e4e:	800007b7          	lui	a5,0x80000
20401e52:	070a                	slli	a4,a4,0x2
20401e54:	79878793          	addi	a5,a5,1944 # 80000798 <metal_segment_heap_target_end+0xfffff300>
20401e58:	97ba                	add	a5,a5,a4
20401e5a:	439c                	lw	a5,0(a5)
20401e5c:	faf42623          	sw	a5,-84(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:107

    if ( cpu ) {
20401e60:	fac42783          	lw	a5,-84(s0)
20401e64:	c785                	beqz	a5,20401e8c <metal_software_interrupt_vector_handler+0x68>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:109
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20401e66:	fac42503          	lw	a0,-84(s0)
20401e6a:	33d1                	jal	20401c2e <__metal_driver_cpu_interrupt_controller>
20401e6c:	faa42423          	sw	a0,-88(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:110
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_SW].exint_data;
20401e70:	fa842783          	lw	a5,-88(s0)
20401e74:	0e07a783          	lw	a5,224(a5)
20401e78:	faf42223          	sw	a5,-92(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:111
        intc->metal_int_table[METAL_INTERRUPT_ID_SW].handler(METAL_INTERRUPT_ID_SW, priv);
20401e7c:	fa842783          	lw	a5,-88(s0)
20401e80:	0d87a783          	lw	a5,216(a5)
20401e84:	fa442583          	lw	a1,-92(s0)
20401e88:	450d                	li	a0,3
20401e8a:	9782                	jalr	a5
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:113
    }
}
20401e8c:	0001                	nop
20401e8e:	40f6                	lw	ra,92(sp)
20401e90:	42e6                	lw	t0,88(sp)
20401e92:	4356                	lw	t1,84(sp)
20401e94:	43c6                	lw	t2,80(sp)
20401e96:	4436                	lw	s0,76(sp)
20401e98:	4526                	lw	a0,72(sp)
20401e9a:	4596                	lw	a1,68(sp)
20401e9c:	4606                	lw	a2,64(sp)
20401e9e:	56f2                	lw	a3,60(sp)
20401ea0:	5762                	lw	a4,56(sp)
20401ea2:	57d2                	lw	a5,52(sp)
20401ea4:	5842                	lw	a6,48(sp)
20401ea6:	58b2                	lw	a7,44(sp)
20401ea8:	5e22                	lw	t3,40(sp)
20401eaa:	5e92                	lw	t4,36(sp)
20401eac:	5f02                	lw	t5,32(sp)
20401eae:	4ff2                	lw	t6,28(sp)
20401eb0:	6125                	addi	sp,sp,96
20401eb2:	30200073          	mret

20401eb6 <__metal_default_sw_handler>:
__metal_default_sw_handler():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:115

void __metal_default_sw_handler (int id, void *priv) {
20401eb6:	7179                	addi	sp,sp,-48
20401eb8:	d606                	sw	ra,44(sp)
20401eba:	d422                	sw	s0,40(sp)
20401ebc:	1800                	addi	s0,sp,48
20401ebe:	fca42e23          	sw	a0,-36(s0)
20401ec2:	fcb42c23          	sw	a1,-40(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:118
    uintptr_t mcause;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20401ec6:	33c9                	jal	20401c88 <__metal_myhart_id>
20401ec8:	872a                	mv	a4,a0
20401eca:	800007b7          	lui	a5,0x80000
20401ece:	070a                	slli	a4,a4,0x2
20401ed0:	79878793          	addi	a5,a5,1944 # 80000798 <metal_segment_heap_target_end+0xfffff300>
20401ed4:	97ba                	add	a5,a5,a4
20401ed6:	439c                	lw	a5,0(a5)
20401ed8:	fef42623          	sw	a5,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:120

    __asm__ volatile ("csrr %0, mcause" : "=r"(mcause));
20401edc:	342027f3          	csrr	a5,mcause
20401ee0:	fef42423          	sw	a5,-24(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:121
    if ( cpu ) {
20401ee4:	fec42783          	lw	a5,-20(s0)
20401ee8:	c795                	beqz	a5,20401f14 <__metal_default_sw_handler+0x5e>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:123
        intc = (struct __metal_driver_riscv_cpu_intc *)
	  __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20401eea:	fec42503          	lw	a0,-20(s0)
20401eee:	3381                	jal	20401c2e <__metal_driver_cpu_interrupt_controller>
20401ef0:	fea42223          	sw	a0,-28(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:124
        intc->metal_exception_table[mcause & METAL_MCAUSE_CAUSE]((struct metal_cpu *)cpu, id);
20401ef4:	fe842783          	lw	a5,-24(s0)
20401ef8:	3ff7f793          	andi	a5,a5,1023
20401efc:	fe442703          	lw	a4,-28(s0)
20401f00:	0e078793          	addi	a5,a5,224
20401f04:	078a                	slli	a5,a5,0x2
20401f06:	97ba                	add	a5,a5,a4
20401f08:	479c                	lw	a5,8(a5)
20401f0a:	fdc42583          	lw	a1,-36(s0)
20401f0e:	fec42503          	lw	a0,-20(s0)
20401f12:	9782                	jalr	a5
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:126
    }
}
20401f14:	0001                	nop
20401f16:	50b2                	lw	ra,44(sp)
20401f18:	5422                	lw	s0,40(sp)
20401f1a:	6145                	addi	sp,sp,48
20401f1c:	8082                	ret

20401f1e <metal_timer_interrupt_vector_handler>:
metal_timer_interrupt_vector_handler():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:129

/* The metal_timer_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_timer_interrupt_vector_handler (void) {
20401f1e:	711d                	addi	sp,sp,-96
20401f20:	ce86                	sw	ra,92(sp)
20401f22:	cc96                	sw	t0,88(sp)
20401f24:	ca9a                	sw	t1,84(sp)
20401f26:	c89e                	sw	t2,80(sp)
20401f28:	c6a2                	sw	s0,76(sp)
20401f2a:	c4aa                	sw	a0,72(sp)
20401f2c:	c2ae                	sw	a1,68(sp)
20401f2e:	c0b2                	sw	a2,64(sp)
20401f30:	de36                	sw	a3,60(sp)
20401f32:	dc3a                	sw	a4,56(sp)
20401f34:	da3e                	sw	a5,52(sp)
20401f36:	d842                	sw	a6,48(sp)
20401f38:	d646                	sw	a7,44(sp)
20401f3a:	d472                	sw	t3,40(sp)
20401f3c:	d276                	sw	t4,36(sp)
20401f3e:	d07a                	sw	t5,32(sp)
20401f40:	ce7e                	sw	t6,28(sp)
20401f42:	1080                	addi	s0,sp,96
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:132
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20401f44:	3391                	jal	20401c88 <__metal_myhart_id>
20401f46:	872a                	mv	a4,a0
20401f48:	800007b7          	lui	a5,0x80000
20401f4c:	070a                	slli	a4,a4,0x2
20401f4e:	79878793          	addi	a5,a5,1944 # 80000798 <metal_segment_heap_target_end+0xfffff300>
20401f52:	97ba                	add	a5,a5,a4
20401f54:	439c                	lw	a5,0(a5)
20401f56:	faf42623          	sw	a5,-84(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:134

    if ( cpu ) {
20401f5a:	fac42783          	lw	a5,-84(s0)
20401f5e:	c785                	beqz	a5,20401f86 <metal_timer_interrupt_vector_handler+0x68>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:136
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20401f60:	fac42503          	lw	a0,-84(s0)
20401f64:	31e9                	jal	20401c2e <__metal_driver_cpu_interrupt_controller>
20401f66:	faa42423          	sw	a0,-88(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:137
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_TMR].exint_data;
20401f6a:	fa842783          	lw	a5,-88(s0)
20401f6e:	1407a783          	lw	a5,320(a5)
20401f72:	faf42223          	sw	a5,-92(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:138
        intc->metal_int_table[METAL_INTERRUPT_ID_TMR].handler(METAL_INTERRUPT_ID_TMR, priv);
20401f76:	fa842783          	lw	a5,-88(s0)
20401f7a:	1387a783          	lw	a5,312(a5)
20401f7e:	fa442583          	lw	a1,-92(s0)
20401f82:	451d                	li	a0,7
20401f84:	9782                	jalr	a5
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:140
    }
}
20401f86:	0001                	nop
20401f88:	40f6                	lw	ra,92(sp)
20401f8a:	42e6                	lw	t0,88(sp)
20401f8c:	4356                	lw	t1,84(sp)
20401f8e:	43c6                	lw	t2,80(sp)
20401f90:	4436                	lw	s0,76(sp)
20401f92:	4526                	lw	a0,72(sp)
20401f94:	4596                	lw	a1,68(sp)
20401f96:	4606                	lw	a2,64(sp)
20401f98:	56f2                	lw	a3,60(sp)
20401f9a:	5762                	lw	a4,56(sp)
20401f9c:	57d2                	lw	a5,52(sp)
20401f9e:	5842                	lw	a6,48(sp)
20401fa0:	58b2                	lw	a7,44(sp)
20401fa2:	5e22                	lw	t3,40(sp)
20401fa4:	5e92                	lw	t4,36(sp)
20401fa6:	5f02                	lw	t5,32(sp)
20401fa8:	4ff2                	lw	t6,28(sp)
20401faa:	6125                	addi	sp,sp,96
20401fac:	30200073          	mret

20401fb0 <__metal_default_timer_handler>:
__metal_default_timer_handler():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:142

void __metal_default_timer_handler (int id, void *priv) {
20401fb0:	7179                	addi	sp,sp,-48
20401fb2:	d606                	sw	ra,44(sp)
20401fb4:	d422                	sw	s0,40(sp)
20401fb6:	1800                	addi	s0,sp,48
20401fb8:	fca42e23          	sw	a0,-36(s0)
20401fbc:	fcb42c23          	sw	a1,-40(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:143
    struct metal_cpu *cpu = __metal_driver_cpu_get(__metal_myhart_id());
20401fc0:	31e1                	jal	20401c88 <__metal_myhart_id>
20401fc2:	87aa                	mv	a5,a0
20401fc4:	853e                	mv	a0,a5
20401fc6:	3949                	jal	20401c58 <__metal_driver_cpu_get>
20401fc8:	fea42623          	sw	a0,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:144
    unsigned long long time = __metal_driver_cpu_mtime_get(cpu);
20401fcc:	fec42503          	lw	a0,-20(s0)
20401fd0:	1e4010ef          	jal	ra,204031b4 <__metal_driver_cpu_mtime_get>
20401fd4:	fea42023          	sw	a0,-32(s0)
20401fd8:	feb42223          	sw	a1,-28(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:147

    /* Set a 10 cycle timer */
    __metal_driver_cpu_mtimecmp_set(cpu, time + 10);
20401fdc:	fe042783          	lw	a5,-32(s0)
20401fe0:	fe442803          	lw	a6,-28(s0)
20401fe4:	45a9                	li	a1,10
20401fe6:	4601                	li	a2,0
20401fe8:	00b786b3          	add	a3,a5,a1
20401fec:	8536                	mv	a0,a3
20401fee:	00f53533          	sltu	a0,a0,a5
20401ff2:	00c80733          	add	a4,a6,a2
20401ff6:	00e507b3          	add	a5,a0,a4
20401ffa:	873e                	mv	a4,a5
20401ffc:	87b6                	mv	a5,a3
20401ffe:	883a                	mv	a6,a4
20402000:	85be                	mv	a1,a5
20402002:	8642                	mv	a2,a6
20402004:	fec42503          	lw	a0,-20(s0)
20402008:	212010ef          	jal	ra,2040321a <__metal_driver_cpu_mtimecmp_set>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:148
}
2040200c:	0001                	nop
2040200e:	50b2                	lw	ra,44(sp)
20402010:	5422                	lw	s0,40(sp)
20402012:	6145                	addi	sp,sp,48
20402014:	8082                	ret
	...

20402080 <__metal_exception_handler>:
__metal_exception_handler():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:165
        intc->metal_int_table[METAL_INTERRUPT_ID_EXT].handler(METAL_INTERRUPT_ID_EXT, priv);
    }
}

void __metal_exception_handler(void) __attribute__((interrupt, aligned(128)));
void __metal_exception_handler (void) {
20402080:	7119                	addi	sp,sp,-128
20402082:	de86                	sw	ra,124(sp)
20402084:	dc96                	sw	t0,120(sp)
20402086:	da9a                	sw	t1,116(sp)
20402088:	d89e                	sw	t2,112(sp)
2040208a:	d6a2                	sw	s0,108(sp)
2040208c:	d4aa                	sw	a0,104(sp)
2040208e:	d2ae                	sw	a1,100(sp)
20402090:	d0b2                	sw	a2,96(sp)
20402092:	ceb6                	sw	a3,92(sp)
20402094:	ccba                	sw	a4,88(sp)
20402096:	cabe                	sw	a5,84(sp)
20402098:	c8c2                	sw	a6,80(sp)
2040209a:	c6c6                	sw	a7,76(sp)
2040209c:	c4f2                	sw	t3,72(sp)
2040209e:	c2f6                	sw	t4,68(sp)
204020a0:	c0fa                	sw	t5,64(sp)
204020a2:	de7e                	sw	t6,60(sp)
204020a4:	0100                	addi	s0,sp,128
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:170
    int id;
    void *priv;
    uintptr_t mcause, mepc, mtval, mtvec;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
204020a6:	be3ff0ef          	jal	ra,20401c88 <__metal_myhart_id>
204020aa:	872a                	mv	a4,a0
204020ac:	800007b7          	lui	a5,0x80000
204020b0:	070a                	slli	a4,a4,0x2
204020b2:	79878793          	addi	a5,a5,1944 # 80000798 <metal_segment_heap_target_end+0xfffff300>
204020b6:	97ba                	add	a5,a5,a4
204020b8:	439c                	lw	a5,0(a5)
204020ba:	faf42623          	sw	a5,-84(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:172

    __asm__ volatile ("csrr %0, mcause" : "=r"(mcause));
204020be:	342027f3          	csrr	a5,mcause
204020c2:	faf42423          	sw	a5,-88(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:173
    __asm__ volatile ("csrr %0, mepc" : "=r"(mepc));
204020c6:	341027f3          	csrr	a5,mepc
204020ca:	faf42223          	sw	a5,-92(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:174
    __asm__ volatile ("csrr %0, mtval" : "=r"(mtval));
204020ce:	343027f3          	csrr	a5,mtval
204020d2:	faf42023          	sw	a5,-96(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:175
    __asm__ volatile ("csrr %0, mtvec" : "=r"(mtvec));
204020d6:	305027f3          	csrr	a5,mtvec
204020da:	f8f42e23          	sw	a5,-100(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:177

    if ( cpu ) {
204020de:	fac42783          	lw	a5,-84(s0)
204020e2:	c7e9                	beqz	a5,204021ac <__metal_exception_handler+0x12c>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:179
        intc = (struct __metal_driver_riscv_cpu_intc *)
	  __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
204020e4:	fac42503          	lw	a0,-84(s0)
204020e8:	b47ff0ef          	jal	ra,20401c2e <__metal_driver_cpu_interrupt_controller>
204020ec:	f8a42c23          	sw	a0,-104(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:180
        id = mcause & METAL_MCAUSE_CAUSE;
204020f0:	fa842783          	lw	a5,-88(s0)
204020f4:	3ff7f793          	andi	a5,a5,1023
204020f8:	f8f42a23          	sw	a5,-108(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:181
        if (mcause & METAL_MCAUSE_INTR) {
204020fc:	fa842783          	lw	a5,-88(s0)
20402100:	0807d863          	bgez	a5,20402190 <__metal_exception_handler+0x110>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:182
            if ((id < METAL_INTERRUPT_ID_CSW) ||
20402104:	f9442703          	lw	a4,-108(s0)
20402108:	47ad                	li	a5,11
2040210a:	00e7d763          	bge	a5,a4,20402118 <__metal_exception_handler+0x98>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:183 (discriminator 1)
               ((mtvec & METAL_MTVEC_MASK) == METAL_MTVEC_DIRECT)) {
2040210e:	f9c42783          	lw	a5,-100(s0)
20402112:	03f7f793          	andi	a5,a5,63
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:182 (discriminator 1)
            if ((id < METAL_INTERRUPT_ID_CSW) ||
20402116:	ef9d                	bnez	a5,20402154 <__metal_exception_handler+0xd4>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:184
                priv = intc->metal_int_table[id].exint_data;
20402118:	f9842683          	lw	a3,-104(s0)
2040211c:	f9442703          	lw	a4,-108(s0)
20402120:	87ba                	mv	a5,a4
20402122:	0786                	slli	a5,a5,0x1
20402124:	97ba                	add	a5,a5,a4
20402126:	078e                	slli	a5,a5,0x3
20402128:	97b6                	add	a5,a5,a3
2040212a:	0987a783          	lw	a5,152(a5)
2040212e:	f8f42623          	sw	a5,-116(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:185
                intc->metal_int_table[id].handler(id, priv);
20402132:	f9842683          	lw	a3,-104(s0)
20402136:	f9442703          	lw	a4,-108(s0)
2040213a:	87ba                	mv	a5,a4
2040213c:	0786                	slli	a5,a5,0x1
2040213e:	97ba                	add	a5,a5,a4
20402140:	078e                	slli	a5,a5,0x3
20402142:	97b6                	add	a5,a5,a3
20402144:	0907a783          	lw	a5,144(a5)
20402148:	f8c42583          	lw	a1,-116(s0)
2040214c:	f9442503          	lw	a0,-108(s0)
20402150:	9782                	jalr	a5
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:186
		return;
20402152:	a8a9                	j	204021ac <__metal_exception_handler+0x12c>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:188
            }
            if ((mtvec & METAL_MTVEC_MASK) == METAL_MTVEC_CLIC) {
20402154:	f9c42783          	lw	a5,-100(s0)
20402158:	03f7f713          	andi	a4,a5,63
2040215c:	4789                	li	a5,2
2040215e:	04f71763          	bne	a4,a5,204021ac <__metal_exception_handler+0x12c>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:192
    		uintptr_t mtvt;
    		metal_interrupt_handler_t mtvt_handler;

                __asm__ volatile ("csrr %0, 0x307" : "=r"(mtvt));
20402162:	307027f3          	csrr	a5,mtvt
20402166:	f8f42823          	sw	a5,-112(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:193
               	priv = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
2040216a:	f9842783          	lw	a5,-104(s0)
2040216e:	0dc7a783          	lw	a5,220(a5)
20402172:	f8f42623          	sw	a5,-116(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:194
               	mtvt_handler = (metal_interrupt_handler_t)*(uintptr_t *)mtvt;
20402176:	f9042783          	lw	a5,-112(s0)
2040217a:	439c                	lw	a5,0(a5)
2040217c:	f8f42423          	sw	a5,-120(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:195
               	mtvt_handler(id, priv);
20402180:	f8842783          	lw	a5,-120(s0)
20402184:	f8c42583          	lw	a1,-116(s0)
20402188:	f9442503          	lw	a0,-108(s0)
2040218c:	9782                	jalr	a5
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:196
		return;
2040218e:	a839                	j	204021ac <__metal_exception_handler+0x12c>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:199
            }
        } else {
            intc->metal_exception_table[id]((struct metal_cpu *)cpu, id);
20402190:	f9842703          	lw	a4,-104(s0)
20402194:	f9442783          	lw	a5,-108(s0)
20402198:	0e078793          	addi	a5,a5,224
2040219c:	078a                	slli	a5,a5,0x2
2040219e:	97ba                	add	a5,a5,a4
204021a0:	479c                	lw	a5,8(a5)
204021a2:	f9442583          	lw	a1,-108(s0)
204021a6:	fac42503          	lw	a0,-84(s0)
204021aa:	9782                	jalr	a5
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:202
        }
    }
}
204021ac:	50f6                	lw	ra,124(sp)
204021ae:	52e6                	lw	t0,120(sp)
204021b0:	5356                	lw	t1,116(sp)
204021b2:	53c6                	lw	t2,112(sp)
204021b4:	5436                	lw	s0,108(sp)
204021b6:	5526                	lw	a0,104(sp)
204021b8:	5596                	lw	a1,100(sp)
204021ba:	5606                	lw	a2,96(sp)
204021bc:	46f6                	lw	a3,92(sp)
204021be:	4766                	lw	a4,88(sp)
204021c0:	47d6                	lw	a5,84(sp)
204021c2:	4846                	lw	a6,80(sp)
204021c4:	48b6                	lw	a7,76(sp)
204021c6:	4e26                	lw	t3,72(sp)
204021c8:	4e96                	lw	t4,68(sp)
204021ca:	4f06                	lw	t5,64(sp)
204021cc:	5ff2                	lw	t6,60(sp)
204021ce:	6109                	addi	sp,sp,128
204021d0:	30200073          	mret
	...

204021fa <metal_lc0_interrupt_vector_handler>:
metal_lc0_interrupt_vector_handler():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:205

/* The metal_lc0_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc0_interrupt_vector_handler (void) {
204021fa:	711d                	addi	sp,sp,-96
204021fc:	ce86                	sw	ra,92(sp)
204021fe:	cc96                	sw	t0,88(sp)
20402200:	ca9a                	sw	t1,84(sp)
20402202:	c89e                	sw	t2,80(sp)
20402204:	c6a2                	sw	s0,76(sp)
20402206:	c4aa                	sw	a0,72(sp)
20402208:	c2ae                	sw	a1,68(sp)
2040220a:	c0b2                	sw	a2,64(sp)
2040220c:	de36                	sw	a3,60(sp)
2040220e:	dc3a                	sw	a4,56(sp)
20402210:	da3e                	sw	a5,52(sp)
20402212:	d842                	sw	a6,48(sp)
20402214:	d646                	sw	a7,44(sp)
20402216:	d472                	sw	t3,40(sp)
20402218:	d276                	sw	t4,36(sp)
2040221a:	d07a                	sw	t5,32(sp)
2040221c:	ce7e                	sw	t6,28(sp)
2040221e:	1080                	addi	s0,sp,96
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:208
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402220:	a69ff0ef          	jal	ra,20401c88 <__metal_myhart_id>
20402224:	872a                	mv	a4,a0
20402226:	800007b7          	lui	a5,0x80000
2040222a:	070a                	slli	a4,a4,0x2
2040222c:	79878793          	addi	a5,a5,1944 # 80000798 <metal_segment_heap_target_end+0xfffff300>
20402230:	97ba                	add	a5,a5,a4
20402232:	439c                	lw	a5,0(a5)
20402234:	faf42623          	sw	a5,-84(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:210

    if ( cpu ) {
20402238:	fac42783          	lw	a5,-84(s0)
2040223c:	c78d                	beqz	a5,20402266 <metal_lc0_interrupt_vector_handler+0x6c>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:212
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
2040223e:	fac42503          	lw	a0,-84(s0)
20402242:	9edff0ef          	jal	ra,20401c2e <__metal_driver_cpu_interrupt_controller>
20402246:	faa42423          	sw	a0,-88(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:213
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC0].exint_data;
2040224a:	fa842783          	lw	a5,-88(s0)
2040224e:	2187a783          	lw	a5,536(a5)
20402252:	faf42223          	sw	a5,-92(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:214
        intc->metal_int_table[METAL_INTERRUPT_ID_LC0].handler(METAL_INTERRUPT_ID_LC0, priv);
20402256:	fa842783          	lw	a5,-88(s0)
2040225a:	2107a783          	lw	a5,528(a5)
2040225e:	fa442583          	lw	a1,-92(s0)
20402262:	4541                	li	a0,16
20402264:	9782                	jalr	a5
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:216
    }
}
20402266:	0001                	nop
20402268:	40f6                	lw	ra,92(sp)
2040226a:	42e6                	lw	t0,88(sp)
2040226c:	4356                	lw	t1,84(sp)
2040226e:	43c6                	lw	t2,80(sp)
20402270:	4436                	lw	s0,76(sp)
20402272:	4526                	lw	a0,72(sp)
20402274:	4596                	lw	a1,68(sp)
20402276:	4606                	lw	a2,64(sp)
20402278:	56f2                	lw	a3,60(sp)
2040227a:	5762                	lw	a4,56(sp)
2040227c:	57d2                	lw	a5,52(sp)
2040227e:	5842                	lw	a6,48(sp)
20402280:	58b2                	lw	a7,44(sp)
20402282:	5e22                	lw	t3,40(sp)
20402284:	5e92                	lw	t4,36(sp)
20402286:	5f02                	lw	t5,32(sp)
20402288:	4ff2                	lw	t6,28(sp)
2040228a:	6125                	addi	sp,sp,96
2040228c:	30200073          	mret

20402290 <metal_lc1_interrupt_vector_handler>:
metal_lc1_interrupt_vector_handler():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:219

/* The metal_lc1_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc1_interrupt_vector_handler (void) {
20402290:	711d                	addi	sp,sp,-96
20402292:	ce86                	sw	ra,92(sp)
20402294:	cc96                	sw	t0,88(sp)
20402296:	ca9a                	sw	t1,84(sp)
20402298:	c89e                	sw	t2,80(sp)
2040229a:	c6a2                	sw	s0,76(sp)
2040229c:	c4aa                	sw	a0,72(sp)
2040229e:	c2ae                	sw	a1,68(sp)
204022a0:	c0b2                	sw	a2,64(sp)
204022a2:	de36                	sw	a3,60(sp)
204022a4:	dc3a                	sw	a4,56(sp)
204022a6:	da3e                	sw	a5,52(sp)
204022a8:	d842                	sw	a6,48(sp)
204022aa:	d646                	sw	a7,44(sp)
204022ac:	d472                	sw	t3,40(sp)
204022ae:	d276                	sw	t4,36(sp)
204022b0:	d07a                	sw	t5,32(sp)
204022b2:	ce7e                	sw	t6,28(sp)
204022b4:	1080                	addi	s0,sp,96
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:222
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
204022b6:	9d3ff0ef          	jal	ra,20401c88 <__metal_myhart_id>
204022ba:	872a                	mv	a4,a0
204022bc:	800007b7          	lui	a5,0x80000
204022c0:	070a                	slli	a4,a4,0x2
204022c2:	79878793          	addi	a5,a5,1944 # 80000798 <metal_segment_heap_target_end+0xfffff300>
204022c6:	97ba                	add	a5,a5,a4
204022c8:	439c                	lw	a5,0(a5)
204022ca:	faf42623          	sw	a5,-84(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:224

    if ( cpu ) {
204022ce:	fac42783          	lw	a5,-84(s0)
204022d2:	c78d                	beqz	a5,204022fc <metal_lc1_interrupt_vector_handler+0x6c>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:226
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
204022d4:	fac42503          	lw	a0,-84(s0)
204022d8:	957ff0ef          	jal	ra,20401c2e <__metal_driver_cpu_interrupt_controller>
204022dc:	faa42423          	sw	a0,-88(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:227
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC1].exint_data;
204022e0:	fa842783          	lw	a5,-88(s0)
204022e4:	2307a783          	lw	a5,560(a5)
204022e8:	faf42223          	sw	a5,-92(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:228
        intc->metal_int_table[METAL_INTERRUPT_ID_LC1].handler(METAL_INTERRUPT_ID_LC1, priv);
204022ec:	fa842783          	lw	a5,-88(s0)
204022f0:	2287a783          	lw	a5,552(a5)
204022f4:	fa442583          	lw	a1,-92(s0)
204022f8:	4545                	li	a0,17
204022fa:	9782                	jalr	a5
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:230
    }
}
204022fc:	0001                	nop
204022fe:	40f6                	lw	ra,92(sp)
20402300:	42e6                	lw	t0,88(sp)
20402302:	4356                	lw	t1,84(sp)
20402304:	43c6                	lw	t2,80(sp)
20402306:	4436                	lw	s0,76(sp)
20402308:	4526                	lw	a0,72(sp)
2040230a:	4596                	lw	a1,68(sp)
2040230c:	4606                	lw	a2,64(sp)
2040230e:	56f2                	lw	a3,60(sp)
20402310:	5762                	lw	a4,56(sp)
20402312:	57d2                	lw	a5,52(sp)
20402314:	5842                	lw	a6,48(sp)
20402316:	58b2                	lw	a7,44(sp)
20402318:	5e22                	lw	t3,40(sp)
2040231a:	5e92                	lw	t4,36(sp)
2040231c:	5f02                	lw	t5,32(sp)
2040231e:	4ff2                	lw	t6,28(sp)
20402320:	6125                	addi	sp,sp,96
20402322:	30200073          	mret

20402326 <metal_lc2_interrupt_vector_handler>:
metal_lc2_interrupt_vector_handler():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:233

/* The metal_lc2_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc2_interrupt_vector_handler (void) {
20402326:	711d                	addi	sp,sp,-96
20402328:	ce86                	sw	ra,92(sp)
2040232a:	cc96                	sw	t0,88(sp)
2040232c:	ca9a                	sw	t1,84(sp)
2040232e:	c89e                	sw	t2,80(sp)
20402330:	c6a2                	sw	s0,76(sp)
20402332:	c4aa                	sw	a0,72(sp)
20402334:	c2ae                	sw	a1,68(sp)
20402336:	c0b2                	sw	a2,64(sp)
20402338:	de36                	sw	a3,60(sp)
2040233a:	dc3a                	sw	a4,56(sp)
2040233c:	da3e                	sw	a5,52(sp)
2040233e:	d842                	sw	a6,48(sp)
20402340:	d646                	sw	a7,44(sp)
20402342:	d472                	sw	t3,40(sp)
20402344:	d276                	sw	t4,36(sp)
20402346:	d07a                	sw	t5,32(sp)
20402348:	ce7e                	sw	t6,28(sp)
2040234a:	1080                	addi	s0,sp,96
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:236
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
2040234c:	93dff0ef          	jal	ra,20401c88 <__metal_myhart_id>
20402350:	872a                	mv	a4,a0
20402352:	800007b7          	lui	a5,0x80000
20402356:	070a                	slli	a4,a4,0x2
20402358:	79878793          	addi	a5,a5,1944 # 80000798 <metal_segment_heap_target_end+0xfffff300>
2040235c:	97ba                	add	a5,a5,a4
2040235e:	439c                	lw	a5,0(a5)
20402360:	faf42623          	sw	a5,-84(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:238

    if ( cpu ) {
20402364:	fac42783          	lw	a5,-84(s0)
20402368:	c78d                	beqz	a5,20402392 <metal_lc2_interrupt_vector_handler+0x6c>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:240
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
2040236a:	fac42503          	lw	a0,-84(s0)
2040236e:	8c1ff0ef          	jal	ra,20401c2e <__metal_driver_cpu_interrupt_controller>
20402372:	faa42423          	sw	a0,-88(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:241
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC2].exint_data;
20402376:	fa842783          	lw	a5,-88(s0)
2040237a:	2487a783          	lw	a5,584(a5)
2040237e:	faf42223          	sw	a5,-92(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:242
        intc->metal_int_table[METAL_INTERRUPT_ID_LC2].handler(METAL_INTERRUPT_ID_LC2, priv);
20402382:	fa842783          	lw	a5,-88(s0)
20402386:	2407a783          	lw	a5,576(a5)
2040238a:	fa442583          	lw	a1,-92(s0)
2040238e:	4549                	li	a0,18
20402390:	9782                	jalr	a5
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:244
    }
}
20402392:	0001                	nop
20402394:	40f6                	lw	ra,92(sp)
20402396:	42e6                	lw	t0,88(sp)
20402398:	4356                	lw	t1,84(sp)
2040239a:	43c6                	lw	t2,80(sp)
2040239c:	4436                	lw	s0,76(sp)
2040239e:	4526                	lw	a0,72(sp)
204023a0:	4596                	lw	a1,68(sp)
204023a2:	4606                	lw	a2,64(sp)
204023a4:	56f2                	lw	a3,60(sp)
204023a6:	5762                	lw	a4,56(sp)
204023a8:	57d2                	lw	a5,52(sp)
204023aa:	5842                	lw	a6,48(sp)
204023ac:	58b2                	lw	a7,44(sp)
204023ae:	5e22                	lw	t3,40(sp)
204023b0:	5e92                	lw	t4,36(sp)
204023b2:	5f02                	lw	t5,32(sp)
204023b4:	4ff2                	lw	t6,28(sp)
204023b6:	6125                	addi	sp,sp,96
204023b8:	30200073          	mret

204023bc <metal_lc3_interrupt_vector_handler>:
metal_lc3_interrupt_vector_handler():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:247

/* The metal_lc3_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc3_interrupt_vector_handler (void) {
204023bc:	711d                	addi	sp,sp,-96
204023be:	ce86                	sw	ra,92(sp)
204023c0:	cc96                	sw	t0,88(sp)
204023c2:	ca9a                	sw	t1,84(sp)
204023c4:	c89e                	sw	t2,80(sp)
204023c6:	c6a2                	sw	s0,76(sp)
204023c8:	c4aa                	sw	a0,72(sp)
204023ca:	c2ae                	sw	a1,68(sp)
204023cc:	c0b2                	sw	a2,64(sp)
204023ce:	de36                	sw	a3,60(sp)
204023d0:	dc3a                	sw	a4,56(sp)
204023d2:	da3e                	sw	a5,52(sp)
204023d4:	d842                	sw	a6,48(sp)
204023d6:	d646                	sw	a7,44(sp)
204023d8:	d472                	sw	t3,40(sp)
204023da:	d276                	sw	t4,36(sp)
204023dc:	d07a                	sw	t5,32(sp)
204023de:	ce7e                	sw	t6,28(sp)
204023e0:	1080                	addi	s0,sp,96
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:250
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
204023e2:	8a7ff0ef          	jal	ra,20401c88 <__metal_myhart_id>
204023e6:	872a                	mv	a4,a0
204023e8:	800007b7          	lui	a5,0x80000
204023ec:	070a                	slli	a4,a4,0x2
204023ee:	79878793          	addi	a5,a5,1944 # 80000798 <metal_segment_heap_target_end+0xfffff300>
204023f2:	97ba                	add	a5,a5,a4
204023f4:	439c                	lw	a5,0(a5)
204023f6:	faf42623          	sw	a5,-84(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:252

    if ( cpu ) {
204023fa:	fac42783          	lw	a5,-84(s0)
204023fe:	c78d                	beqz	a5,20402428 <metal_lc3_interrupt_vector_handler+0x6c>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:254
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402400:	fac42503          	lw	a0,-84(s0)
20402404:	82bff0ef          	jal	ra,20401c2e <__metal_driver_cpu_interrupt_controller>
20402408:	faa42423          	sw	a0,-88(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:255
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC3].exint_data;
2040240c:	fa842783          	lw	a5,-88(s0)
20402410:	2607a783          	lw	a5,608(a5)
20402414:	faf42223          	sw	a5,-92(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:256
        intc->metal_int_table[METAL_INTERRUPT_ID_LC3].handler(METAL_INTERRUPT_ID_LC3, priv);
20402418:	fa842783          	lw	a5,-88(s0)
2040241c:	2587a783          	lw	a5,600(a5)
20402420:	fa442583          	lw	a1,-92(s0)
20402424:	454d                	li	a0,19
20402426:	9782                	jalr	a5
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:258
    }
}
20402428:	0001                	nop
2040242a:	40f6                	lw	ra,92(sp)
2040242c:	42e6                	lw	t0,88(sp)
2040242e:	4356                	lw	t1,84(sp)
20402430:	43c6                	lw	t2,80(sp)
20402432:	4436                	lw	s0,76(sp)
20402434:	4526                	lw	a0,72(sp)
20402436:	4596                	lw	a1,68(sp)
20402438:	4606                	lw	a2,64(sp)
2040243a:	56f2                	lw	a3,60(sp)
2040243c:	5762                	lw	a4,56(sp)
2040243e:	57d2                	lw	a5,52(sp)
20402440:	5842                	lw	a6,48(sp)
20402442:	58b2                	lw	a7,44(sp)
20402444:	5e22                	lw	t3,40(sp)
20402446:	5e92                	lw	t4,36(sp)
20402448:	5f02                	lw	t5,32(sp)
2040244a:	4ff2                	lw	t6,28(sp)
2040244c:	6125                	addi	sp,sp,96
2040244e:	30200073          	mret

20402452 <metal_lc4_interrupt_vector_handler>:
metal_lc4_interrupt_vector_handler():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:261

/* The metal_lc4_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc4_interrupt_vector_handler (void) {
20402452:	711d                	addi	sp,sp,-96
20402454:	ce86                	sw	ra,92(sp)
20402456:	cc96                	sw	t0,88(sp)
20402458:	ca9a                	sw	t1,84(sp)
2040245a:	c89e                	sw	t2,80(sp)
2040245c:	c6a2                	sw	s0,76(sp)
2040245e:	c4aa                	sw	a0,72(sp)
20402460:	c2ae                	sw	a1,68(sp)
20402462:	c0b2                	sw	a2,64(sp)
20402464:	de36                	sw	a3,60(sp)
20402466:	dc3a                	sw	a4,56(sp)
20402468:	da3e                	sw	a5,52(sp)
2040246a:	d842                	sw	a6,48(sp)
2040246c:	d646                	sw	a7,44(sp)
2040246e:	d472                	sw	t3,40(sp)
20402470:	d276                	sw	t4,36(sp)
20402472:	d07a                	sw	t5,32(sp)
20402474:	ce7e                	sw	t6,28(sp)
20402476:	1080                	addi	s0,sp,96
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:264
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402478:	811ff0ef          	jal	ra,20401c88 <__metal_myhart_id>
2040247c:	872a                	mv	a4,a0
2040247e:	800007b7          	lui	a5,0x80000
20402482:	070a                	slli	a4,a4,0x2
20402484:	79878793          	addi	a5,a5,1944 # 80000798 <metal_segment_heap_target_end+0xfffff300>
20402488:	97ba                	add	a5,a5,a4
2040248a:	439c                	lw	a5,0(a5)
2040248c:	faf42623          	sw	a5,-84(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:266

    if ( cpu ) {
20402490:	fac42783          	lw	a5,-84(s0)
20402494:	c78d                	beqz	a5,204024be <metal_lc4_interrupt_vector_handler+0x6c>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:268
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402496:	fac42503          	lw	a0,-84(s0)
2040249a:	f94ff0ef          	jal	ra,20401c2e <__metal_driver_cpu_interrupt_controller>
2040249e:	faa42423          	sw	a0,-88(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:269
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC4].exint_data;
204024a2:	fa842783          	lw	a5,-88(s0)
204024a6:	2787a783          	lw	a5,632(a5)
204024aa:	faf42223          	sw	a5,-92(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:270
        intc->metal_int_table[METAL_INTERRUPT_ID_LC4].handler(METAL_INTERRUPT_ID_LC4, priv);
204024ae:	fa842783          	lw	a5,-88(s0)
204024b2:	2707a783          	lw	a5,624(a5)
204024b6:	fa442583          	lw	a1,-92(s0)
204024ba:	4551                	li	a0,20
204024bc:	9782                	jalr	a5
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:272
    }
}
204024be:	0001                	nop
204024c0:	40f6                	lw	ra,92(sp)
204024c2:	42e6                	lw	t0,88(sp)
204024c4:	4356                	lw	t1,84(sp)
204024c6:	43c6                	lw	t2,80(sp)
204024c8:	4436                	lw	s0,76(sp)
204024ca:	4526                	lw	a0,72(sp)
204024cc:	4596                	lw	a1,68(sp)
204024ce:	4606                	lw	a2,64(sp)
204024d0:	56f2                	lw	a3,60(sp)
204024d2:	5762                	lw	a4,56(sp)
204024d4:	57d2                	lw	a5,52(sp)
204024d6:	5842                	lw	a6,48(sp)
204024d8:	58b2                	lw	a7,44(sp)
204024da:	5e22                	lw	t3,40(sp)
204024dc:	5e92                	lw	t4,36(sp)
204024de:	5f02                	lw	t5,32(sp)
204024e0:	4ff2                	lw	t6,28(sp)
204024e2:	6125                	addi	sp,sp,96
204024e4:	30200073          	mret

204024e8 <metal_lc5_interrupt_vector_handler>:
metal_lc5_interrupt_vector_handler():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:275

/* The metal_lc5_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc5_interrupt_vector_handler (void) {
204024e8:	711d                	addi	sp,sp,-96
204024ea:	ce86                	sw	ra,92(sp)
204024ec:	cc96                	sw	t0,88(sp)
204024ee:	ca9a                	sw	t1,84(sp)
204024f0:	c89e                	sw	t2,80(sp)
204024f2:	c6a2                	sw	s0,76(sp)
204024f4:	c4aa                	sw	a0,72(sp)
204024f6:	c2ae                	sw	a1,68(sp)
204024f8:	c0b2                	sw	a2,64(sp)
204024fa:	de36                	sw	a3,60(sp)
204024fc:	dc3a                	sw	a4,56(sp)
204024fe:	da3e                	sw	a5,52(sp)
20402500:	d842                	sw	a6,48(sp)
20402502:	d646                	sw	a7,44(sp)
20402504:	d472                	sw	t3,40(sp)
20402506:	d276                	sw	t4,36(sp)
20402508:	d07a                	sw	t5,32(sp)
2040250a:	ce7e                	sw	t6,28(sp)
2040250c:	1080                	addi	s0,sp,96
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:278
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
2040250e:	f7aff0ef          	jal	ra,20401c88 <__metal_myhart_id>
20402512:	872a                	mv	a4,a0
20402514:	800007b7          	lui	a5,0x80000
20402518:	070a                	slli	a4,a4,0x2
2040251a:	79878793          	addi	a5,a5,1944 # 80000798 <metal_segment_heap_target_end+0xfffff300>
2040251e:	97ba                	add	a5,a5,a4
20402520:	439c                	lw	a5,0(a5)
20402522:	faf42623          	sw	a5,-84(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:280

    if ( cpu ) {
20402526:	fac42783          	lw	a5,-84(s0)
2040252a:	c78d                	beqz	a5,20402554 <metal_lc5_interrupt_vector_handler+0x6c>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:282
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
2040252c:	fac42503          	lw	a0,-84(s0)
20402530:	efeff0ef          	jal	ra,20401c2e <__metal_driver_cpu_interrupt_controller>
20402534:	faa42423          	sw	a0,-88(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:283
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC5].exint_data;
20402538:	fa842783          	lw	a5,-88(s0)
2040253c:	2907a783          	lw	a5,656(a5)
20402540:	faf42223          	sw	a5,-92(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:284
        intc->metal_int_table[METAL_INTERRUPT_ID_LC5].handler(METAL_INTERRUPT_ID_LC5, priv);
20402544:	fa842783          	lw	a5,-88(s0)
20402548:	2887a783          	lw	a5,648(a5)
2040254c:	fa442583          	lw	a1,-92(s0)
20402550:	4555                	li	a0,21
20402552:	9782                	jalr	a5
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:286
    }
}
20402554:	0001                	nop
20402556:	40f6                	lw	ra,92(sp)
20402558:	42e6                	lw	t0,88(sp)
2040255a:	4356                	lw	t1,84(sp)
2040255c:	43c6                	lw	t2,80(sp)
2040255e:	4436                	lw	s0,76(sp)
20402560:	4526                	lw	a0,72(sp)
20402562:	4596                	lw	a1,68(sp)
20402564:	4606                	lw	a2,64(sp)
20402566:	56f2                	lw	a3,60(sp)
20402568:	5762                	lw	a4,56(sp)
2040256a:	57d2                	lw	a5,52(sp)
2040256c:	5842                	lw	a6,48(sp)
2040256e:	58b2                	lw	a7,44(sp)
20402570:	5e22                	lw	t3,40(sp)
20402572:	5e92                	lw	t4,36(sp)
20402574:	5f02                	lw	t5,32(sp)
20402576:	4ff2                	lw	t6,28(sp)
20402578:	6125                	addi	sp,sp,96
2040257a:	30200073          	mret

2040257e <metal_lc6_interrupt_vector_handler>:
metal_lc6_interrupt_vector_handler():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:289

/* The metal_lc6_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc6_interrupt_vector_handler (void) {
2040257e:	711d                	addi	sp,sp,-96
20402580:	ce86                	sw	ra,92(sp)
20402582:	cc96                	sw	t0,88(sp)
20402584:	ca9a                	sw	t1,84(sp)
20402586:	c89e                	sw	t2,80(sp)
20402588:	c6a2                	sw	s0,76(sp)
2040258a:	c4aa                	sw	a0,72(sp)
2040258c:	c2ae                	sw	a1,68(sp)
2040258e:	c0b2                	sw	a2,64(sp)
20402590:	de36                	sw	a3,60(sp)
20402592:	dc3a                	sw	a4,56(sp)
20402594:	da3e                	sw	a5,52(sp)
20402596:	d842                	sw	a6,48(sp)
20402598:	d646                	sw	a7,44(sp)
2040259a:	d472                	sw	t3,40(sp)
2040259c:	d276                	sw	t4,36(sp)
2040259e:	d07a                	sw	t5,32(sp)
204025a0:	ce7e                	sw	t6,28(sp)
204025a2:	1080                	addi	s0,sp,96
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:292
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
204025a4:	ee4ff0ef          	jal	ra,20401c88 <__metal_myhart_id>
204025a8:	872a                	mv	a4,a0
204025aa:	800007b7          	lui	a5,0x80000
204025ae:	070a                	slli	a4,a4,0x2
204025b0:	79878793          	addi	a5,a5,1944 # 80000798 <metal_segment_heap_target_end+0xfffff300>
204025b4:	97ba                	add	a5,a5,a4
204025b6:	439c                	lw	a5,0(a5)
204025b8:	faf42623          	sw	a5,-84(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:294

    if ( cpu ) {
204025bc:	fac42783          	lw	a5,-84(s0)
204025c0:	c78d                	beqz	a5,204025ea <metal_lc6_interrupt_vector_handler+0x6c>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:296
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
204025c2:	fac42503          	lw	a0,-84(s0)
204025c6:	e68ff0ef          	jal	ra,20401c2e <__metal_driver_cpu_interrupt_controller>
204025ca:	faa42423          	sw	a0,-88(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:297
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC6].exint_data;
204025ce:	fa842783          	lw	a5,-88(s0)
204025d2:	2a87a783          	lw	a5,680(a5)
204025d6:	faf42223          	sw	a5,-92(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:298
        intc->metal_int_table[METAL_INTERRUPT_ID_LC6].handler(METAL_INTERRUPT_ID_LC6, priv);
204025da:	fa842783          	lw	a5,-88(s0)
204025de:	2a07a783          	lw	a5,672(a5)
204025e2:	fa442583          	lw	a1,-92(s0)
204025e6:	4559                	li	a0,22
204025e8:	9782                	jalr	a5
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:300
    }
}
204025ea:	0001                	nop
204025ec:	40f6                	lw	ra,92(sp)
204025ee:	42e6                	lw	t0,88(sp)
204025f0:	4356                	lw	t1,84(sp)
204025f2:	43c6                	lw	t2,80(sp)
204025f4:	4436                	lw	s0,76(sp)
204025f6:	4526                	lw	a0,72(sp)
204025f8:	4596                	lw	a1,68(sp)
204025fa:	4606                	lw	a2,64(sp)
204025fc:	56f2                	lw	a3,60(sp)
204025fe:	5762                	lw	a4,56(sp)
20402600:	57d2                	lw	a5,52(sp)
20402602:	5842                	lw	a6,48(sp)
20402604:	58b2                	lw	a7,44(sp)
20402606:	5e22                	lw	t3,40(sp)
20402608:	5e92                	lw	t4,36(sp)
2040260a:	5f02                	lw	t5,32(sp)
2040260c:	4ff2                	lw	t6,28(sp)
2040260e:	6125                	addi	sp,sp,96
20402610:	30200073          	mret

20402614 <metal_lc7_interrupt_vector_handler>:
metal_lc7_interrupt_vector_handler():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:303

/* The metal_lc7_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc7_interrupt_vector_handler (void) {
20402614:	711d                	addi	sp,sp,-96
20402616:	ce86                	sw	ra,92(sp)
20402618:	cc96                	sw	t0,88(sp)
2040261a:	ca9a                	sw	t1,84(sp)
2040261c:	c89e                	sw	t2,80(sp)
2040261e:	c6a2                	sw	s0,76(sp)
20402620:	c4aa                	sw	a0,72(sp)
20402622:	c2ae                	sw	a1,68(sp)
20402624:	c0b2                	sw	a2,64(sp)
20402626:	de36                	sw	a3,60(sp)
20402628:	dc3a                	sw	a4,56(sp)
2040262a:	da3e                	sw	a5,52(sp)
2040262c:	d842                	sw	a6,48(sp)
2040262e:	d646                	sw	a7,44(sp)
20402630:	d472                	sw	t3,40(sp)
20402632:	d276                	sw	t4,36(sp)
20402634:	d07a                	sw	t5,32(sp)
20402636:	ce7e                	sw	t6,28(sp)
20402638:	1080                	addi	s0,sp,96
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:306
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
2040263a:	e4eff0ef          	jal	ra,20401c88 <__metal_myhart_id>
2040263e:	872a                	mv	a4,a0
20402640:	800007b7          	lui	a5,0x80000
20402644:	070a                	slli	a4,a4,0x2
20402646:	79878793          	addi	a5,a5,1944 # 80000798 <metal_segment_heap_target_end+0xfffff300>
2040264a:	97ba                	add	a5,a5,a4
2040264c:	439c                	lw	a5,0(a5)
2040264e:	faf42623          	sw	a5,-84(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:308

    if ( cpu ) {
20402652:	fac42783          	lw	a5,-84(s0)
20402656:	c78d                	beqz	a5,20402680 <metal_lc7_interrupt_vector_handler+0x6c>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:310
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402658:	fac42503          	lw	a0,-84(s0)
2040265c:	dd2ff0ef          	jal	ra,20401c2e <__metal_driver_cpu_interrupt_controller>
20402660:	faa42423          	sw	a0,-88(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:311
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC7].exint_data;
20402664:	fa842783          	lw	a5,-88(s0)
20402668:	2c07a783          	lw	a5,704(a5)
2040266c:	faf42223          	sw	a5,-92(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:312
        intc->metal_int_table[METAL_INTERRUPT_ID_LC7].handler(METAL_INTERRUPT_ID_LC7, priv);
20402670:	fa842783          	lw	a5,-88(s0)
20402674:	2b87a783          	lw	a5,696(a5)
20402678:	fa442583          	lw	a1,-92(s0)
2040267c:	455d                	li	a0,23
2040267e:	9782                	jalr	a5
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:314
    }
}
20402680:	0001                	nop
20402682:	40f6                	lw	ra,92(sp)
20402684:	42e6                	lw	t0,88(sp)
20402686:	4356                	lw	t1,84(sp)
20402688:	43c6                	lw	t2,80(sp)
2040268a:	4436                	lw	s0,76(sp)
2040268c:	4526                	lw	a0,72(sp)
2040268e:	4596                	lw	a1,68(sp)
20402690:	4606                	lw	a2,64(sp)
20402692:	56f2                	lw	a3,60(sp)
20402694:	5762                	lw	a4,56(sp)
20402696:	57d2                	lw	a5,52(sp)
20402698:	5842                	lw	a6,48(sp)
2040269a:	58b2                	lw	a7,44(sp)
2040269c:	5e22                	lw	t3,40(sp)
2040269e:	5e92                	lw	t4,36(sp)
204026a0:	5f02                	lw	t5,32(sp)
204026a2:	4ff2                	lw	t6,28(sp)
204026a4:	6125                	addi	sp,sp,96
204026a6:	30200073          	mret

204026aa <metal_lc8_interrupt_vector_handler>:
metal_lc8_interrupt_vector_handler():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:317

/* The metal_lc8_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc8_interrupt_vector_handler (void) {
204026aa:	711d                	addi	sp,sp,-96
204026ac:	ce86                	sw	ra,92(sp)
204026ae:	cc96                	sw	t0,88(sp)
204026b0:	ca9a                	sw	t1,84(sp)
204026b2:	c89e                	sw	t2,80(sp)
204026b4:	c6a2                	sw	s0,76(sp)
204026b6:	c4aa                	sw	a0,72(sp)
204026b8:	c2ae                	sw	a1,68(sp)
204026ba:	c0b2                	sw	a2,64(sp)
204026bc:	de36                	sw	a3,60(sp)
204026be:	dc3a                	sw	a4,56(sp)
204026c0:	da3e                	sw	a5,52(sp)
204026c2:	d842                	sw	a6,48(sp)
204026c4:	d646                	sw	a7,44(sp)
204026c6:	d472                	sw	t3,40(sp)
204026c8:	d276                	sw	t4,36(sp)
204026ca:	d07a                	sw	t5,32(sp)
204026cc:	ce7e                	sw	t6,28(sp)
204026ce:	1080                	addi	s0,sp,96
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:320
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
204026d0:	db8ff0ef          	jal	ra,20401c88 <__metal_myhart_id>
204026d4:	872a                	mv	a4,a0
204026d6:	800007b7          	lui	a5,0x80000
204026da:	070a                	slli	a4,a4,0x2
204026dc:	79878793          	addi	a5,a5,1944 # 80000798 <metal_segment_heap_target_end+0xfffff300>
204026e0:	97ba                	add	a5,a5,a4
204026e2:	439c                	lw	a5,0(a5)
204026e4:	faf42623          	sw	a5,-84(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:322

    if ( cpu ) {
204026e8:	fac42783          	lw	a5,-84(s0)
204026ec:	c78d                	beqz	a5,20402716 <metal_lc8_interrupt_vector_handler+0x6c>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:324
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
204026ee:	fac42503          	lw	a0,-84(s0)
204026f2:	d3cff0ef          	jal	ra,20401c2e <__metal_driver_cpu_interrupt_controller>
204026f6:	faa42423          	sw	a0,-88(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:325
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC8].exint_data;
204026fa:	fa842783          	lw	a5,-88(s0)
204026fe:	2d87a783          	lw	a5,728(a5)
20402702:	faf42223          	sw	a5,-92(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:326
        intc->metal_int_table[METAL_INTERRUPT_ID_LC8].handler(METAL_INTERRUPT_ID_LC8, priv);
20402706:	fa842783          	lw	a5,-88(s0)
2040270a:	2d07a783          	lw	a5,720(a5)
2040270e:	fa442583          	lw	a1,-92(s0)
20402712:	4561                	li	a0,24
20402714:	9782                	jalr	a5
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:328
    }
}
20402716:	0001                	nop
20402718:	40f6                	lw	ra,92(sp)
2040271a:	42e6                	lw	t0,88(sp)
2040271c:	4356                	lw	t1,84(sp)
2040271e:	43c6                	lw	t2,80(sp)
20402720:	4436                	lw	s0,76(sp)
20402722:	4526                	lw	a0,72(sp)
20402724:	4596                	lw	a1,68(sp)
20402726:	4606                	lw	a2,64(sp)
20402728:	56f2                	lw	a3,60(sp)
2040272a:	5762                	lw	a4,56(sp)
2040272c:	57d2                	lw	a5,52(sp)
2040272e:	5842                	lw	a6,48(sp)
20402730:	58b2                	lw	a7,44(sp)
20402732:	5e22                	lw	t3,40(sp)
20402734:	5e92                	lw	t4,36(sp)
20402736:	5f02                	lw	t5,32(sp)
20402738:	4ff2                	lw	t6,28(sp)
2040273a:	6125                	addi	sp,sp,96
2040273c:	30200073          	mret

20402740 <metal_lc9_interrupt_vector_handler>:
metal_lc9_interrupt_vector_handler():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:331

/* The metal_lc9_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc9_interrupt_vector_handler (void) {
20402740:	711d                	addi	sp,sp,-96
20402742:	ce86                	sw	ra,92(sp)
20402744:	cc96                	sw	t0,88(sp)
20402746:	ca9a                	sw	t1,84(sp)
20402748:	c89e                	sw	t2,80(sp)
2040274a:	c6a2                	sw	s0,76(sp)
2040274c:	c4aa                	sw	a0,72(sp)
2040274e:	c2ae                	sw	a1,68(sp)
20402750:	c0b2                	sw	a2,64(sp)
20402752:	de36                	sw	a3,60(sp)
20402754:	dc3a                	sw	a4,56(sp)
20402756:	da3e                	sw	a5,52(sp)
20402758:	d842                	sw	a6,48(sp)
2040275a:	d646                	sw	a7,44(sp)
2040275c:	d472                	sw	t3,40(sp)
2040275e:	d276                	sw	t4,36(sp)
20402760:	d07a                	sw	t5,32(sp)
20402762:	ce7e                	sw	t6,28(sp)
20402764:	1080                	addi	s0,sp,96
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:334
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402766:	d22ff0ef          	jal	ra,20401c88 <__metal_myhart_id>
2040276a:	872a                	mv	a4,a0
2040276c:	800007b7          	lui	a5,0x80000
20402770:	070a                	slli	a4,a4,0x2
20402772:	79878793          	addi	a5,a5,1944 # 80000798 <metal_segment_heap_target_end+0xfffff300>
20402776:	97ba                	add	a5,a5,a4
20402778:	439c                	lw	a5,0(a5)
2040277a:	faf42623          	sw	a5,-84(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:336

    if ( cpu ) {
2040277e:	fac42783          	lw	a5,-84(s0)
20402782:	c78d                	beqz	a5,204027ac <metal_lc9_interrupt_vector_handler+0x6c>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:338
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402784:	fac42503          	lw	a0,-84(s0)
20402788:	ca6ff0ef          	jal	ra,20401c2e <__metal_driver_cpu_interrupt_controller>
2040278c:	faa42423          	sw	a0,-88(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:339
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC9].exint_data;
20402790:	fa842783          	lw	a5,-88(s0)
20402794:	2f07a783          	lw	a5,752(a5)
20402798:	faf42223          	sw	a5,-92(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:340
        intc->metal_int_table[METAL_INTERRUPT_ID_LC9].handler(METAL_INTERRUPT_ID_LC9, priv);
2040279c:	fa842783          	lw	a5,-88(s0)
204027a0:	2e87a783          	lw	a5,744(a5)
204027a4:	fa442583          	lw	a1,-92(s0)
204027a8:	4565                	li	a0,25
204027aa:	9782                	jalr	a5
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:342
    }
}
204027ac:	0001                	nop
204027ae:	40f6                	lw	ra,92(sp)
204027b0:	42e6                	lw	t0,88(sp)
204027b2:	4356                	lw	t1,84(sp)
204027b4:	43c6                	lw	t2,80(sp)
204027b6:	4436                	lw	s0,76(sp)
204027b8:	4526                	lw	a0,72(sp)
204027ba:	4596                	lw	a1,68(sp)
204027bc:	4606                	lw	a2,64(sp)
204027be:	56f2                	lw	a3,60(sp)
204027c0:	5762                	lw	a4,56(sp)
204027c2:	57d2                	lw	a5,52(sp)
204027c4:	5842                	lw	a6,48(sp)
204027c6:	58b2                	lw	a7,44(sp)
204027c8:	5e22                	lw	t3,40(sp)
204027ca:	5e92                	lw	t4,36(sp)
204027cc:	5f02                	lw	t5,32(sp)
204027ce:	4ff2                	lw	t6,28(sp)
204027d0:	6125                	addi	sp,sp,96
204027d2:	30200073          	mret

204027d6 <metal_lc10_interrupt_vector_handler>:
metal_lc10_interrupt_vector_handler():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:345

/* The metal_lc10_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc10_interrupt_vector_handler (void) {
204027d6:	711d                	addi	sp,sp,-96
204027d8:	ce86                	sw	ra,92(sp)
204027da:	cc96                	sw	t0,88(sp)
204027dc:	ca9a                	sw	t1,84(sp)
204027de:	c89e                	sw	t2,80(sp)
204027e0:	c6a2                	sw	s0,76(sp)
204027e2:	c4aa                	sw	a0,72(sp)
204027e4:	c2ae                	sw	a1,68(sp)
204027e6:	c0b2                	sw	a2,64(sp)
204027e8:	de36                	sw	a3,60(sp)
204027ea:	dc3a                	sw	a4,56(sp)
204027ec:	da3e                	sw	a5,52(sp)
204027ee:	d842                	sw	a6,48(sp)
204027f0:	d646                	sw	a7,44(sp)
204027f2:	d472                	sw	t3,40(sp)
204027f4:	d276                	sw	t4,36(sp)
204027f6:	d07a                	sw	t5,32(sp)
204027f8:	ce7e                	sw	t6,28(sp)
204027fa:	1080                	addi	s0,sp,96
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:348
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
204027fc:	c8cff0ef          	jal	ra,20401c88 <__metal_myhart_id>
20402800:	872a                	mv	a4,a0
20402802:	800007b7          	lui	a5,0x80000
20402806:	070a                	slli	a4,a4,0x2
20402808:	79878793          	addi	a5,a5,1944 # 80000798 <metal_segment_heap_target_end+0xfffff300>
2040280c:	97ba                	add	a5,a5,a4
2040280e:	439c                	lw	a5,0(a5)
20402810:	faf42623          	sw	a5,-84(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:350

    if ( cpu ) {
20402814:	fac42783          	lw	a5,-84(s0)
20402818:	c78d                	beqz	a5,20402842 <metal_lc10_interrupt_vector_handler+0x6c>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:352
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
2040281a:	fac42503          	lw	a0,-84(s0)
2040281e:	c10ff0ef          	jal	ra,20401c2e <__metal_driver_cpu_interrupt_controller>
20402822:	faa42423          	sw	a0,-88(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:353
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC10].exint_data;
20402826:	fa842783          	lw	a5,-88(s0)
2040282a:	3087a783          	lw	a5,776(a5)
2040282e:	faf42223          	sw	a5,-92(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:354
        intc->metal_int_table[METAL_INTERRUPT_ID_LC10].handler(METAL_INTERRUPT_ID_LC10, priv);
20402832:	fa842783          	lw	a5,-88(s0)
20402836:	3007a783          	lw	a5,768(a5)
2040283a:	fa442583          	lw	a1,-92(s0)
2040283e:	4569                	li	a0,26
20402840:	9782                	jalr	a5
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:356
    }
}
20402842:	0001                	nop
20402844:	40f6                	lw	ra,92(sp)
20402846:	42e6                	lw	t0,88(sp)
20402848:	4356                	lw	t1,84(sp)
2040284a:	43c6                	lw	t2,80(sp)
2040284c:	4436                	lw	s0,76(sp)
2040284e:	4526                	lw	a0,72(sp)
20402850:	4596                	lw	a1,68(sp)
20402852:	4606                	lw	a2,64(sp)
20402854:	56f2                	lw	a3,60(sp)
20402856:	5762                	lw	a4,56(sp)
20402858:	57d2                	lw	a5,52(sp)
2040285a:	5842                	lw	a6,48(sp)
2040285c:	58b2                	lw	a7,44(sp)
2040285e:	5e22                	lw	t3,40(sp)
20402860:	5e92                	lw	t4,36(sp)
20402862:	5f02                	lw	t5,32(sp)
20402864:	4ff2                	lw	t6,28(sp)
20402866:	6125                	addi	sp,sp,96
20402868:	30200073          	mret

2040286c <metal_lc11_interrupt_vector_handler>:
metal_lc11_interrupt_vector_handler():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:359

/* The metal_lc11_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc11_interrupt_vector_handler (void) {
2040286c:	711d                	addi	sp,sp,-96
2040286e:	ce86                	sw	ra,92(sp)
20402870:	cc96                	sw	t0,88(sp)
20402872:	ca9a                	sw	t1,84(sp)
20402874:	c89e                	sw	t2,80(sp)
20402876:	c6a2                	sw	s0,76(sp)
20402878:	c4aa                	sw	a0,72(sp)
2040287a:	c2ae                	sw	a1,68(sp)
2040287c:	c0b2                	sw	a2,64(sp)
2040287e:	de36                	sw	a3,60(sp)
20402880:	dc3a                	sw	a4,56(sp)
20402882:	da3e                	sw	a5,52(sp)
20402884:	d842                	sw	a6,48(sp)
20402886:	d646                	sw	a7,44(sp)
20402888:	d472                	sw	t3,40(sp)
2040288a:	d276                	sw	t4,36(sp)
2040288c:	d07a                	sw	t5,32(sp)
2040288e:	ce7e                	sw	t6,28(sp)
20402890:	1080                	addi	s0,sp,96
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:362
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402892:	bf6ff0ef          	jal	ra,20401c88 <__metal_myhart_id>
20402896:	872a                	mv	a4,a0
20402898:	800007b7          	lui	a5,0x80000
2040289c:	070a                	slli	a4,a4,0x2
2040289e:	79878793          	addi	a5,a5,1944 # 80000798 <metal_segment_heap_target_end+0xfffff300>
204028a2:	97ba                	add	a5,a5,a4
204028a4:	439c                	lw	a5,0(a5)
204028a6:	faf42623          	sw	a5,-84(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:364

    if ( cpu ) {
204028aa:	fac42783          	lw	a5,-84(s0)
204028ae:	c78d                	beqz	a5,204028d8 <metal_lc11_interrupt_vector_handler+0x6c>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:366
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
204028b0:	fac42503          	lw	a0,-84(s0)
204028b4:	b7aff0ef          	jal	ra,20401c2e <__metal_driver_cpu_interrupt_controller>
204028b8:	faa42423          	sw	a0,-88(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:367
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC11].exint_data;
204028bc:	fa842783          	lw	a5,-88(s0)
204028c0:	3207a783          	lw	a5,800(a5)
204028c4:	faf42223          	sw	a5,-92(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:368
        intc->metal_int_table[METAL_INTERRUPT_ID_LC11].handler(METAL_INTERRUPT_ID_LC11, priv);
204028c8:	fa842783          	lw	a5,-88(s0)
204028cc:	3187a783          	lw	a5,792(a5)
204028d0:	fa442583          	lw	a1,-92(s0)
204028d4:	456d                	li	a0,27
204028d6:	9782                	jalr	a5
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:370
    }
}
204028d8:	0001                	nop
204028da:	40f6                	lw	ra,92(sp)
204028dc:	42e6                	lw	t0,88(sp)
204028de:	4356                	lw	t1,84(sp)
204028e0:	43c6                	lw	t2,80(sp)
204028e2:	4436                	lw	s0,76(sp)
204028e4:	4526                	lw	a0,72(sp)
204028e6:	4596                	lw	a1,68(sp)
204028e8:	4606                	lw	a2,64(sp)
204028ea:	56f2                	lw	a3,60(sp)
204028ec:	5762                	lw	a4,56(sp)
204028ee:	57d2                	lw	a5,52(sp)
204028f0:	5842                	lw	a6,48(sp)
204028f2:	58b2                	lw	a7,44(sp)
204028f4:	5e22                	lw	t3,40(sp)
204028f6:	5e92                	lw	t4,36(sp)
204028f8:	5f02                	lw	t5,32(sp)
204028fa:	4ff2                	lw	t6,28(sp)
204028fc:	6125                	addi	sp,sp,96
204028fe:	30200073          	mret

20402902 <metal_lc12_interrupt_vector_handler>:
metal_lc12_interrupt_vector_handler():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:373

/* The metal_lc12_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc12_interrupt_vector_handler (void) {
20402902:	711d                	addi	sp,sp,-96
20402904:	ce86                	sw	ra,92(sp)
20402906:	cc96                	sw	t0,88(sp)
20402908:	ca9a                	sw	t1,84(sp)
2040290a:	c89e                	sw	t2,80(sp)
2040290c:	c6a2                	sw	s0,76(sp)
2040290e:	c4aa                	sw	a0,72(sp)
20402910:	c2ae                	sw	a1,68(sp)
20402912:	c0b2                	sw	a2,64(sp)
20402914:	de36                	sw	a3,60(sp)
20402916:	dc3a                	sw	a4,56(sp)
20402918:	da3e                	sw	a5,52(sp)
2040291a:	d842                	sw	a6,48(sp)
2040291c:	d646                	sw	a7,44(sp)
2040291e:	d472                	sw	t3,40(sp)
20402920:	d276                	sw	t4,36(sp)
20402922:	d07a                	sw	t5,32(sp)
20402924:	ce7e                	sw	t6,28(sp)
20402926:	1080                	addi	s0,sp,96
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:376
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402928:	b60ff0ef          	jal	ra,20401c88 <__metal_myhart_id>
2040292c:	872a                	mv	a4,a0
2040292e:	800007b7          	lui	a5,0x80000
20402932:	070a                	slli	a4,a4,0x2
20402934:	79878793          	addi	a5,a5,1944 # 80000798 <metal_segment_heap_target_end+0xfffff300>
20402938:	97ba                	add	a5,a5,a4
2040293a:	439c                	lw	a5,0(a5)
2040293c:	faf42623          	sw	a5,-84(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:378

    if ( cpu ) {
20402940:	fac42783          	lw	a5,-84(s0)
20402944:	c78d                	beqz	a5,2040296e <metal_lc12_interrupt_vector_handler+0x6c>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:380
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402946:	fac42503          	lw	a0,-84(s0)
2040294a:	ae4ff0ef          	jal	ra,20401c2e <__metal_driver_cpu_interrupt_controller>
2040294e:	faa42423          	sw	a0,-88(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:381
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC12].exint_data;
20402952:	fa842783          	lw	a5,-88(s0)
20402956:	3387a783          	lw	a5,824(a5)
2040295a:	faf42223          	sw	a5,-92(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:382
        intc->metal_int_table[METAL_INTERRUPT_ID_LC12].handler(METAL_INTERRUPT_ID_LC12, priv);
2040295e:	fa842783          	lw	a5,-88(s0)
20402962:	3307a783          	lw	a5,816(a5)
20402966:	fa442583          	lw	a1,-92(s0)
2040296a:	4571                	li	a0,28
2040296c:	9782                	jalr	a5
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:384
    }
}
2040296e:	0001                	nop
20402970:	40f6                	lw	ra,92(sp)
20402972:	42e6                	lw	t0,88(sp)
20402974:	4356                	lw	t1,84(sp)
20402976:	43c6                	lw	t2,80(sp)
20402978:	4436                	lw	s0,76(sp)
2040297a:	4526                	lw	a0,72(sp)
2040297c:	4596                	lw	a1,68(sp)
2040297e:	4606                	lw	a2,64(sp)
20402980:	56f2                	lw	a3,60(sp)
20402982:	5762                	lw	a4,56(sp)
20402984:	57d2                	lw	a5,52(sp)
20402986:	5842                	lw	a6,48(sp)
20402988:	58b2                	lw	a7,44(sp)
2040298a:	5e22                	lw	t3,40(sp)
2040298c:	5e92                	lw	t4,36(sp)
2040298e:	5f02                	lw	t5,32(sp)
20402990:	4ff2                	lw	t6,28(sp)
20402992:	6125                	addi	sp,sp,96
20402994:	30200073          	mret

20402998 <metal_lc13_interrupt_vector_handler>:
metal_lc13_interrupt_vector_handler():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:387

/* The metal_lc13_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc13_interrupt_vector_handler (void) {
20402998:	711d                	addi	sp,sp,-96
2040299a:	ce86                	sw	ra,92(sp)
2040299c:	cc96                	sw	t0,88(sp)
2040299e:	ca9a                	sw	t1,84(sp)
204029a0:	c89e                	sw	t2,80(sp)
204029a2:	c6a2                	sw	s0,76(sp)
204029a4:	c4aa                	sw	a0,72(sp)
204029a6:	c2ae                	sw	a1,68(sp)
204029a8:	c0b2                	sw	a2,64(sp)
204029aa:	de36                	sw	a3,60(sp)
204029ac:	dc3a                	sw	a4,56(sp)
204029ae:	da3e                	sw	a5,52(sp)
204029b0:	d842                	sw	a6,48(sp)
204029b2:	d646                	sw	a7,44(sp)
204029b4:	d472                	sw	t3,40(sp)
204029b6:	d276                	sw	t4,36(sp)
204029b8:	d07a                	sw	t5,32(sp)
204029ba:	ce7e                	sw	t6,28(sp)
204029bc:	1080                	addi	s0,sp,96
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:390
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
204029be:	acaff0ef          	jal	ra,20401c88 <__metal_myhart_id>
204029c2:	872a                	mv	a4,a0
204029c4:	800007b7          	lui	a5,0x80000
204029c8:	070a                	slli	a4,a4,0x2
204029ca:	79878793          	addi	a5,a5,1944 # 80000798 <metal_segment_heap_target_end+0xfffff300>
204029ce:	97ba                	add	a5,a5,a4
204029d0:	439c                	lw	a5,0(a5)
204029d2:	faf42623          	sw	a5,-84(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:392

    if ( cpu ) {
204029d6:	fac42783          	lw	a5,-84(s0)
204029da:	c78d                	beqz	a5,20402a04 <metal_lc13_interrupt_vector_handler+0x6c>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:394
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
204029dc:	fac42503          	lw	a0,-84(s0)
204029e0:	a4eff0ef          	jal	ra,20401c2e <__metal_driver_cpu_interrupt_controller>
204029e4:	faa42423          	sw	a0,-88(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:395
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC13].exint_data;
204029e8:	fa842783          	lw	a5,-88(s0)
204029ec:	3507a783          	lw	a5,848(a5)
204029f0:	faf42223          	sw	a5,-92(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:396
        intc->metal_int_table[METAL_INTERRUPT_ID_LC13].handler(METAL_INTERRUPT_ID_LC13, priv);
204029f4:	fa842783          	lw	a5,-88(s0)
204029f8:	3487a783          	lw	a5,840(a5)
204029fc:	fa442583          	lw	a1,-92(s0)
20402a00:	4575                	li	a0,29
20402a02:	9782                	jalr	a5
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:398
    }
}
20402a04:	0001                	nop
20402a06:	40f6                	lw	ra,92(sp)
20402a08:	42e6                	lw	t0,88(sp)
20402a0a:	4356                	lw	t1,84(sp)
20402a0c:	43c6                	lw	t2,80(sp)
20402a0e:	4436                	lw	s0,76(sp)
20402a10:	4526                	lw	a0,72(sp)
20402a12:	4596                	lw	a1,68(sp)
20402a14:	4606                	lw	a2,64(sp)
20402a16:	56f2                	lw	a3,60(sp)
20402a18:	5762                	lw	a4,56(sp)
20402a1a:	57d2                	lw	a5,52(sp)
20402a1c:	5842                	lw	a6,48(sp)
20402a1e:	58b2                	lw	a7,44(sp)
20402a20:	5e22                	lw	t3,40(sp)
20402a22:	5e92                	lw	t4,36(sp)
20402a24:	5f02                	lw	t5,32(sp)
20402a26:	4ff2                	lw	t6,28(sp)
20402a28:	6125                	addi	sp,sp,96
20402a2a:	30200073          	mret

20402a2e <metal_lc14_interrupt_vector_handler>:
metal_lc14_interrupt_vector_handler():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:401

/* The metal_lc14_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc14_interrupt_vector_handler (void) {
20402a2e:	711d                	addi	sp,sp,-96
20402a30:	ce86                	sw	ra,92(sp)
20402a32:	cc96                	sw	t0,88(sp)
20402a34:	ca9a                	sw	t1,84(sp)
20402a36:	c89e                	sw	t2,80(sp)
20402a38:	c6a2                	sw	s0,76(sp)
20402a3a:	c4aa                	sw	a0,72(sp)
20402a3c:	c2ae                	sw	a1,68(sp)
20402a3e:	c0b2                	sw	a2,64(sp)
20402a40:	de36                	sw	a3,60(sp)
20402a42:	dc3a                	sw	a4,56(sp)
20402a44:	da3e                	sw	a5,52(sp)
20402a46:	d842                	sw	a6,48(sp)
20402a48:	d646                	sw	a7,44(sp)
20402a4a:	d472                	sw	t3,40(sp)
20402a4c:	d276                	sw	t4,36(sp)
20402a4e:	d07a                	sw	t5,32(sp)
20402a50:	ce7e                	sw	t6,28(sp)
20402a52:	1080                	addi	s0,sp,96
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:404
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402a54:	a34ff0ef          	jal	ra,20401c88 <__metal_myhart_id>
20402a58:	872a                	mv	a4,a0
20402a5a:	800007b7          	lui	a5,0x80000
20402a5e:	070a                	slli	a4,a4,0x2
20402a60:	79878793          	addi	a5,a5,1944 # 80000798 <metal_segment_heap_target_end+0xfffff300>
20402a64:	97ba                	add	a5,a5,a4
20402a66:	439c                	lw	a5,0(a5)
20402a68:	faf42623          	sw	a5,-84(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:406

    if ( cpu ) {
20402a6c:	fac42783          	lw	a5,-84(s0)
20402a70:	c78d                	beqz	a5,20402a9a <metal_lc14_interrupt_vector_handler+0x6c>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:408
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402a72:	fac42503          	lw	a0,-84(s0)
20402a76:	9b8ff0ef          	jal	ra,20401c2e <__metal_driver_cpu_interrupt_controller>
20402a7a:	faa42423          	sw	a0,-88(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:409
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC14].exint_data;
20402a7e:	fa842783          	lw	a5,-88(s0)
20402a82:	3687a783          	lw	a5,872(a5)
20402a86:	faf42223          	sw	a5,-92(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:410
        intc->metal_int_table[METAL_INTERRUPT_ID_LC14].handler(METAL_INTERRUPT_ID_LC14, priv);
20402a8a:	fa842783          	lw	a5,-88(s0)
20402a8e:	3607a783          	lw	a5,864(a5)
20402a92:	fa442583          	lw	a1,-92(s0)
20402a96:	4579                	li	a0,30
20402a98:	9782                	jalr	a5
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:412
    }
}
20402a9a:	0001                	nop
20402a9c:	40f6                	lw	ra,92(sp)
20402a9e:	42e6                	lw	t0,88(sp)
20402aa0:	4356                	lw	t1,84(sp)
20402aa2:	43c6                	lw	t2,80(sp)
20402aa4:	4436                	lw	s0,76(sp)
20402aa6:	4526                	lw	a0,72(sp)
20402aa8:	4596                	lw	a1,68(sp)
20402aaa:	4606                	lw	a2,64(sp)
20402aac:	56f2                	lw	a3,60(sp)
20402aae:	5762                	lw	a4,56(sp)
20402ab0:	57d2                	lw	a5,52(sp)
20402ab2:	5842                	lw	a6,48(sp)
20402ab4:	58b2                	lw	a7,44(sp)
20402ab6:	5e22                	lw	t3,40(sp)
20402ab8:	5e92                	lw	t4,36(sp)
20402aba:	5f02                	lw	t5,32(sp)
20402abc:	4ff2                	lw	t6,28(sp)
20402abe:	6125                	addi	sp,sp,96
20402ac0:	30200073          	mret

20402ac4 <metal_lc15_interrupt_vector_handler>:
metal_lc15_interrupt_vector_handler():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:415

/* The metal_lc15_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc15_interrupt_vector_handler (void) {
20402ac4:	711d                	addi	sp,sp,-96
20402ac6:	ce86                	sw	ra,92(sp)
20402ac8:	cc96                	sw	t0,88(sp)
20402aca:	ca9a                	sw	t1,84(sp)
20402acc:	c89e                	sw	t2,80(sp)
20402ace:	c6a2                	sw	s0,76(sp)
20402ad0:	c4aa                	sw	a0,72(sp)
20402ad2:	c2ae                	sw	a1,68(sp)
20402ad4:	c0b2                	sw	a2,64(sp)
20402ad6:	de36                	sw	a3,60(sp)
20402ad8:	dc3a                	sw	a4,56(sp)
20402ada:	da3e                	sw	a5,52(sp)
20402adc:	d842                	sw	a6,48(sp)
20402ade:	d646                	sw	a7,44(sp)
20402ae0:	d472                	sw	t3,40(sp)
20402ae2:	d276                	sw	t4,36(sp)
20402ae4:	d07a                	sw	t5,32(sp)
20402ae6:	ce7e                	sw	t6,28(sp)
20402ae8:	1080                	addi	s0,sp,96
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:418
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402aea:	99eff0ef          	jal	ra,20401c88 <__metal_myhart_id>
20402aee:	872a                	mv	a4,a0
20402af0:	800007b7          	lui	a5,0x80000
20402af4:	070a                	slli	a4,a4,0x2
20402af6:	79878793          	addi	a5,a5,1944 # 80000798 <metal_segment_heap_target_end+0xfffff300>
20402afa:	97ba                	add	a5,a5,a4
20402afc:	439c                	lw	a5,0(a5)
20402afe:	faf42623          	sw	a5,-84(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:420

    if ( cpu ) {
20402b02:	fac42783          	lw	a5,-84(s0)
20402b06:	c78d                	beqz	a5,20402b30 <metal_lc15_interrupt_vector_handler+0x6c>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:422
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402b08:	fac42503          	lw	a0,-84(s0)
20402b0c:	922ff0ef          	jal	ra,20401c2e <__metal_driver_cpu_interrupt_controller>
20402b10:	faa42423          	sw	a0,-88(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:423
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC15].exint_data;
20402b14:	fa842783          	lw	a5,-88(s0)
20402b18:	3807a783          	lw	a5,896(a5)
20402b1c:	faf42223          	sw	a5,-92(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:424
        intc->metal_int_table[METAL_INTERRUPT_ID_LC15].handler(METAL_INTERRUPT_ID_LC15, priv);
20402b20:	fa842783          	lw	a5,-88(s0)
20402b24:	3787a783          	lw	a5,888(a5)
20402b28:	fa442583          	lw	a1,-92(s0)
20402b2c:	457d                	li	a0,31
20402b2e:	9782                	jalr	a5
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:426
    }
}
20402b30:	0001                	nop
20402b32:	40f6                	lw	ra,92(sp)
20402b34:	42e6                	lw	t0,88(sp)
20402b36:	4356                	lw	t1,84(sp)
20402b38:	43c6                	lw	t2,80(sp)
20402b3a:	4436                	lw	s0,76(sp)
20402b3c:	4526                	lw	a0,72(sp)
20402b3e:	4596                	lw	a1,68(sp)
20402b40:	4606                	lw	a2,64(sp)
20402b42:	56f2                	lw	a3,60(sp)
20402b44:	5762                	lw	a4,56(sp)
20402b46:	57d2                	lw	a5,52(sp)
20402b48:	5842                	lw	a6,48(sp)
20402b4a:	58b2                	lw	a7,44(sp)
20402b4c:	5e22                	lw	t3,40(sp)
20402b4e:	5e92                	lw	t4,36(sp)
20402b50:	5f02                	lw	t5,32(sp)
20402b52:	4ff2                	lw	t6,28(sp)
20402b54:	6125                	addi	sp,sp,96
20402b56:	30200073          	mret

20402b5a <__metal_controller_interrupt_vector_mode>:
__metal_controller_interrupt_vector_mode():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:429

metal_vector_mode __metal_controller_interrupt_vector_mode (void)
{
20402b5a:	1101                	addi	sp,sp,-32
20402b5c:	ce22                	sw	s0,28(sp)
20402b5e:	1000                	addi	s0,sp,32
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:432
    uintptr_t val;

    asm volatile ("csrr %0, mtvec" : "=r"(val));
20402b60:	305027f3          	csrr	a5,mtvec
20402b64:	fef42623          	sw	a5,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:433
    val &= METAL_MTVEC_MASK;
20402b68:	fec42783          	lw	a5,-20(s0)
20402b6c:	03f7f793          	andi	a5,a5,63
20402b70:	fef42623          	sw	a5,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:435

    switch (val) {
20402b74:	fec42703          	lw	a4,-20(s0)
20402b78:	4789                	li	a5,2
20402b7a:	00f70d63          	beq	a4,a5,20402b94 <__metal_controller_interrupt_vector_mode+0x3a>
20402b7e:	fec42703          	lw	a4,-20(s0)
20402b82:	478d                	li	a5,3
20402b84:	00f70a63          	beq	a4,a5,20402b98 <__metal_controller_interrupt_vector_mode+0x3e>
20402b88:	fec42703          	lw	a4,-20(s0)
20402b8c:	4785                	li	a5,1
20402b8e:	00f70763          	beq	a4,a5,20402b9c <__metal_controller_interrupt_vector_mode+0x42>
20402b92:	a039                	j	20402ba0 <__metal_controller_interrupt_vector_mode+0x46>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:437
    case METAL_MTVEC_CLIC:
        return METAL_SELECTIVE_VECTOR_MODE;
20402b94:	478d                	li	a5,3
20402b96:	a031                	j	20402ba2 <__metal_controller_interrupt_vector_mode+0x48>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:439
    case METAL_MTVEC_CLIC_VECTORED:
        return METAL_HARDWARE_VECTOR_MODE;
20402b98:	4791                	li	a5,4
20402b9a:	a021                	j	20402ba2 <__metal_controller_interrupt_vector_mode+0x48>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:441
    case METAL_MTVEC_VECTORED:
        return METAL_VECTOR_MODE;
20402b9c:	4785                	li	a5,1
20402b9e:	a011                	j	20402ba2 <__metal_controller_interrupt_vector_mode+0x48>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:443
    }
    return METAL_DIRECT_MODE;
20402ba0:	4781                	li	a5,0
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:444
}
20402ba2:	853e                	mv	a0,a5
20402ba4:	4472                	lw	s0,28(sp)
20402ba6:	6105                	addi	sp,sp,32
20402ba8:	8082                	ret

20402baa <__metal_controller_interrupt_vector>:
__metal_controller_interrupt_vector():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:447

void __metal_controller_interrupt_vector (metal_vector_mode mode, void *vec_table)
{  
20402baa:	7179                	addi	sp,sp,-48
20402bac:	d622                	sw	s0,44(sp)
20402bae:	1800                	addi	s0,sp,48
20402bb0:	fca42e23          	sw	a0,-36(s0)
20402bb4:	fcb42c23          	sw	a1,-40(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:450
    uintptr_t trap_entry, val;

    __asm__ volatile ("csrr %0, mtvec" : "=r"(val));
20402bb8:	305027f3          	csrr	a5,mtvec
20402bbc:	fef42623          	sw	a5,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:451
    val &= ~(METAL_MTVEC_CLIC_VECTORED | METAL_MTVEC_CLIC_RESERVED);
20402bc0:	fec42783          	lw	a5,-20(s0)
20402bc4:	fc07f793          	andi	a5,a5,-64
20402bc8:	fef42623          	sw	a5,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:452
    trap_entry = (uintptr_t)vec_table;
20402bcc:	fd842783          	lw	a5,-40(s0)
20402bd0:	fef42423          	sw	a5,-24(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:454

    switch (mode) {
20402bd4:	fdc42703          	lw	a4,-36(s0)
20402bd8:	4791                	li	a5,4
20402bda:	06e7e063          	bltu	a5,a4,20402c3a <__metal_controller_interrupt_vector+0x90>
20402bde:	fdc42783          	lw	a5,-36(s0)
20402be2:	00279713          	slli	a4,a5,0x2
20402be6:	204067b7          	lui	a5,0x20406
20402bea:	37078793          	addi	a5,a5,880 # 20406370 <__metal_driver_vtable_riscv_clint0+0x4c>
20402bee:	97ba                	add	a5,a5,a4
20402bf0:	439c                	lw	a5,0(a5)
20402bf2:	8782                	jr	a5
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:457
    case METAL_SELECTIVE_NONVECTOR_MODE:
    case METAL_SELECTIVE_VECTOR_MODE:
        __asm__ volatile ("csrw 0x307, %0" :: "r"(trap_entry));
20402bf4:	fe842783          	lw	a5,-24(s0)
20402bf8:	30779073          	csrw	mtvt,a5
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:458
        __asm__ volatile ("csrw mtvec, %0" :: "r"(val | METAL_MTVEC_CLIC));
20402bfc:	fec42783          	lw	a5,-20(s0)
20402c00:	0027e793          	ori	a5,a5,2
20402c04:	30579073          	csrw	mtvec,a5
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:459
        break;
20402c08:	a80d                	j	20402c3a <__metal_controller_interrupt_vector+0x90>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:461
    case METAL_HARDWARE_VECTOR_MODE:
        __asm__ volatile ("csrw 0x307, %0" :: "r"(trap_entry));
20402c0a:	fe842783          	lw	a5,-24(s0)
20402c0e:	30779073          	csrw	mtvt,a5
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:462
        __asm__ volatile ("csrw mtvec, %0" :: "r"(val | METAL_MTVEC_CLIC_VECTORED));
20402c12:	fec42783          	lw	a5,-20(s0)
20402c16:	0037e793          	ori	a5,a5,3
20402c1a:	30579073          	csrw	mtvec,a5
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:463
        break;
20402c1e:	a831                	j	20402c3a <__metal_controller_interrupt_vector+0x90>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:465
    case METAL_VECTOR_MODE:
        __asm__ volatile ("csrw mtvec, %0" :: "r"(trap_entry | METAL_MTVEC_VECTORED));
20402c20:	fe842783          	lw	a5,-24(s0)
20402c24:	0017e793          	ori	a5,a5,1
20402c28:	30579073          	csrw	mtvec,a5
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:466
        break;
20402c2c:	a039                	j	20402c3a <__metal_controller_interrupt_vector+0x90>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:468
    case METAL_DIRECT_MODE:
        __asm__ volatile ("csrw mtvec, %0" :: "r"(trap_entry & ~METAL_MTVEC_CLIC_VECTORED));
20402c2e:	fe842783          	lw	a5,-24(s0)
20402c32:	9bf1                	andi	a5,a5,-4
20402c34:	30579073          	csrw	mtvec,a5
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:469
        break;
20402c38:	0001                	nop
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:471
    }
}
20402c3a:	0001                	nop
20402c3c:	5432                	lw	s0,44(sp)
20402c3e:	6145                	addi	sp,sp,48
20402c40:	8082                	ret

20402c42 <__metal_valid_interrupt_id>:
__metal_valid_interrupt_id():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:474

int __metal_valid_interrupt_id (int id)
{
20402c42:	1101                	addi	sp,sp,-32
20402c44:	ce22                	sw	s0,28(sp)
20402c46:	1000                	addi	s0,sp,32
20402c48:	fea42623          	sw	a0,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:475
    switch (id) {
20402c4c:	fec42783          	lw	a5,-20(s0)
20402c50:	17f5                	addi	a5,a5,-3
20402c52:	4771                	li	a4,28
20402c54:	00f76d63          	bltu	a4,a5,20402c6e <__metal_valid_interrupt_id+0x2c>
20402c58:	00279713          	slli	a4,a5,0x2
20402c5c:	204067b7          	lui	a5,0x20406
20402c60:	38478793          	addi	a5,a5,900 # 20406384 <__metal_driver_vtable_riscv_clint0+0x60>
20402c64:	97ba                	add	a5,a5,a4
20402c66:	439c                	lw	a5,0(a5)
20402c68:	8782                	jr	a5
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:495
    case METAL_INTERRUPT_ID_LC11:
    case METAL_INTERRUPT_ID_LC12:
    case METAL_INTERRUPT_ID_LC13:
    case METAL_INTERRUPT_ID_LC14:
    case METAL_INTERRUPT_ID_LC15:
        return 1;
20402c6a:	4785                	li	a5,1
20402c6c:	a019                	j	20402c72 <__metal_valid_interrupt_id+0x30>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:497
    default:
        break;
20402c6e:	0001                	nop
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:500
    }

    return 0;
20402c70:	4781                	li	a5,0
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:501
}
20402c72:	853e                	mv	a0,a5
20402c74:	4472                	lw	s0,28(sp)
20402c76:	6105                	addi	sp,sp,32
20402c78:	8082                	ret

20402c7a <__metal_local_interrupt_enable>:
__metal_local_interrupt_enable():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:506

 
int __metal_local_interrupt_enable (struct metal_interrupt *controller,
				  metal_interrupt_id_e id, int enable)
{
20402c7a:	7179                	addi	sp,sp,-48
20402c7c:	d606                	sw	ra,44(sp)
20402c7e:	d422                	sw	s0,40(sp)
20402c80:	1800                	addi	s0,sp,48
20402c82:	fca42e23          	sw	a0,-36(s0)
20402c86:	fcb42c23          	sw	a1,-40(s0)
20402c8a:	fcc42a23          	sw	a2,-44(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:507
    int rc = 0;
20402c8e:	fe042623          	sw	zero,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:509
  
    if ( !controller) {
20402c92:	fdc42783          	lw	a5,-36(s0)
20402c96:	e399                	bnez	a5,20402c9c <__metal_local_interrupt_enable+0x22>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:510
        return -1;
20402c98:	57fd                	li	a5,-1
20402c9a:	a849                	j	20402d2c <__metal_local_interrupt_enable+0xb2>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:513
    }

    switch (id) {
20402c9c:	fd842703          	lw	a4,-40(s0)
20402ca0:	47fd                	li	a5,31
20402ca2:	08e7e063          	bltu	a5,a4,20402d22 <__metal_local_interrupt_enable+0xa8>
20402ca6:	fd842783          	lw	a5,-40(s0)
20402caa:	00279713          	slli	a4,a5,0x2
20402cae:	204067b7          	lui	a5,0x20406
20402cb2:	3f878793          	addi	a5,a5,1016 # 204063f8 <__metal_driver_vtable_riscv_clint0+0xd4>
20402cb6:	97ba                	add	a5,a5,a4
20402cb8:	439c                	lw	a5,0(a5)
20402cba:	8782                	jr	a5
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:515
    case METAL_INTERRUPT_ID_BASE:
        if (enable) {
20402cbc:	fd442783          	lw	a5,-44(s0)
20402cc0:	c781                	beqz	a5,20402cc8 <__metal_local_interrupt_enable+0x4e>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:516
            __metal_interrupt_global_enable();
20402cc2:	fe1fe0ef          	jal	ra,20401ca2 <__metal_interrupt_global_enable>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:520
        } else {
            __metal_interrupt_global_disable();
        }
        break;
20402cc6:	a08d                	j	20402d28 <__metal_local_interrupt_enable+0xae>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:518
            __metal_interrupt_global_disable();
20402cc8:	ff3fe0ef          	jal	ra,20401cba <__metal_interrupt_global_disable>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:520
        break;
20402ccc:	a8b1                	j	20402d28 <__metal_local_interrupt_enable+0xae>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:522
    case METAL_INTERRUPT_ID_SW:
        if (enable) {
20402cce:	fd442783          	lw	a5,-44(s0)
20402cd2:	c781                	beqz	a5,20402cda <__metal_local_interrupt_enable+0x60>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:523
            __metal_interrupt_software_enable();
20402cd4:	ffffe0ef          	jal	ra,20401cd2 <__metal_interrupt_software_enable>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:527
        } else {
            __metal_interrupt_software_disable();
        }
        break;
20402cd8:	a881                	j	20402d28 <__metal_local_interrupt_enable+0xae>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:525
            __metal_interrupt_software_disable();
20402cda:	810ff0ef          	jal	ra,20401cea <__metal_interrupt_software_disable>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:527
        break;
20402cde:	a0a9                	j	20402d28 <__metal_local_interrupt_enable+0xae>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:529
    case METAL_INTERRUPT_ID_TMR:
        if (enable) {
20402ce0:	fd442783          	lw	a5,-44(s0)
20402ce4:	c781                	beqz	a5,20402cec <__metal_local_interrupt_enable+0x72>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:530
	    __metal_interrupt_timer_enable();
20402ce6:	81cff0ef          	jal	ra,20401d02 <__metal_interrupt_timer_enable>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:534
	} else {
	    __metal_interrupt_timer_disable();
	}
	break;
20402cea:	a83d                	j	20402d28 <__metal_local_interrupt_enable+0xae>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:532
	    __metal_interrupt_timer_disable();
20402cec:	830ff0ef          	jal	ra,20401d1c <__metal_interrupt_timer_disable>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:534
	break;
20402cf0:	a825                	j	20402d28 <__metal_local_interrupt_enable+0xae>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:536
    case METAL_INTERRUPT_ID_EXT:
        if (enable) {
20402cf2:	fd442783          	lw	a5,-44(s0)
20402cf6:	c781                	beqz	a5,20402cfe <__metal_local_interrupt_enable+0x84>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:537
            __metal_interrupt_external_enable();
20402cf8:	83eff0ef          	jal	ra,20401d36 <__metal_interrupt_external_enable>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:541
        } else {
            __metal_interrupt_external_disable();
        }
        break;
20402cfc:	a035                	j	20402d28 <__metal_local_interrupt_enable+0xae>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:539
            __metal_interrupt_external_disable();
20402cfe:	854ff0ef          	jal	ra,20401d52 <__metal_interrupt_external_disable>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:541
        break;
20402d02:	a01d                	j	20402d28 <__metal_local_interrupt_enable+0xae>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:558
    case METAL_INTERRUPT_ID_LC11:
    case METAL_INTERRUPT_ID_LC12:
    case METAL_INTERRUPT_ID_LC13:
    case METAL_INTERRUPT_ID_LC14:
    case METAL_INTERRUPT_ID_LC15:
        if (enable) {
20402d04:	fd442783          	lw	a5,-44(s0)
20402d08:	c799                	beqz	a5,20402d16 <__metal_local_interrupt_enable+0x9c>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:559
            __metal_interrupt_local_enable(id);
20402d0a:	fd842783          	lw	a5,-40(s0)
20402d0e:	853e                	mv	a0,a5
20402d10:	85eff0ef          	jal	ra,20401d6e <__metal_interrupt_local_enable>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:563
        } else {
            __metal_interrupt_local_disable(id);
        }
        break;
20402d14:	a811                	j	20402d28 <__metal_local_interrupt_enable+0xae>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:561
            __metal_interrupt_local_disable(id);
20402d16:	fd842783          	lw	a5,-40(s0)
20402d1a:	853e                	mv	a0,a5
20402d1c:	87eff0ef          	jal	ra,20401d9a <__metal_interrupt_local_disable>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:563
        break;
20402d20:	a021                	j	20402d28 <__metal_local_interrupt_enable+0xae>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:565
    default:
        rc = -1;
20402d22:	57fd                	li	a5,-1
20402d24:	fef42623          	sw	a5,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:567
    }
    return rc;
20402d28:	fec42783          	lw	a5,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:568
}
20402d2c:	853e                	mv	a0,a5
20402d2e:	50b2                	lw	ra,44(sp)
20402d30:	5422                	lw	s0,40(sp)
20402d32:	6145                	addi	sp,sp,48
20402d34:	8082                	ret

20402d36 <__metal_exception_register>:
__metal_exception_register():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:572

int __metal_exception_register (struct metal_interrupt *controller,
                              int ecode, metal_exception_handler_t isr)
{
20402d36:	7179                	addi	sp,sp,-48
20402d38:	d622                	sw	s0,44(sp)
20402d3a:	1800                	addi	s0,sp,48
20402d3c:	fca42e23          	sw	a0,-36(s0)
20402d40:	fcb42c23          	sw	a1,-40(s0)
20402d44:	fcc42a23          	sw	a2,-44(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:573
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
20402d48:	fdc42783          	lw	a5,-36(s0)
20402d4c:	fef42623          	sw	a5,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:575

    if ((ecode < METAL_MAX_EXCEPTION_CODE) && isr) {
20402d50:	fd842703          	lw	a4,-40(s0)
20402d54:	47ad                	li	a5,11
20402d56:	02e7c263          	blt	a5,a4,20402d7a <__metal_exception_register+0x44>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:575 (discriminator 1)
20402d5a:	fd442783          	lw	a5,-44(s0)
20402d5e:	cf91                	beqz	a5,20402d7a <__metal_exception_register+0x44>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:576
        intc->metal_exception_table[ecode] = isr;
20402d60:	fec42703          	lw	a4,-20(s0)
20402d64:	fd842783          	lw	a5,-40(s0)
20402d68:	0e078793          	addi	a5,a5,224
20402d6c:	078a                	slli	a5,a5,0x2
20402d6e:	97ba                	add	a5,a5,a4
20402d70:	fd442703          	lw	a4,-44(s0)
20402d74:	c798                	sw	a4,8(a5)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:577
        return 0;
20402d76:	4781                	li	a5,0
20402d78:	a011                	j	20402d7c <__metal_exception_register+0x46>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:579
    }
    return -1;
20402d7a:	57fd                	li	a5,-1
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:580
}
20402d7c:	853e                	mv	a0,a5
20402d7e:	5432                	lw	s0,44(sp)
20402d80:	6145                	addi	sp,sp,48
20402d82:	8082                	ret

20402d84 <__metal_driver_riscv_cpu_controller_interrupt_init>:
__metal_driver_riscv_cpu_controller_interrupt_init():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:583

void __metal_driver_riscv_cpu_controller_interrupt_init (struct metal_interrupt *controller)
{
20402d84:	7139                	addi	sp,sp,-64
20402d86:	de06                	sw	ra,60(sp)
20402d88:	dc22                	sw	s0,56(sp)
20402d8a:	0080                	addi	s0,sp,64
20402d8c:	fca42623          	sw	a0,-52(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:584
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
20402d90:	fcc42783          	lw	a5,-52(s0)
20402d94:	fef42223          	sw	a5,-28(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:587
    uintptr_t val;

    if ( !intc->init_done ) {
20402d98:	fe442783          	lw	a5,-28(s0)
20402d9c:	43dc                	lw	a5,4(a5)
20402d9e:	10079d63          	bnez	a5,20402eb8 <__metal_driver_riscv_cpu_controller_interrupt_init+0x134>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:589
        /* Disable and clear all interrupt sources */
        __asm__ volatile ("csrc mie, %0" :: "r"(-1));
20402da2:	57fd                	li	a5,-1
20402da4:	3047b073          	csrc	mie,a5
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:590
        __asm__ volatile ("csrc mip, %0" :: "r"(-1));
20402da8:	57fd                	li	a5,-1
20402daa:	3447b073          	csrc	mip,a5
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:594

        /* Read the misa CSR to determine if the delegation registers exist */
        uintptr_t misa;
        __asm__ volatile ("csrr %0, misa" : "=r" (misa));
20402dae:	301027f3          	csrr	a5,misa
20402db2:	fef42023          	sw	a5,-32(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:598

        /* The delegation CSRs exist if user mode interrupts (N extension) or
         * supervisor mode (S extension) are supported */
        if((misa & METAL_ISA_N_EXTENSIONS) || (misa & METAL_ISA_S_EXTENSIONS)) {
20402db6:	fe042703          	lw	a4,-32(s0)
20402dba:	6789                	lui	a5,0x2
20402dbc:	8ff9                	and	a5,a5,a4
20402dbe:	e799                	bnez	a5,20402dcc <__metal_driver_riscv_cpu_controller_interrupt_init+0x48>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:598 (discriminator 1)
20402dc0:	fe042703          	lw	a4,-32(s0)
20402dc4:	000407b7          	lui	a5,0x40
20402dc8:	8ff9                	and	a5,a5,a4
20402dca:	c799                	beqz	a5,20402dd8 <__metal_driver_riscv_cpu_controller_interrupt_init+0x54>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:600
            /* Disable interrupt and exception delegation */
            __asm__ volatile ("csrc mideleg, %0" :: "r"(-1));
20402dcc:	57fd                	li	a5,-1
20402dce:	3037b073          	csrc	mideleg,a5
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:601
            __asm__ volatile ("csrc medeleg, %0" :: "r"(-1));
20402dd2:	57fd                	li	a5,-1
20402dd4:	3027b073          	csrc	medeleg,a5
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:605
        }

        /* The satp CSR exists if supervisor mode (S extension) is supported */
        if(misa & METAL_ISA_S_EXTENSIONS) {
20402dd8:	fe042703          	lw	a4,-32(s0)
20402ddc:	000407b7          	lui	a5,0x40
20402de0:	8ff9                	and	a5,a5,a4
20402de2:	c781                	beqz	a5,20402dea <__metal_driver_riscv_cpu_controller_interrupt_init+0x66>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:607
            /* Clear the entire CSR to make sure that satp.MODE = 0 */
            __asm__ volatile ("csrc satp, %0" :: "r"(-1));
20402de4:	57fd                	li	a5,-1
20402de6:	1807b073          	csrc	satp,a5
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:611
        }

        /* Default to use direct interrupt, setup sw cb table*/
        for (int i = 0; i < METAL_MAX_MI; i++) {
20402dea:	fe042623          	sw	zero,-20(s0)
20402dee:	a0b9                	j	20402e3c <__metal_driver_riscv_cpu_controller_interrupt_init+0xb8>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:612 (discriminator 3)
            intc->metal_int_table[i].handler = NULL;
20402df0:	fe442683          	lw	a3,-28(s0)
20402df4:	fec42703          	lw	a4,-20(s0)
20402df8:	87ba                	mv	a5,a4
20402dfa:	0786                	slli	a5,a5,0x1
20402dfc:	97ba                	add	a5,a5,a4
20402dfe:	078e                	slli	a5,a5,0x3
20402e00:	97b6                	add	a5,a5,a3
20402e02:	0807a823          	sw	zero,144(a5) # 40090 <__heap_size+0x3f890>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:613 (discriminator 3)
            intc->metal_int_table[i].sub_int = NULL;
20402e06:	fe442683          	lw	a3,-28(s0)
20402e0a:	fec42703          	lw	a4,-20(s0)
20402e0e:	87ba                	mv	a5,a4
20402e10:	0786                	slli	a5,a5,0x1
20402e12:	97ba                	add	a5,a5,a4
20402e14:	078e                	slli	a5,a5,0x3
20402e16:	97b6                	add	a5,a5,a3
20402e18:	0807aa23          	sw	zero,148(a5)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:614 (discriminator 3)
            intc->metal_int_table[i].exint_data = NULL;
20402e1c:	fe442683          	lw	a3,-28(s0)
20402e20:	fec42703          	lw	a4,-20(s0)
20402e24:	87ba                	mv	a5,a4
20402e26:	0786                	slli	a5,a5,0x1
20402e28:	97ba                	add	a5,a5,a4
20402e2a:	078e                	slli	a5,a5,0x3
20402e2c:	97b6                	add	a5,a5,a3
20402e2e:	0807ac23          	sw	zero,152(a5)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:611 (discriminator 3)
        for (int i = 0; i < METAL_MAX_MI; i++) {
20402e32:	fec42783          	lw	a5,-20(s0)
20402e36:	0785                	addi	a5,a5,1
20402e38:	fef42623          	sw	a5,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:611 (discriminator 1)
20402e3c:	fec42703          	lw	a4,-20(s0)
20402e40:	47fd                	li	a5,31
20402e42:	fae7d7e3          	bge	a5,a4,20402df0 <__metal_driver_riscv_cpu_controller_interrupt_init+0x6c>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:616
	}
	for (int i = 0; i < METAL_MAX_ME; i++) {
20402e46:	fe042423          	sw	zero,-24(s0)
20402e4a:	a01d                	j	20402e70 <__metal_driver_riscv_cpu_controller_interrupt_init+0xec>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:617 (discriminator 3)
	    intc->metal_exception_table[i] = __metal_default_exception_handler;
20402e4c:	fe442703          	lw	a4,-28(s0)
20402e50:	fe842783          	lw	a5,-24(s0)
20402e54:	0e078793          	addi	a5,a5,224
20402e58:	078a                	slli	a5,a5,0x2
20402e5a:	97ba                	add	a5,a5,a4
20402e5c:	20402737          	lui	a4,0x20402
20402e60:	dc670713          	addi	a4,a4,-570 # 20401dc6 <__metal_default_exception_handler>
20402e64:	c798                	sw	a4,8(a5)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:616 (discriminator 3)
	for (int i = 0; i < METAL_MAX_ME; i++) {
20402e66:	fe842783          	lw	a5,-24(s0)
20402e6a:	0785                	addi	a5,a5,1
20402e6c:	fef42423          	sw	a5,-24(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:616 (discriminator 1)
20402e70:	fe842703          	lw	a4,-24(s0)
20402e74:	47ad                	li	a5,11
20402e76:	fce7dbe3          	bge	a5,a4,20402e4c <__metal_driver_riscv_cpu_controller_interrupt_init+0xc8>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:619
	}
        __metal_controller_interrupt_vector(METAL_DIRECT_MODE, (void *)(uintptr_t)&__metal_exception_handler);
20402e7a:	204027b7          	lui	a5,0x20402
20402e7e:	08078593          	addi	a1,a5,128 # 20402080 <__metal_exception_handler>
20402e82:	4501                	li	a0,0
20402e84:	331d                	jal	20402baa <__metal_controller_interrupt_vector>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:620
	__asm__ volatile ("csrr %0, misa" : "=r"(val));
20402e86:	301027f3          	csrr	a5,misa
20402e8a:	fcf42e23          	sw	a5,-36(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:621
	if (val & (METAL_ISA_D_EXTENSIONS | METAL_ISA_F_EXTENSIONS | METAL_ISA_Q_EXTENSIONS)) {
20402e8e:	fdc42703          	lw	a4,-36(s0)
20402e92:	67c1                	lui	a5,0x10
20402e94:	02878793          	addi	a5,a5,40 # 10028 <__heap_size+0xf828>
20402e98:	8ff9                	and	a5,a5,a4
20402e9a:	cb99                	beqz	a5,20402eb0 <__metal_driver_riscv_cpu_controller_interrupt_init+0x12c>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:623
	    /* Floating point architecture, so turn on FP register saving*/
	    __asm__ volatile ("csrr %0, mstatus" : "=r"(val));
20402e9c:	300027f3          	csrr	a5,mstatus
20402ea0:	fcf42e23          	sw	a5,-36(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:624
	    __asm__ volatile ("csrw mstatus, %0" :: "r"(val | METAL_MSTATUS_FS_INIT));
20402ea4:	fdc42703          	lw	a4,-36(s0)
20402ea8:	6789                	lui	a5,0x2
20402eaa:	8fd9                	or	a5,a5,a4
20402eac:	30079073          	csrw	mstatus,a5
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:626
	}
	intc->init_done = 1;
20402eb0:	fe442783          	lw	a5,-28(s0)
20402eb4:	4705                	li	a4,1
20402eb6:	c3d8                	sw	a4,4(a5)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:628
    }
}
20402eb8:	0001                	nop
20402eba:	50f2                	lw	ra,60(sp)
20402ebc:	5462                	lw	s0,56(sp)
20402ebe:	6121                	addi	sp,sp,64
20402ec0:	8082                	ret

20402ec2 <__metal_driver_riscv_cpu_controller_interrupt_register>:
__metal_driver_riscv_cpu_controller_interrupt_register():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:633

int __metal_driver_riscv_cpu_controller_interrupt_register(struct metal_interrupt *controller,
							 int id, metal_interrupt_handler_t isr,
							 void *priv)
{
20402ec2:	7179                	addi	sp,sp,-48
20402ec4:	d606                	sw	ra,44(sp)
20402ec6:	d422                	sw	s0,40(sp)
20402ec8:	1800                	addi	s0,sp,48
20402eca:	fca42e23          	sw	a0,-36(s0)
20402ece:	fcb42c23          	sw	a1,-40(s0)
20402ed2:	fcc42a23          	sw	a2,-44(s0)
20402ed6:	fcd42823          	sw	a3,-48(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:634
    int rc = 0;
20402eda:	fe042623          	sw	zero,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:635
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
20402ede:	fdc42783          	lw	a5,-36(s0)
20402ee2:	fef42423          	sw	a5,-24(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:637
 
    if ( !__metal_valid_interrupt_id(id) ) {
20402ee6:	fd842503          	lw	a0,-40(s0)
20402eea:	3ba1                	jal	20402c42 <__metal_valid_interrupt_id>
20402eec:	87aa                	mv	a5,a0
20402eee:	e399                	bnez	a5,20402ef4 <__metal_driver_riscv_cpu_controller_interrupt_register+0x32>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:638
        return -11;
20402ef0:	57d5                	li	a5,-11
20402ef2:	aa11                	j	20403006 <__metal_driver_riscv_cpu_controller_interrupt_register+0x144>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:641
    }

    if (isr) {
20402ef4:	fd442783          	lw	a5,-44(s0)
20402ef8:	cf85                	beqz	a5,20402f30 <__metal_driver_riscv_cpu_controller_interrupt_register+0x6e>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:642
        intc->metal_int_table[id].handler = isr;
20402efa:	fe842683          	lw	a3,-24(s0)
20402efe:	fd842703          	lw	a4,-40(s0)
20402f02:	87ba                	mv	a5,a4
20402f04:	0786                	slli	a5,a5,0x1
20402f06:	97ba                	add	a5,a5,a4
20402f08:	078e                	slli	a5,a5,0x3
20402f0a:	97b6                	add	a5,a5,a3
20402f0c:	fd442703          	lw	a4,-44(s0)
20402f10:	08e7a823          	sw	a4,144(a5) # 2090 <__heap_size+0x1890>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:643
        intc->metal_int_table[id].exint_data = priv;
20402f14:	fe842683          	lw	a3,-24(s0)
20402f18:	fd842703          	lw	a4,-40(s0)
20402f1c:	87ba                	mv	a5,a4
20402f1e:	0786                	slli	a5,a5,0x1
20402f20:	97ba                	add	a5,a5,a4
20402f22:	078e                	slli	a5,a5,0x3
20402f24:	97b6                	add	a5,a5,a3
20402f26:	fd042703          	lw	a4,-48(s0)
20402f2a:	08e7ac23          	sw	a4,152(a5)
20402f2e:	a8d1                	j	20403002 <__metal_driver_riscv_cpu_controller_interrupt_register+0x140>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:645
    } else {
	switch (id) {
20402f30:	fd842783          	lw	a5,-40(s0)
20402f34:	17f5                	addi	a5,a5,-3
20402f36:	4771                	li	a4,28
20402f38:	0cf76263          	bltu	a4,a5,20402ffc <__metal_driver_riscv_cpu_controller_interrupt_register+0x13a>
20402f3c:	00279713          	slli	a4,a5,0x2
20402f40:	204067b7          	lui	a5,0x20406
20402f44:	47878793          	addi	a5,a5,1144 # 20406478 <__metal_driver_vtable_riscv_clint0+0x154>
20402f48:	97ba                	add	a5,a5,a4
20402f4a:	439c                	lw	a5,0(a5)
20402f4c:	8782                	jr	a5
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:647
	case METAL_INTERRUPT_ID_SW:
            intc->metal_int_table[id].handler = __metal_default_sw_handler;
20402f4e:	fe842683          	lw	a3,-24(s0)
20402f52:	fd842703          	lw	a4,-40(s0)
20402f56:	87ba                	mv	a5,a4
20402f58:	0786                	slli	a5,a5,0x1
20402f5a:	97ba                	add	a5,a5,a4
20402f5c:	078e                	slli	a5,a5,0x3
20402f5e:	97b6                	add	a5,a5,a3
20402f60:	20402737          	lui	a4,0x20402
20402f64:	eb670713          	addi	a4,a4,-330 # 20401eb6 <__metal_default_sw_handler>
20402f68:	08e7a823          	sw	a4,144(a5)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:648
            intc->metal_int_table[id].sub_int = priv;
20402f6c:	fe842683          	lw	a3,-24(s0)
20402f70:	fd842703          	lw	a4,-40(s0)
20402f74:	87ba                	mv	a5,a4
20402f76:	0786                	slli	a5,a5,0x1
20402f78:	97ba                	add	a5,a5,a4
20402f7a:	078e                	slli	a5,a5,0x3
20402f7c:	97b6                	add	a5,a5,a3
20402f7e:	fd042703          	lw	a4,-48(s0)
20402f82:	08e7aa23          	sw	a4,148(a5)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:649
	  break;
20402f86:	a8b5                	j	20403002 <__metal_driver_riscv_cpu_controller_interrupt_register+0x140>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:651
	case METAL_INTERRUPT_ID_TMR:
            intc->metal_int_table[id].handler = __metal_default_timer_handler;
20402f88:	fe842683          	lw	a3,-24(s0)
20402f8c:	fd842703          	lw	a4,-40(s0)
20402f90:	87ba                	mv	a5,a4
20402f92:	0786                	slli	a5,a5,0x1
20402f94:	97ba                	add	a5,a5,a4
20402f96:	078e                	slli	a5,a5,0x3
20402f98:	97b6                	add	a5,a5,a3
20402f9a:	20402737          	lui	a4,0x20402
20402f9e:	fb070713          	addi	a4,a4,-80 # 20401fb0 <__metal_default_timer_handler>
20402fa2:	08e7a823          	sw	a4,144(a5)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:652
            intc->metal_int_table[id].sub_int = priv;
20402fa6:	fe842683          	lw	a3,-24(s0)
20402faa:	fd842703          	lw	a4,-40(s0)
20402fae:	87ba                	mv	a5,a4
20402fb0:	0786                	slli	a5,a5,0x1
20402fb2:	97ba                	add	a5,a5,a4
20402fb4:	078e                	slli	a5,a5,0x3
20402fb6:	97b6                	add	a5,a5,a3
20402fb8:	fd042703          	lw	a4,-48(s0)
20402fbc:	08e7aa23          	sw	a4,148(a5)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:653
	  break;
20402fc0:	a089                	j	20403002 <__metal_driver_riscv_cpu_controller_interrupt_register+0x140>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:671
	case METAL_INTERRUPT_ID_LC11:
	case METAL_INTERRUPT_ID_LC12:
	case METAL_INTERRUPT_ID_LC13:
	case METAL_INTERRUPT_ID_LC14:
	case METAL_INTERRUPT_ID_LC15:
            intc->metal_int_table[id].handler = __metal_default_interrupt_handler;
20402fc2:	fe842683          	lw	a3,-24(s0)
20402fc6:	fd842703          	lw	a4,-40(s0)
20402fca:	87ba                	mv	a5,a4
20402fcc:	0786                	slli	a5,a5,0x1
20402fce:	97ba                	add	a5,a5,a4
20402fd0:	078e                	slli	a5,a5,0x3
20402fd2:	97b6                	add	a5,a5,a3
20402fd4:	20402737          	lui	a4,0x20402
20402fd8:	dde70713          	addi	a4,a4,-546 # 20401dde <__metal_default_interrupt_handler>
20402fdc:	08e7a823          	sw	a4,144(a5)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:672
            intc->metal_int_table[id].sub_int = priv;
20402fe0:	fe842683          	lw	a3,-24(s0)
20402fe4:	fd842703          	lw	a4,-40(s0)
20402fe8:	87ba                	mv	a5,a4
20402fea:	0786                	slli	a5,a5,0x1
20402fec:	97ba                	add	a5,a5,a4
20402fee:	078e                	slli	a5,a5,0x3
20402ff0:	97b6                	add	a5,a5,a3
20402ff2:	fd042703          	lw	a4,-48(s0)
20402ff6:	08e7aa23          	sw	a4,148(a5)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:673
	  break;
20402ffa:	a021                	j	20403002 <__metal_driver_riscv_cpu_controller_interrupt_register+0x140>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:675
	default:
	  rc = -12;
20402ffc:	57d1                	li	a5,-12
20402ffe:	fef42623          	sw	a5,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:678
	}
    }
    return rc;
20403002:	fec42783          	lw	a5,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:679
}
20403006:	853e                	mv	a0,a5
20403008:	50b2                	lw	ra,44(sp)
2040300a:	5422                	lw	s0,40(sp)
2040300c:	6145                	addi	sp,sp,48
2040300e:	8082                	ret

20403010 <__metal_driver_riscv_cpu_controller_interrupt_enable>:
__metal_driver_riscv_cpu_controller_interrupt_enable():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:683

int __metal_driver_riscv_cpu_controller_interrupt_enable (struct metal_interrupt *controller,
                                                        int id)
{
20403010:	1101                	addi	sp,sp,-32
20403012:	ce06                	sw	ra,28(sp)
20403014:	cc22                	sw	s0,24(sp)
20403016:	1000                	addi	s0,sp,32
20403018:	fea42623          	sw	a0,-20(s0)
2040301c:	feb42423          	sw	a1,-24(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:684
    return __metal_local_interrupt_enable(controller, id, METAL_ENABLE);
20403020:	fe842783          	lw	a5,-24(s0)
20403024:	4605                	li	a2,1
20403026:	85be                	mv	a1,a5
20403028:	fec42503          	lw	a0,-20(s0)
2040302c:	c4fff0ef          	jal	ra,20402c7a <__metal_local_interrupt_enable>
20403030:	87aa                	mv	a5,a0
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:685
}
20403032:	853e                	mv	a0,a5
20403034:	40f2                	lw	ra,28(sp)
20403036:	4462                	lw	s0,24(sp)
20403038:	6105                	addi	sp,sp,32
2040303a:	8082                	ret

2040303c <__metal_driver_riscv_cpu_controller_interrupt_disable>:
__metal_driver_riscv_cpu_controller_interrupt_disable():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:689

int __metal_driver_riscv_cpu_controller_interrupt_disable (struct metal_interrupt *controller,
                                                         int id)
{   
2040303c:	1101                	addi	sp,sp,-32
2040303e:	ce06                	sw	ra,28(sp)
20403040:	cc22                	sw	s0,24(sp)
20403042:	1000                	addi	s0,sp,32
20403044:	fea42623          	sw	a0,-20(s0)
20403048:	feb42423          	sw	a1,-24(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:690
    return __metal_local_interrupt_enable(controller, id, METAL_DISABLE);
2040304c:	fe842783          	lw	a5,-24(s0)
20403050:	4601                	li	a2,0
20403052:	85be                	mv	a1,a5
20403054:	fec42503          	lw	a0,-20(s0)
20403058:	c23ff0ef          	jal	ra,20402c7a <__metal_local_interrupt_enable>
2040305c:	87aa                	mv	a5,a0
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:691
}
2040305e:	853e                	mv	a0,a5
20403060:	40f2                	lw	ra,28(sp)
20403062:	4462                	lw	s0,24(sp)
20403064:	6105                	addi	sp,sp,32
20403066:	8082                	ret

20403068 <__metal_driver_riscv_cpu_controller_get_vector_mode>:
__metal_driver_riscv_cpu_controller_get_vector_mode():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:722
    }
    return -1;
}

metal_vector_mode __metal_driver_riscv_cpu_controller_get_vector_mode (struct metal_interrupt *controller)
{   
20403068:	1101                	addi	sp,sp,-32
2040306a:	ce06                	sw	ra,28(sp)
2040306c:	cc22                	sw	s0,24(sp)
2040306e:	1000                	addi	s0,sp,32
20403070:	fea42623          	sw	a0,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:723
    return __metal_controller_interrupt_vector_mode();
20403074:	ae7ff0ef          	jal	ra,20402b5a <__metal_controller_interrupt_vector_mode>
20403078:	87aa                	mv	a5,a0
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:724
}
2040307a:	853e                	mv	a0,a5
2040307c:	40f2                	lw	ra,28(sp)
2040307e:	4462                	lw	s0,24(sp)
20403080:	6105                	addi	sp,sp,32
20403082:	8082                	ret

20403084 <__metal_driver_riscv_cpu_controller_set_vector_mode>:
__metal_driver_riscv_cpu_controller_set_vector_mode():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:728

int __metal_driver_riscv_cpu_controller_set_vector_mode (struct metal_interrupt *controller,
                                                         metal_vector_mode mode)
{   
20403084:	7179                	addi	sp,sp,-48
20403086:	d606                	sw	ra,44(sp)
20403088:	d422                	sw	s0,40(sp)
2040308a:	1800                	addi	s0,sp,48
2040308c:	fca42e23          	sw	a0,-36(s0)
20403090:	fcb42c23          	sw	a1,-40(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:729
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
20403094:	fdc42783          	lw	a5,-36(s0)
20403098:	fef42623          	sw	a5,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:731

    if (mode == METAL_DIRECT_MODE) {
2040309c:	fd842783          	lw	a5,-40(s0)
204030a0:	eb99                	bnez	a5,204030b6 <__metal_driver_riscv_cpu_controller_set_vector_mode+0x32>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:732
        __metal_controller_interrupt_vector(mode, (void *)(uintptr_t)&__metal_exception_handler);
204030a2:	204027b7          	lui	a5,0x20402
204030a6:	08078593          	addi	a1,a5,128 # 20402080 <__metal_exception_handler>
204030aa:	fd842503          	lw	a0,-40(s0)
204030ae:	afdff0ef          	jal	ra,20402baa <__metal_controller_interrupt_vector>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:733
            return 0;
204030b2:	4781                	li	a5,0
204030b4:	a00d                	j	204030d6 <__metal_driver_riscv_cpu_controller_set_vector_mode+0x52>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:735
    }
    if (mode == METAL_VECTOR_MODE) {
204030b6:	fd842703          	lw	a4,-40(s0)
204030ba:	4785                	li	a5,1
204030bc:	00f71c63          	bne	a4,a5,204030d4 <__metal_driver_riscv_cpu_controller_set_vector_mode+0x50>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:736
        __metal_controller_interrupt_vector(mode, (void *)__metal_vector_table);
204030c0:	204057b7          	lui	a5,0x20405
204030c4:	78078593          	addi	a1,a5,1920 # 20405780 <__metal_vector_table>
204030c8:	fd842503          	lw	a0,-40(s0)
204030cc:	adfff0ef          	jal	ra,20402baa <__metal_controller_interrupt_vector>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:737
        return 0;
204030d0:	4781                	li	a5,0
204030d2:	a011                	j	204030d6 <__metal_driver_riscv_cpu_controller_set_vector_mode+0x52>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:739
    }
    return -1;
204030d4:	57fd                	li	a5,-1
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:740
}
204030d6:	853e                	mv	a0,a5
204030d8:	50b2                	lw	ra,44(sp)
204030da:	5422                	lw	s0,40(sp)
204030dc:	6145                	addi	sp,sp,48
204030de:	8082                	ret

204030e0 <__metal_driver_riscv_cpu_controller_command_request>:
__metal_driver_riscv_cpu_controller_command_request():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:744

int __metal_driver_riscv_cpu_controller_command_request (struct metal_interrupt *controller,
						       int cmd, void *data)
{
204030e0:	1101                	addi	sp,sp,-32
204030e2:	ce22                	sw	s0,28(sp)
204030e4:	1000                	addi	s0,sp,32
204030e6:	fea42623          	sw	a0,-20(s0)
204030ea:	feb42423          	sw	a1,-24(s0)
204030ee:	fec42223          	sw	a2,-28(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:746
    /* NOP for now, unless local interrupt lines the like of clic, clint, plic */
    return 0;
204030f2:	4781                	li	a5,0
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:747
}
204030f4:	853e                	mv	a0,a5
204030f6:	4472                	lw	s0,28(sp)
204030f8:	6105                	addi	sp,sp,32
204030fa:	8082                	ret

204030fc <__metal_driver_cpu_mcycle_get>:
__metal_driver_cpu_mcycle_get():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:752

/* CPU driver !!! */

unsigned long long __metal_driver_cpu_mcycle_get(struct metal_cpu *cpu)
{
204030fc:	7139                	addi	sp,sp,-64
204030fe:	de22                	sw	s0,60(sp)
20403100:	0080                	addi	s0,sp,64
20403102:	fca42623          	sw	a0,-52(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:753
    unsigned long long val = 0;
20403106:	4301                	li	t1,0
20403108:	4381                	li	t2,0
2040310a:	fe642423          	sw	t1,-24(s0)
2040310e:	fe742623          	sw	t2,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:758

#if __riscv_xlen == 32
    unsigned long hi, hi1, lo;

    __asm__ volatile ("csrr %0, mcycleh" : "=r"(hi));
20403112:	b8002573          	csrr	a0,mcycleh
20403116:	fea42223          	sw	a0,-28(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:759
    __asm__ volatile ("csrr %0, mcycle" : "=r"(lo));
2040311a:	b0002573          	csrr	a0,mcycle
2040311e:	fea42023          	sw	a0,-32(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:760
    __asm__ volatile ("csrr %0, mcycleh" : "=r"(hi1));
20403122:	b8002573          	csrr	a0,mcycleh
20403126:	fca42e23          	sw	a0,-36(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:761
    if (hi == hi1) {
2040312a:	fe442883          	lw	a7,-28(s0)
2040312e:	fdc42503          	lw	a0,-36(s0)
20403132:	02a89563          	bne	a7,a0,2040315c <__metal_driver_cpu_mcycle_get+0x60>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:762
        val = ((unsigned long long)hi << 32) | lo;
20403136:	fe442503          	lw	a0,-28(s0)
2040313a:	85aa                	mv	a1,a0
2040313c:	4601                	li	a2,0
2040313e:	00059813          	slli	a6,a1,0x0
20403142:	4781                	li	a5,0
20403144:	fe042603          	lw	a2,-32(s0)
20403148:	86b2                	mv	a3,a2
2040314a:	4701                	li	a4,0
2040314c:	00d7e633          	or	a2,a5,a3
20403150:	fec42423          	sw	a2,-24(s0)
20403154:	00e867b3          	or	a5,a6,a4
20403158:	fef42623          	sw	a5,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:768
    }
#else
    __asm__ volatile ("csrr %0, mcycle" : "=r"(val));
#endif

    return val;
2040315c:	fe842783          	lw	a5,-24(s0)
20403160:	fec42803          	lw	a6,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:769
}
20403164:	853e                	mv	a0,a5
20403166:	85c2                	mv	a1,a6
20403168:	5472                	lw	s0,60(sp)
2040316a:	6121                	addi	sp,sp,64
2040316c:	8082                	ret

2040316e <__metal_driver_cpu_timebase_get>:
__metal_driver_cpu_timebase_get():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:772

unsigned long long __metal_driver_cpu_timebase_get(struct metal_cpu *cpu)
{
2040316e:	7179                	addi	sp,sp,-48
20403170:	d606                	sw	ra,44(sp)
20403172:	d422                	sw	s0,40(sp)
20403174:	d24a                	sw	s2,36(sp)
20403176:	d04e                	sw	s3,32(sp)
20403178:	1800                	addi	s0,sp,48
2040317a:	fca42e23          	sw	a0,-36(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:774
  int timebase;
    if (!cpu) {
2040317e:	fdc42783          	lw	a5,-36(s0)
20403182:	e781                	bnez	a5,2040318a <__metal_driver_cpu_timebase_get+0x1c>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:775
        return 0;
20403184:	4901                	li	s2,0
20403186:	4981                	li	s3,0
20403188:	a821                	j	204031a0 <__metal_driver_cpu_timebase_get+0x32>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:778
    }

    timebase = __metal_driver_cpu_timebase((struct metal_cpu *)cpu);
2040318a:	fdc42503          	lw	a0,-36(s0)
2040318e:	a77fe0ef          	jal	ra,20401c04 <__metal_driver_cpu_timebase>
20403192:	fea42623          	sw	a0,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:779
    return timebase;
20403196:	fec42783          	lw	a5,-20(s0)
2040319a:	893e                	mv	s2,a5
2040319c:	87fd                	srai	a5,a5,0x1f
2040319e:	89be                	mv	s3,a5
204031a0:	87ca                	mv	a5,s2
204031a2:	884e                	mv	a6,s3
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:780
}
204031a4:	853e                	mv	a0,a5
204031a6:	85c2                	mv	a1,a6
204031a8:	50b2                	lw	ra,44(sp)
204031aa:	5422                	lw	s0,40(sp)
204031ac:	5912                	lw	s2,36(sp)
204031ae:	5982                	lw	s3,32(sp)
204031b0:	6145                	addi	sp,sp,48
204031b2:	8082                	ret

204031b4 <__metal_driver_cpu_mtime_get>:
__metal_driver_cpu_mtime_get():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:783

unsigned long long  __metal_driver_cpu_mtime_get (struct metal_cpu *cpu)
{
204031b4:	7179                	addi	sp,sp,-48
204031b6:	d606                	sw	ra,44(sp)
204031b8:	d422                	sw	s0,40(sp)
204031ba:	1800                	addi	s0,sp,48
204031bc:	fca42e23          	sw	a0,-36(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:784
    unsigned long long time = 0;
204031c0:	4781                	li	a5,0
204031c2:	4801                	li	a6,0
204031c4:	fef42023          	sw	a5,-32(s0)
204031c8:	ff042223          	sw	a6,-28(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:787
    struct metal_interrupt *tmr_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
204031cc:	fdc42503          	lw	a0,-36(s0)
204031d0:	a5ffe0ef          	jal	ra,20401c2e <__metal_driver_cpu_interrupt_controller>
204031d4:	fea42623          	sw	a0,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:789

    if (intc) {
204031d8:	fec42783          	lw	a5,-20(s0)
204031dc:	c78d                	beqz	a5,20403206 <__metal_driver_cpu_mtime_get+0x52>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:790
        tmr_intc = intc->metal_int_table[METAL_INTERRUPT_ID_TMR].sub_int;
204031de:	fec42783          	lw	a5,-20(s0)
204031e2:	13c7a783          	lw	a5,316(a5)
204031e6:	fef42423          	sw	a5,-24(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:791
        if (tmr_intc) {
204031ea:	fe842783          	lw	a5,-24(s0)
204031ee:	cf81                	beqz	a5,20403206 <__metal_driver_cpu_mtime_get+0x52>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:792
            tmr_intc->vtable->command_request(tmr_intc,
204031f0:	fe842783          	lw	a5,-24(s0)
204031f4:	439c                	lw	a5,0(a5)
204031f6:	43f8                	lw	a4,68(a5)
204031f8:	fe040793          	addi	a5,s0,-32
204031fc:	863e                	mv	a2,a5
204031fe:	4585                	li	a1,1
20403200:	fe842503          	lw	a0,-24(s0)
20403204:	9702                	jalr	a4
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:796
                                              METAL_TIMER_MTIME_GET, &time);
        }
    }
    return time;
20403206:	fe042783          	lw	a5,-32(s0)
2040320a:	fe442803          	lw	a6,-28(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:797
}
2040320e:	853e                	mv	a0,a5
20403210:	85c2                	mv	a1,a6
20403212:	50b2                	lw	ra,44(sp)
20403214:	5422                	lw	s0,40(sp)
20403216:	6145                	addi	sp,sp,48
20403218:	8082                	ret

2040321a <__metal_driver_cpu_mtimecmp_set>:
__metal_driver_cpu_mtimecmp_set():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:800

int __metal_driver_cpu_mtimecmp_set (struct metal_cpu *cpu, unsigned long long time)
{
2040321a:	7179                	addi	sp,sp,-48
2040321c:	d606                	sw	ra,44(sp)
2040321e:	d422                	sw	s0,40(sp)
20403220:	d226                	sw	s1,36(sp)
20403222:	1800                	addi	s0,sp,48
20403224:	fca42e23          	sw	a0,-36(s0)
20403228:	fcb42823          	sw	a1,-48(s0)
2040322c:	fcc42a23          	sw	a2,-44(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:801
    int rc = -1;
20403230:	57fd                	li	a5,-1
20403232:	fef42623          	sw	a5,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:804
    struct metal_interrupt *tmr_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
20403236:	fdc42503          	lw	a0,-36(s0)
2040323a:	9f5fe0ef          	jal	ra,20401c2e <__metal_driver_cpu_interrupt_controller>
2040323e:	fea42423          	sw	a0,-24(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:806

    if (intc) {
20403242:	fe842783          	lw	a5,-24(s0)
20403246:	cf8d                	beqz	a5,20403280 <__metal_driver_cpu_mtimecmp_set+0x66>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:807
        tmr_intc = intc->metal_int_table[METAL_INTERRUPT_ID_TMR].sub_int;
20403248:	fe842783          	lw	a5,-24(s0)
2040324c:	13c7a783          	lw	a5,316(a5)
20403250:	fef42223          	sw	a5,-28(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:808
        if (tmr_intc) {
20403254:	fe442783          	lw	a5,-28(s0)
20403258:	c785                	beqz	a5,20403280 <__metal_driver_cpu_mtimecmp_set+0x66>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:809
            rc = tmr_intc->vtable->mtimecmp_set(tmr_intc,
2040325a:	fe442783          	lw	a5,-28(s0)
2040325e:	439c                	lw	a5,0(a5)
20403260:	47a4                	lw	s1,72(a5)
20403262:	fdc42503          	lw	a0,-36(s0)
20403266:	97bfe0ef          	jal	ra,20401be0 <__metal_driver_cpu_hartid>
2040326a:	87aa                	mv	a5,a0
2040326c:	fd042603          	lw	a2,-48(s0)
20403270:	fd442683          	lw	a3,-44(s0)
20403274:	85be                	mv	a1,a5
20403276:	fe442503          	lw	a0,-28(s0)
2040327a:	9482                	jalr	s1
2040327c:	fea42623          	sw	a0,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:814
                                                __metal_driver_cpu_hartid(cpu),
                                                time);
        }
    }
    return rc;
20403280:	fec42783          	lw	a5,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:815
}
20403284:	853e                	mv	a0,a5
20403286:	50b2                	lw	ra,44(sp)
20403288:	5422                	lw	s0,40(sp)
2040328a:	5492                	lw	s1,36(sp)
2040328c:	6145                	addi	sp,sp,48
2040328e:	8082                	ret

20403290 <__metal_driver_cpu_timer_controller_interrupt>:
__metal_driver_cpu_timer_controller_interrupt():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:819

struct metal_interrupt *
__metal_driver_cpu_timer_controller_interrupt(struct metal_cpu *cpu)
{
20403290:	1101                	addi	sp,sp,-32
20403292:	ce22                	sw	s0,28(sp)
20403294:	1000                	addi	s0,sp,32
20403296:	fea42623          	sw	a0,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:821
#ifdef __METAL_DT_RISCV_CLINT0_HANDLE
    return __METAL_DT_RISCV_CLINT0_HANDLE;
2040329a:	800007b7          	lui	a5,0x80000
2040329e:	79c78793          	addi	a5,a5,1948 # 8000079c <metal_segment_heap_target_end+0xfffff304>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:830
#else
#pragma message("There is no interrupt controller for Timer interrupt")
    return NULL;
#endif
#endif
}
204032a2:	853e                	mv	a0,a5
204032a4:	4472                	lw	s0,28(sp)
204032a6:	6105                	addi	sp,sp,32
204032a8:	8082                	ret

204032aa <__metal_driver_cpu_get_timer_interrupt_id>:
__metal_driver_cpu_get_timer_interrupt_id():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:833

int __metal_driver_cpu_get_timer_interrupt_id(struct metal_cpu *cpu)
{
204032aa:	1101                	addi	sp,sp,-32
204032ac:	ce22                	sw	s0,28(sp)
204032ae:	1000                	addi	s0,sp,32
204032b0:	fea42623          	sw	a0,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:834
    return METAL_INTERRUPT_ID_TMR;
204032b4:	479d                	li	a5,7
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:835
}
204032b6:	853e                	mv	a0,a5
204032b8:	4472                	lw	s0,28(sp)
204032ba:	6105                	addi	sp,sp,32
204032bc:	8082                	ret

204032be <__metal_driver_cpu_sw_controller_interrupt>:
__metal_driver_cpu_sw_controller_interrupt():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:839

struct metal_interrupt *
__metal_driver_cpu_sw_controller_interrupt(struct metal_cpu *cpu)
{
204032be:	1101                	addi	sp,sp,-32
204032c0:	ce22                	sw	s0,28(sp)
204032c2:	1000                	addi	s0,sp,32
204032c4:	fea42623          	sw	a0,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:841
#ifdef __METAL_DT_RISCV_CLINT0_HANDLE
    return __METAL_DT_RISCV_CLINT0_HANDLE;
204032c8:	800007b7          	lui	a5,0x80000
204032cc:	79c78793          	addi	a5,a5,1948 # 8000079c <metal_segment_heap_target_end+0xfffff304>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:850
#else
#pragma message("There is no interrupt controller for Software interrupt")
    return NULL;
#endif
#endif
}
204032d0:	853e                	mv	a0,a5
204032d2:	4472                	lw	s0,28(sp)
204032d4:	6105                	addi	sp,sp,32
204032d6:	8082                	ret

204032d8 <__metal_driver_cpu_get_sw_interrupt_id>:
__metal_driver_cpu_get_sw_interrupt_id():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:853

int __metal_driver_cpu_get_sw_interrupt_id(struct metal_cpu *cpu)
{
204032d8:	1101                	addi	sp,sp,-32
204032da:	ce22                	sw	s0,28(sp)
204032dc:	1000                	addi	s0,sp,32
204032de:	fea42623          	sw	a0,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:854
    return METAL_INTERRUPT_ID_SW;
204032e2:	478d                	li	a5,3
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:855
}
204032e4:	853e                	mv	a0,a5
204032e6:	4472                	lw	s0,28(sp)
204032e8:	6105                	addi	sp,sp,32
204032ea:	8082                	ret

204032ec <__metal_driver_cpu_set_sw_ipi>:
__metal_driver_cpu_set_sw_ipi():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:858

int __metal_driver_cpu_set_sw_ipi (struct metal_cpu *cpu, int hartid)
{
204032ec:	7179                	addi	sp,sp,-48
204032ee:	d606                	sw	ra,44(sp)
204032f0:	d422                	sw	s0,40(sp)
204032f2:	1800                	addi	s0,sp,48
204032f4:	fca42e23          	sw	a0,-36(s0)
204032f8:	fcb42c23          	sw	a1,-40(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:859
    int rc = -1;
204032fc:	57fd                	li	a5,-1
204032fe:	fef42623          	sw	a5,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:862
    struct metal_interrupt *sw_intc;
    struct __metal_driver_riscv_cpu_intc *intc = 
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
20403302:	fdc42503          	lw	a0,-36(s0)
20403306:	929fe0ef          	jal	ra,20401c2e <__metal_driver_cpu_interrupt_controller>
2040330a:	fea42423          	sw	a0,-24(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:864

    if (intc) {
2040330e:	fe842783          	lw	a5,-24(s0)
20403312:	c79d                	beqz	a5,20403340 <__metal_driver_cpu_set_sw_ipi+0x54>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:865
        sw_intc = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
20403314:	fe842783          	lw	a5,-24(s0)
20403318:	0dc7a783          	lw	a5,220(a5)
2040331c:	fef42223          	sw	a5,-28(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:866
        if (sw_intc) {
20403320:	fe442783          	lw	a5,-28(s0)
20403324:	cf91                	beqz	a5,20403340 <__metal_driver_cpu_set_sw_ipi+0x54>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:867
            rc = sw_intc->vtable->command_request(sw_intc,
20403326:	fe442783          	lw	a5,-28(s0)
2040332a:	439c                	lw	a5,0(a5)
2040332c:	43f8                	lw	a4,68(a5)
2040332e:	fd840793          	addi	a5,s0,-40
20403332:	863e                	mv	a2,a5
20403334:	458d                	li	a1,3
20403336:	fe442503          	lw	a0,-28(s0)
2040333a:	9702                	jalr	a4
2040333c:	fea42623          	sw	a0,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:871
                                                  METAL_SOFTWARE_IPI_SET, &hartid);
        }
    }
    return rc;
20403340:	fec42783          	lw	a5,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:872
}
20403344:	853e                	mv	a0,a5
20403346:	50b2                	lw	ra,44(sp)
20403348:	5422                	lw	s0,40(sp)
2040334a:	6145                	addi	sp,sp,48
2040334c:	8082                	ret

2040334e <__metal_driver_cpu_clear_sw_ipi>:
__metal_driver_cpu_clear_sw_ipi():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:875

int __metal_driver_cpu_clear_sw_ipi (struct metal_cpu *cpu, int hartid)
{
2040334e:	7179                	addi	sp,sp,-48
20403350:	d606                	sw	ra,44(sp)
20403352:	d422                	sw	s0,40(sp)
20403354:	1800                	addi	s0,sp,48
20403356:	fca42e23          	sw	a0,-36(s0)
2040335a:	fcb42c23          	sw	a1,-40(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:876
    int rc = -1;
2040335e:	57fd                	li	a5,-1
20403360:	fef42623          	sw	a5,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:879
    struct metal_interrupt *sw_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
20403364:	fdc42503          	lw	a0,-36(s0)
20403368:	8c7fe0ef          	jal	ra,20401c2e <__metal_driver_cpu_interrupt_controller>
2040336c:	fea42423          	sw	a0,-24(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:881

    if (intc) {
20403370:	fe842783          	lw	a5,-24(s0)
20403374:	c79d                	beqz	a5,204033a2 <__metal_driver_cpu_clear_sw_ipi+0x54>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:882
        sw_intc = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
20403376:	fe842783          	lw	a5,-24(s0)
2040337a:	0dc7a783          	lw	a5,220(a5)
2040337e:	fef42223          	sw	a5,-28(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:883
        if (sw_intc) {
20403382:	fe442783          	lw	a5,-28(s0)
20403386:	cf91                	beqz	a5,204033a2 <__metal_driver_cpu_clear_sw_ipi+0x54>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:884
            rc = sw_intc->vtable->command_request(sw_intc,
20403388:	fe442783          	lw	a5,-28(s0)
2040338c:	439c                	lw	a5,0(a5)
2040338e:	43f8                	lw	a4,68(a5)
20403390:	fd840793          	addi	a5,s0,-40
20403394:	863e                	mv	a2,a5
20403396:	4589                	li	a1,2
20403398:	fe442503          	lw	a0,-28(s0)
2040339c:	9702                	jalr	a4
2040339e:	fea42623          	sw	a0,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:888
                                                  METAL_SOFTWARE_IPI_CLEAR, &hartid);
        }
    }
    return rc;
204033a2:	fec42783          	lw	a5,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:889
}
204033a6:	853e                	mv	a0,a5
204033a8:	50b2                	lw	ra,44(sp)
204033aa:	5422                	lw	s0,40(sp)
204033ac:	6145                	addi	sp,sp,48
204033ae:	8082                	ret

204033b0 <__metal_driver_cpu_get_msip>:
__metal_driver_cpu_get_msip():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:892

int __metal_driver_cpu_get_msip (struct metal_cpu *cpu, int hartid)
{
204033b0:	7179                	addi	sp,sp,-48
204033b2:	d606                	sw	ra,44(sp)
204033b4:	d422                	sw	s0,40(sp)
204033b6:	1800                	addi	s0,sp,48
204033b8:	fca42e23          	sw	a0,-36(s0)
204033bc:	fcb42c23          	sw	a1,-40(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:893
    int rc = 0;
204033c0:	fe042623          	sw	zero,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:896
    struct metal_interrupt *sw_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
204033c4:	fdc42503          	lw	a0,-36(s0)
204033c8:	867fe0ef          	jal	ra,20401c2e <__metal_driver_cpu_interrupt_controller>
204033cc:	fea42423          	sw	a0,-24(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:898

    if (intc) {
204033d0:	fe842783          	lw	a5,-24(s0)
204033d4:	c79d                	beqz	a5,20403402 <__metal_driver_cpu_get_msip+0x52>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:899
        sw_intc = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
204033d6:	fe842783          	lw	a5,-24(s0)
204033da:	0dc7a783          	lw	a5,220(a5)
204033de:	fef42223          	sw	a5,-28(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:900
        if (sw_intc) {
204033e2:	fe442783          	lw	a5,-28(s0)
204033e6:	cf91                	beqz	a5,20403402 <__metal_driver_cpu_get_msip+0x52>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:901
            rc = sw_intc->vtable->command_request(sw_intc,
204033e8:	fe442783          	lw	a5,-28(s0)
204033ec:	439c                	lw	a5,0(a5)
204033ee:	43f8                	lw	a4,68(a5)
204033f0:	fd840793          	addi	a5,s0,-40
204033f4:	863e                	mv	a2,a5
204033f6:	4591                	li	a1,4
204033f8:	fe442503          	lw	a0,-28(s0)
204033fc:	9702                	jalr	a4
204033fe:	fea42623          	sw	a0,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:905
                                                  METAL_SOFTWARE_MSIP_GET, &hartid);
        }
    }
    return rc;
20403402:	fec42783          	lw	a5,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:906
}
20403406:	853e                	mv	a0,a5
20403408:	50b2                	lw	ra,44(sp)
2040340a:	5422                	lw	s0,40(sp)
2040340c:	6145                	addi	sp,sp,48
2040340e:	8082                	ret

20403410 <__metal_driver_cpu_controller_interrupt>:
__metal_driver_cpu_controller_interrupt():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:910

struct metal_interrupt *
__metal_driver_cpu_controller_interrupt(struct metal_cpu *cpu)
{
20403410:	1101                	addi	sp,sp,-32
20403412:	ce06                	sw	ra,28(sp)
20403414:	cc22                	sw	s0,24(sp)
20403416:	1000                	addi	s0,sp,32
20403418:	fea42623          	sw	a0,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:911
    return __metal_driver_cpu_interrupt_controller(cpu);
2040341c:	fec42503          	lw	a0,-20(s0)
20403420:	80ffe0ef          	jal	ra,20401c2e <__metal_driver_cpu_interrupt_controller>
20403424:	87aa                	mv	a5,a0
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:912
}
20403426:	853e                	mv	a0,a5
20403428:	40f2                	lw	ra,28(sp)
2040342a:	4462                	lw	s0,24(sp)
2040342c:	6105                	addi	sp,sp,32
2040342e:	8082                	ret

20403430 <__metal_driver_cpu_exception_register>:
__metal_driver_cpu_exception_register():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:936
    return -1;
}

int __metal_driver_cpu_exception_register(struct metal_cpu *cpu, int ecode,
				        metal_exception_handler_t isr)
{
20403430:	7179                	addi	sp,sp,-48
20403432:	d606                	sw	ra,44(sp)
20403434:	d422                	sw	s0,40(sp)
20403436:	1800                	addi	s0,sp,48
20403438:	fca42e23          	sw	a0,-36(s0)
2040343c:	fcb42c23          	sw	a1,-40(s0)
20403440:	fcc42a23          	sw	a2,-44(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:938
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
20403444:	fdc42503          	lw	a0,-36(s0)
20403448:	fe6fe0ef          	jal	ra,20401c2e <__metal_driver_cpu_interrupt_controller>
2040344c:	fea42623          	sw	a0,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:940

    if (intc) {
20403450:	fec42783          	lw	a5,-20(s0)
20403454:	cb99                	beqz	a5,2040346a <__metal_driver_cpu_exception_register+0x3a>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:941
        return __metal_exception_register((struct metal_interrupt *)intc, ecode, isr);
20403456:	fd442603          	lw	a2,-44(s0)
2040345a:	fd842583          	lw	a1,-40(s0)
2040345e:	fec42503          	lw	a0,-20(s0)
20403462:	8d5ff0ef          	jal	ra,20402d36 <__metal_exception_register>
20403466:	87aa                	mv	a5,a0
20403468:	a011                	j	2040346c <__metal_driver_cpu_exception_register+0x3c>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:943
    }
    return -1;
2040346a:	57fd                	li	a5,-1
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:944
}
2040346c:	853e                	mv	a0,a5
2040346e:	50b2                	lw	ra,44(sp)
20403470:	5422                	lw	s0,40(sp)
20403472:	6145                	addi	sp,sp,48
20403474:	8082                	ret

20403476 <__metal_driver_cpu_get_instruction_length>:
__metal_driver_cpu_get_instruction_length():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:947

int  __metal_driver_cpu_get_instruction_length(struct metal_cpu *cpu, uintptr_t epc)
{
20403476:	1101                	addi	sp,sp,-32
20403478:	ce22                	sw	s0,28(sp)
2040347a:	1000                	addi	s0,sp,32
2040347c:	fea42623          	sw	a0,-20(s0)
20403480:	feb42423          	sw	a1,-24(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:953
    /**
     * Per ISA compressed instruction has last two bits of opcode set.
     * The encoding '00' '01' '10' are used for compressed instruction.
     * Only enconding '11' isn't regarded as compressed instruction (>16b).
     */
    return ((*(unsigned short*)epc & METAL_INSN_LENGTH_MASK)
20403484:	fe842783          	lw	a5,-24(s0)
20403488:	0007d783          	lhu	a5,0(a5)
2040348c:	0037f713          	andi	a4,a5,3
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:954
            == METAL_INSN_NOT_COMPRESSED) ? 4 : 2;
20403490:	478d                	li	a5,3
20403492:	00f71463          	bne	a4,a5,2040349a <__metal_driver_cpu_get_instruction_length+0x24>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:954 (discriminator 1)
20403496:	4791                	li	a5,4
20403498:	a011                	j	2040349c <__metal_driver_cpu_get_instruction_length+0x26>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:954 (discriminator 2)
2040349a:	4789                	li	a5,2
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:955 (discriminator 5)
}
2040349c:	853e                	mv	a0,a5
2040349e:	4472                	lw	s0,28(sp)
204034a0:	6105                	addi	sp,sp,32
204034a2:	8082                	ret

204034a4 <__metal_driver_cpu_get_exception_pc>:
__metal_driver_cpu_get_exception_pc():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:958

uintptr_t  __metal_driver_cpu_get_exception_pc(struct metal_cpu *cpu)
{
204034a4:	7179                	addi	sp,sp,-48
204034a6:	d622                	sw	s0,44(sp)
204034a8:	1800                	addi	s0,sp,48
204034aa:	fca42e23          	sw	a0,-36(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:960
    uintptr_t mepc;
    __asm__ volatile ("csrr %0, mepc" : "=r"(mepc));
204034ae:	341027f3          	csrr	a5,mepc
204034b2:	fef42623          	sw	a5,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:961
    return mepc;
204034b6:	fec42783          	lw	a5,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:962
}
204034ba:	853e                	mv	a0,a5
204034bc:	5432                	lw	s0,44(sp)
204034be:	6145                	addi	sp,sp,48
204034c0:	8082                	ret

204034c2 <__metal_driver_cpu_set_exception_pc>:
__metal_driver_cpu_set_exception_pc():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:965

int  __metal_driver_cpu_set_exception_pc(struct metal_cpu *cpu, uintptr_t mepc)
{
204034c2:	1101                	addi	sp,sp,-32
204034c4:	ce22                	sw	s0,28(sp)
204034c6:	1000                	addi	s0,sp,32
204034c8:	fea42623          	sw	a0,-20(s0)
204034cc:	feb42423          	sw	a1,-24(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:966
    __asm__ volatile ("csrw mepc, %0" :: "r"(mepc));
204034d0:	fe842783          	lw	a5,-24(s0)
204034d4:	34179073          	csrw	mepc,a5
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:967
    return 0;
204034d8:	4781                	li	a5,0
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:968
}
204034da:	853e                	mv	a0,a5
204034dc:	4472                	lw	s0,28(sp)
204034de:	6105                	addi	sp,sp,32
204034e0:	8082                	ret

204034e2 <__metal_driver_sifive_plic0_control_base>:
__metal_driver_sifive_plic0_control_base():
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:290



/* --------------------- sifive_plic0 ------------ */
static __inline__ unsigned long __metal_driver_sifive_plic0_control_base(struct metal_interrupt *controller)
{
204034e2:	1101                	addi	sp,sp,-32
204034e4:	ce22                	sw	s0,28(sp)
204034e6:	1000                	addi	s0,sp,32
204034e8:	fea42623          	sw	a0,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:291
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_interrupt_controller_c000000) {
204034ec:	fec42703          	lw	a4,-20(s0)
204034f0:	800007b7          	lui	a5,0x80000
204034f4:	44878793          	addi	a5,a5,1096 # 80000448 <metal_segment_heap_target_end+0xffffefb0>
204034f8:	00f71563          	bne	a4,a5,20403502 <__metal_driver_sifive_plic0_control_base+0x20>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:292
		return METAL_RISCV_PLIC0_C000000_BASE_ADDRESS;
204034fc:	0c0007b7          	lui	a5,0xc000
20403500:	a011                	j	20403504 <__metal_driver_sifive_plic0_control_base+0x22>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:295
	}
	else {
		return 0;
20403502:	4781                	li	a5,0
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:297
	}
}
20403504:	853e                	mv	a0,a5
20403506:	4472                	lw	s0,28(sp)
20403508:	6105                	addi	sp,sp,32
2040350a:	8082                	ret

2040350c <__metal_driver_sifive_plic0_num_interrupts>:
__metal_driver_sifive_plic0_num_interrupts():
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:310
		return 0;
	}
}

static __inline__ int __metal_driver_sifive_plic0_num_interrupts(struct metal_interrupt *controller)
{
2040350c:	1101                	addi	sp,sp,-32
2040350e:	ce22                	sw	s0,28(sp)
20403510:	1000                	addi	s0,sp,32
20403512:	fea42623          	sw	a0,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:311
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_interrupt_controller_c000000) {
20403516:	fec42703          	lw	a4,-20(s0)
2040351a:	800007b7          	lui	a5,0x80000
2040351e:	44878793          	addi	a5,a5,1096 # 80000448 <metal_segment_heap_target_end+0xffffefb0>
20403522:	00f71463          	bne	a4,a5,2040352a <__metal_driver_sifive_plic0_num_interrupts+0x1e>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:312
		return METAL_RISCV_PLIC0_C000000_RISCV_NDEV;
20403526:	47ed                	li	a5,27
20403528:	a011                	j	2040352c <__metal_driver_sifive_plic0_num_interrupts+0x20>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:315
	}
	else {
		return 0;
2040352a:	4781                	li	a5,0
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:317
	}
}
2040352c:	853e                	mv	a0,a5
2040352e:	4472                	lw	s0,28(sp)
20403530:	6105                	addi	sp,sp,32
20403532:	8082                	ret

20403534 <__metal_driver_sifive_plic0_max_priority>:
__metal_driver_sifive_plic0_max_priority():
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:320

static __inline__ int __metal_driver_sifive_plic0_max_priority(struct metal_interrupt *controller)
{
20403534:	1101                	addi	sp,sp,-32
20403536:	ce22                	sw	s0,28(sp)
20403538:	1000                	addi	s0,sp,32
2040353a:	fea42623          	sw	a0,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:321
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_interrupt_controller_c000000) {
2040353e:	fec42703          	lw	a4,-20(s0)
20403542:	800007b7          	lui	a5,0x80000
20403546:	44878793          	addi	a5,a5,1096 # 80000448 <metal_segment_heap_target_end+0xffffefb0>
2040354a:	00f71463          	bne	a4,a5,20403552 <__metal_driver_sifive_plic0_max_priority+0x1e>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:322
		return METAL_RISCV_PLIC0_C000000_RISCV_MAX_PRIORITY;
2040354e:	479d                	li	a5,7
20403550:	a011                	j	20403554 <__metal_driver_sifive_plic0_max_priority+0x20>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:325
	}
	else {
		return 0;
20403552:	4781                	li	a5,0
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:327
	}
}
20403554:	853e                	mv	a0,a5
20403556:	4472                	lw	s0,28(sp)
20403558:	6105                	addi	sp,sp,32
2040355a:	8082                	ret

2040355c <__metal_driver_sifive_plic0_interrupt_parents>:
__metal_driver_sifive_plic0_interrupt_parents():
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:330

static __inline__ struct metal_interrupt * __metal_driver_sifive_plic0_interrupt_parents(struct metal_interrupt *controller, int idx)
{
2040355c:	1101                	addi	sp,sp,-32
2040355e:	ce22                	sw	s0,28(sp)
20403560:	1000                	addi	s0,sp,32
20403562:	fea42623          	sw	a0,-20(s0)
20403566:	feb42423          	sw	a1,-24(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:331
	if (idx == 0) {
2040356a:	fe842783          	lw	a5,-24(s0)
2040356e:	e791                	bnez	a5,2040357a <__metal_driver_sifive_plic0_interrupt_parents+0x1e>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:332
		return (struct metal_interrupt *)&__metal_dt_cpu_0_interrupt_controller.controller;
20403570:	800007b7          	lui	a5,0x80000
20403574:	09078793          	addi	a5,a5,144 # 80000090 <metal_segment_heap_target_end+0xffffebf8>
20403578:	a011                	j	2040357c <__metal_driver_sifive_plic0_interrupt_parents+0x20>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:335
	}
	else {
		return NULL;
2040357a:	4781                	li	a5,0
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:337
	}
}
2040357c:	853e                	mv	a0,a5
2040357e:	4472                	lw	s0,28(sp)
20403580:	6105                	addi	sp,sp,32
20403582:	8082                	ret

20403584 <__metal_driver_sifive_plic0_interrupt_lines>:
__metal_driver_sifive_plic0_interrupt_lines():
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:340

static __inline__ int __metal_driver_sifive_plic0_interrupt_lines(struct metal_interrupt *controller, int idx)
{
20403584:	1101                	addi	sp,sp,-32
20403586:	ce22                	sw	s0,28(sp)
20403588:	1000                	addi	s0,sp,32
2040358a:	fea42623          	sw	a0,-20(s0)
2040358e:	feb42423          	sw	a1,-24(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:341
	if (idx == 0) {
20403592:	fe842783          	lw	a5,-24(s0)
20403596:	e399                	bnez	a5,2040359c <__metal_driver_sifive_plic0_interrupt_lines+0x18>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:342
		return 11;
20403598:	47ad                	li	a5,11
2040359a:	a011                	j	2040359e <__metal_driver_sifive_plic0_interrupt_lines+0x1a>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:345
	}
	else {
		return 0;
2040359c:	4781                	li	a5,0
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:347
	}
}
2040359e:	853e                	mv	a0,a5
204035a0:	4472                	lw	s0,28(sp)
204035a2:	6105                	addi	sp,sp,32
204035a4:	8082                	ret

204035a6 <__metal_plic0_claim_interrupt>:
__metal_plic0_claim_interrupt():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:14
#include <metal/shutdown.h>
#include <metal/drivers/riscv_plic0.h>
#include <metal/machine.h>

unsigned int __metal_plic0_claim_interrupt (struct __metal_driver_riscv_plic0 *plic)
{
204035a6:	7179                	addi	sp,sp,-48
204035a8:	d606                	sw	ra,44(sp)
204035aa:	d422                	sw	s0,40(sp)
204035ac:	1800                	addi	s0,sp,48
204035ae:	fca42e23          	sw	a0,-36(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:15
    unsigned long control_base = __metal_driver_sifive_plic0_control_base((struct metal_interrupt *)plic);
204035b2:	fdc42503          	lw	a0,-36(s0)
204035b6:	3735                	jal	204034e2 <__metal_driver_sifive_plic0_control_base>
204035b8:	fea42623          	sw	a0,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:16
    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
204035bc:	fec42703          	lw	a4,-20(s0)
204035c0:	002007b7          	lui	a5,0x200
204035c4:	0791                	addi	a5,a5,4
204035c6:	97ba                	add	a5,a5,a4
204035c8:	439c                	lw	a5,0(a5)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:18
					      METAL_RISCV_PLIC0_CLAIM));
}
204035ca:	853e                	mv	a0,a5
204035cc:	50b2                	lw	ra,44(sp)
204035ce:	5422                	lw	s0,40(sp)
204035d0:	6145                	addi	sp,sp,48
204035d2:	8082                	ret

204035d4 <__metal_plic0_complete_interrupt>:
__metal_plic0_complete_interrupt():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:22

void __metal_plic0_complete_interrupt(struct __metal_driver_riscv_plic0 *plic,
				    unsigned int id)
{
204035d4:	7179                	addi	sp,sp,-48
204035d6:	d606                	sw	ra,44(sp)
204035d8:	d422                	sw	s0,40(sp)
204035da:	1800                	addi	s0,sp,48
204035dc:	fca42e23          	sw	a0,-36(s0)
204035e0:	fcb42c23          	sw	a1,-40(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:23
    unsigned long control_base = __metal_driver_sifive_plic0_control_base((struct metal_interrupt *)plic);
204035e4:	fdc42503          	lw	a0,-36(s0)
204035e8:	3ded                	jal	204034e2 <__metal_driver_sifive_plic0_control_base>
204035ea:	fea42623          	sw	a0,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:24
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
204035ee:	fec42703          	lw	a4,-20(s0)
204035f2:	002007b7          	lui	a5,0x200
204035f6:	0791                	addi	a5,a5,4
204035f8:	97ba                	add	a5,a5,a4
204035fa:	873e                	mv	a4,a5
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:25
				       METAL_RISCV_PLIC0_CLAIM)) = id;
204035fc:	fd842783          	lw	a5,-40(s0)
20403600:	c31c                	sw	a5,0(a4)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:26
}
20403602:	0001                	nop
20403604:	50b2                	lw	ra,44(sp)
20403606:	5422                	lw	s0,40(sp)
20403608:	6145                	addi	sp,sp,48
2040360a:	8082                	ret

2040360c <__metal_plic0_set_threshold>:
__metal_plic0_set_threshold():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:29

int __metal_plic0_set_threshold(struct metal_interrupt *controller, unsigned int threshold)
{
2040360c:	7179                	addi	sp,sp,-48
2040360e:	d606                	sw	ra,44(sp)
20403610:	d422                	sw	s0,40(sp)
20403612:	1800                	addi	s0,sp,48
20403614:	fca42e23          	sw	a0,-36(s0)
20403618:	fcb42c23          	sw	a1,-40(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:30
    unsigned long control_base = __metal_driver_sifive_plic0_control_base(controller);
2040361c:	fdc42503          	lw	a0,-36(s0)
20403620:	35c9                	jal	204034e2 <__metal_driver_sifive_plic0_control_base>
20403622:	fea42623          	sw	a0,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:31
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20403626:	fec42703          	lw	a4,-20(s0)
2040362a:	002007b7          	lui	a5,0x200
2040362e:	97ba                	add	a5,a5,a4
20403630:	873e                	mv	a4,a5
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:32
				       METAL_RISCV_PLIC0_THRESHOLD)) = threshold;
20403632:	fd842783          	lw	a5,-40(s0)
20403636:	c31c                	sw	a5,0(a4)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:33
    return 0;
20403638:	4781                	li	a5,0
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:34
}
2040363a:	853e                	mv	a0,a5
2040363c:	50b2                	lw	ra,44(sp)
2040363e:	5422                	lw	s0,40(sp)
20403640:	6145                	addi	sp,sp,48
20403642:	8082                	ret

20403644 <__metal_plic0_get_threshold>:
__metal_plic0_get_threshold():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:37

unsigned int __metal_plic0_get_threshold(struct metal_interrupt *controller)
{
20403644:	7179                	addi	sp,sp,-48
20403646:	d606                	sw	ra,44(sp)
20403648:	d422                	sw	s0,40(sp)
2040364a:	1800                	addi	s0,sp,48
2040364c:	fca42e23          	sw	a0,-36(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:38
    unsigned long control_base = __metal_driver_sifive_plic0_control_base(controller);
20403650:	fdc42503          	lw	a0,-36(s0)
20403654:	3579                	jal	204034e2 <__metal_driver_sifive_plic0_control_base>
20403656:	fea42623          	sw	a0,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:40

    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
2040365a:	fec42703          	lw	a4,-20(s0)
2040365e:	002007b7          	lui	a5,0x200
20403662:	97ba                	add	a5,a5,a4
20403664:	439c                	lw	a5,0(a5)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:42
				       METAL_RISCV_PLIC0_THRESHOLD));
}
20403666:	853e                	mv	a0,a5
20403668:	50b2                	lw	ra,44(sp)
2040366a:	5422                	lw	s0,40(sp)
2040366c:	6145                	addi	sp,sp,48
2040366e:	8082                	ret

20403670 <__metal_plic0_set_priority>:
__metal_plic0_set_priority():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:45

int __metal_plic0_set_priority(struct metal_interrupt *controller, int id, unsigned int priority)
{
20403670:	7179                	addi	sp,sp,-48
20403672:	d606                	sw	ra,44(sp)
20403674:	d422                	sw	s0,40(sp)
20403676:	1800                	addi	s0,sp,48
20403678:	fca42e23          	sw	a0,-36(s0)
2040367c:	fcb42c23          	sw	a1,-40(s0)
20403680:	fcc42a23          	sw	a2,-44(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:46
    unsigned long control_base = __metal_driver_sifive_plic0_control_base((struct metal_interrupt *)controller);
20403684:	fdc42503          	lw	a0,-36(s0)
20403688:	3da9                	jal	204034e2 <__metal_driver_sifive_plic0_control_base>
2040368a:	fea42623          	sw	a0,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:47
    unsigned int max_priority = __metal_driver_sifive_plic0_max_priority((struct metal_interrupt *)controller);
2040368e:	fdc42503          	lw	a0,-36(s0)
20403692:	354d                	jal	20403534 <__metal_driver_sifive_plic0_max_priority>
20403694:	87aa                	mv	a5,a0
20403696:	fef42423          	sw	a5,-24(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:48
    if ( (max_priority) && (priority < max_priority) ) {
2040369a:	fe842783          	lw	a5,-24(s0)
2040369e:	c785                	beqz	a5,204036c6 <__metal_plic0_set_priority+0x56>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:48 (discriminator 1)
204036a0:	fd442703          	lw	a4,-44(s0)
204036a4:	fe842783          	lw	a5,-24(s0)
204036a8:	00f77f63          	bgeu	a4,a5,204036c6 <__metal_plic0_set_priority+0x56>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:49
        __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
204036ac:	fd842783          	lw	a5,-40(s0)
204036b0:	078a                	slli	a5,a5,0x2
204036b2:	873e                	mv	a4,a5
204036b4:	fec42783          	lw	a5,-20(s0)
204036b8:	97ba                	add	a5,a5,a4
204036ba:	873e                	mv	a4,a5
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:51
					   METAL_RISCV_PLIC0_PRIORITY_BASE +
					   (id << METAL_PLIC_SOURCE_PRIORITY_SHIFT))) = priority;
204036bc:	fd442783          	lw	a5,-44(s0)
204036c0:	c31c                	sw	a5,0(a4)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:52
        return 0;
204036c2:	4781                	li	a5,0
204036c4:	a011                	j	204036c8 <__metal_plic0_set_priority+0x58>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:54
    }
    return -1;
204036c6:	57fd                	li	a5,-1
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:55
}
204036c8:	853e                	mv	a0,a5
204036ca:	50b2                	lw	ra,44(sp)
204036cc:	5422                	lw	s0,40(sp)
204036ce:	6145                	addi	sp,sp,48
204036d0:	8082                	ret

204036d2 <__metal_plic0_get_priority>:
__metal_plic0_get_priority():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:58

unsigned int __metal_plic0_get_priority(struct metal_interrupt *controller, int id)
{
204036d2:	7179                	addi	sp,sp,-48
204036d4:	d606                	sw	ra,44(sp)
204036d6:	d422                	sw	s0,40(sp)
204036d8:	1800                	addi	s0,sp,48
204036da:	fca42e23          	sw	a0,-36(s0)
204036de:	fcb42c23          	sw	a1,-40(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:59
    unsigned long control_base = __metal_driver_sifive_plic0_control_base(controller);
204036e2:	fdc42503          	lw	a0,-36(s0)
204036e6:	3bf5                	jal	204034e2 <__metal_driver_sifive_plic0_control_base>
204036e8:	fea42623          	sw	a0,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:61

    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
204036ec:	fd842783          	lw	a5,-40(s0)
204036f0:	078a                	slli	a5,a5,0x2
204036f2:	873e                	mv	a4,a5
204036f4:	fec42783          	lw	a5,-20(s0)
204036f8:	97ba                	add	a5,a5,a4
204036fa:	439c                	lw	a5,0(a5)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:64
					   METAL_RISCV_PLIC0_PRIORITY_BASE +
					   (id << METAL_PLIC_SOURCE_PRIORITY_SHIFT)));
}
204036fc:	853e                	mv	a0,a5
204036fe:	50b2                	lw	ra,44(sp)
20403700:	5422                	lw	s0,40(sp)
20403702:	6145                	addi	sp,sp,48
20403704:	8082                	ret

20403706 <__metal_plic0_enable>:
__metal_plic0_enable():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:67

void __metal_plic0_enable(struct __metal_driver_riscv_plic0 *plic, int id, int enable)
{
20403706:	7179                	addi	sp,sp,-48
20403708:	d606                	sw	ra,44(sp)
2040370a:	d422                	sw	s0,40(sp)
2040370c:	1800                	addi	s0,sp,48
2040370e:	fca42e23          	sw	a0,-36(s0)
20403712:	fcb42c23          	sw	a1,-40(s0)
20403716:	fcc42a23          	sw	a2,-44(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:69
    unsigned int current;
    unsigned long control_base = __metal_driver_sifive_plic0_control_base((struct metal_interrupt *)plic);
2040371a:	fdc42503          	lw	a0,-36(s0)
2040371e:	33d1                	jal	204034e2 <__metal_driver_sifive_plic0_control_base>
20403720:	fea42623          	sw	a0,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:71

    current = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20403724:	fd842783          	lw	a5,-40(s0)
20403728:	8795                	srai	a5,a5,0x5
2040372a:	078a                	slli	a5,a5,0x2
2040372c:	873e                	mv	a4,a5
2040372e:	fec42783          	lw	a5,-20(s0)
20403732:	973e                	add	a4,a4,a5
20403734:	6789                	lui	a5,0x2
20403736:	97ba                	add	a5,a5,a4
20403738:	439c                	lw	a5,0(a5)
2040373a:	fef42423          	sw	a5,-24(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:78
						(id >> METAL_PLIC_SOURCE_SHIFT) * 4));
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
					METAL_RISCV_PLIC0_ENABLE_BASE +
					((id >> METAL_PLIC_SOURCE_SHIFT) * 4))) =
              enable ? (current | (1 << (id & METAL_PLIC_SOURCE_MASK)))
                     : (current & ~(1 << (id & METAL_PLIC_SOURCE_MASK)));
2040373e:	fd442783          	lw	a5,-44(s0)
20403742:	cf81                	beqz	a5,2040375a <__metal_plic0_enable+0x54>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:77 (discriminator 1)
              enable ? (current | (1 << (id & METAL_PLIC_SOURCE_MASK)))
20403744:	fd842783          	lw	a5,-40(s0)
20403748:	8bfd                	andi	a5,a5,31
2040374a:	4705                	li	a4,1
2040374c:	00f717b3          	sll	a5,a4,a5
20403750:	873e                	mv	a4,a5
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:78 (discriminator 1)
                     : (current & ~(1 << (id & METAL_PLIC_SOURCE_MASK)));
20403752:	fe842783          	lw	a5,-24(s0)
20403756:	8fd9                	or	a5,a5,a4
20403758:	a829                	j	20403772 <__metal_plic0_enable+0x6c>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:78 (discriminator 2)
2040375a:	fd842783          	lw	a5,-40(s0)
2040375e:	8bfd                	andi	a5,a5,31
20403760:	4705                	li	a4,1
20403762:	00f717b3          	sll	a5,a4,a5
20403766:	fff7c793          	not	a5,a5
2040376a:	873e                	mv	a4,a5
2040376c:	fe842783          	lw	a5,-24(s0)
20403770:	8ff9                	and	a5,a5,a4
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:74
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20403772:	fd842703          	lw	a4,-40(s0)
20403776:	8715                	srai	a4,a4,0x5
20403778:	070a                	slli	a4,a4,0x2
2040377a:	86ba                	mv	a3,a4
2040377c:	fec42703          	lw	a4,-20(s0)
20403780:	96ba                	add	a3,a3,a4
20403782:	6709                	lui	a4,0x2
20403784:	9736                	add	a4,a4,a3
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:76
					((id >> METAL_PLIC_SOURCE_SHIFT) * 4))) =
20403786:	c31c                	sw	a5,0(a4)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:79
}
20403788:	0001                	nop
2040378a:	50b2                	lw	ra,44(sp)
2040378c:	5422                	lw	s0,40(sp)
2040378e:	6145                	addi	sp,sp,48
20403790:	8082                	ret

20403792 <__metal_plic0_default_handler>:
__metal_plic0_default_handler():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:81

void __metal_plic0_default_handler (int id, void *priv) {
20403792:	1101                	addi	sp,sp,-32
20403794:	ce06                	sw	ra,28(sp)
20403796:	cc22                	sw	s0,24(sp)
20403798:	1000                	addi	s0,sp,32
2040379a:	fea42623          	sw	a0,-20(s0)
2040379e:	feb42423          	sw	a1,-24(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:82
    metal_shutdown(300);
204037a2:	12c00513          	li	a0,300
204037a6:	713010ef          	jal	ra,204056b8 <metal_shutdown>

204037aa <__metal_plic0_handler>:
__metal_plic0_handler():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:86
}

void __metal_plic0_handler (int id, void *priv)
{
204037aa:	7179                	addi	sp,sp,-48
204037ac:	d606                	sw	ra,44(sp)
204037ae:	d422                	sw	s0,40(sp)
204037b0:	1800                	addi	s0,sp,48
204037b2:	fca42e23          	sw	a0,-36(s0)
204037b6:	fcb42c23          	sw	a1,-40(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:87
    struct __metal_driver_riscv_plic0 *plic = priv;
204037ba:	fd842783          	lw	a5,-40(s0)
204037be:	fef42623          	sw	a5,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:88
    unsigned int idx = __metal_plic0_claim_interrupt(plic);
204037c2:	fec42503          	lw	a0,-20(s0)
204037c6:	33c5                	jal	204035a6 <__metal_plic0_claim_interrupt>
204037c8:	fea42423          	sw	a0,-24(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:89
    unsigned int num_interrupts = __metal_driver_sifive_plic0_num_interrupts((struct metal_interrupt *)plic);
204037cc:	fec42503          	lw	a0,-20(s0)
204037d0:	3b35                	jal	2040350c <__metal_driver_sifive_plic0_num_interrupts>
204037d2:	87aa                	mv	a5,a0
204037d4:	fef42223          	sw	a5,-28(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:91

    if ( (idx < num_interrupts) && (plic->metal_exint_table[idx]) ) {
204037d8:	fe842703          	lw	a4,-24(s0)
204037dc:	fe442783          	lw	a5,-28(s0)
204037e0:	04f77263          	bgeu	a4,a5,20403824 <__metal_plic0_handler+0x7a>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:91 (discriminator 1)
204037e4:	fec42703          	lw	a4,-20(s0)
204037e8:	fe842783          	lw	a5,-24(s0)
204037ec:	078a                	slli	a5,a5,0x2
204037ee:	97ba                	add	a5,a5,a4
204037f0:	479c                	lw	a5,8(a5)
204037f2:	cb8d                	beqz	a5,20403824 <__metal_plic0_handler+0x7a>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:92
	plic->metal_exint_table[idx](idx,
204037f4:	fec42703          	lw	a4,-20(s0)
204037f8:	fe842783          	lw	a5,-24(s0)
204037fc:	078a                	slli	a5,a5,0x2
204037fe:	97ba                	add	a5,a5,a4
20403800:	0087a803          	lw	a6,8(a5) # 2008 <__heap_size+0x1808>
20403804:	fe842603          	lw	a2,-24(s0)
20403808:	fec42683          	lw	a3,-20(s0)
2040380c:	fe842703          	lw	a4,-24(s0)
20403810:	87ba                	mv	a5,a4
20403812:	0786                	slli	a5,a5,0x1
20403814:	97ba                	add	a5,a5,a4
20403816:	078e                	slli	a5,a5,0x3
20403818:	97b6                	add	a5,a5,a3
2040381a:	0887a783          	lw	a5,136(a5)
2040381e:	85be                	mv	a1,a5
20403820:	8532                	mv	a0,a2
20403822:	9802                	jalr	a6
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:96
				  plic->metal_exdata_table[idx].exint_data);
    }

    __metal_plic0_complete_interrupt(plic, idx);
20403824:	fe842583          	lw	a1,-24(s0)
20403828:	fec42503          	lw	a0,-20(s0)
2040382c:	3365                	jal	204035d4 <__metal_plic0_complete_interrupt>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:97
}
2040382e:	0001                	nop
20403830:	50b2                	lw	ra,44(sp)
20403832:	5422                	lw	s0,40(sp)
20403834:	6145                	addi	sp,sp,48
20403836:	8082                	ret

20403838 <__metal_driver_riscv_plic0_init>:
__metal_driver_riscv_plic0_init():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:100

void __metal_driver_riscv_plic0_init (struct metal_interrupt *controller)
{
20403838:	7139                	addi	sp,sp,-64
2040383a:	de06                	sw	ra,60(sp)
2040383c:	dc22                	sw	s0,56(sp)
2040383e:	0080                	addi	s0,sp,64
20403840:	fca42623          	sw	a0,-52(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:101
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
20403844:	fcc42783          	lw	a5,-52(s0)
20403848:	fef42223          	sw	a5,-28(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:103

    if ( !plic->init_done ) {
2040384c:	fe442783          	lw	a5,-28(s0)
20403850:	43dc                	lw	a5,4(a5)
20403852:	12079063          	bnez	a5,20403972 <__metal_driver_riscv_plic0_init+0x13a>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:107
        int num_interrupts, line;
        struct metal_interrupt *intc;

	for(int parent = 0; parent < __METAL_PLIC_NUM_PARENTS; parent++) {
20403856:	fe042623          	sw	zero,-20(s0)
2040385a:	a221                	j	20403962 <__metal_driver_riscv_plic0_init+0x12a>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:108
	    num_interrupts = __metal_driver_sifive_plic0_num_interrupts(controller);
2040385c:	fcc42503          	lw	a0,-52(s0)
20403860:	cadff0ef          	jal	ra,2040350c <__metal_driver_sifive_plic0_num_interrupts>
20403864:	fea42023          	sw	a0,-32(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:109
	    intc = __metal_driver_sifive_plic0_interrupt_parents(controller, parent);
20403868:	fec42583          	lw	a1,-20(s0)
2040386c:	fcc42503          	lw	a0,-52(s0)
20403870:	cedff0ef          	jal	ra,2040355c <__metal_driver_sifive_plic0_interrupt_parents>
20403874:	fca42e23          	sw	a0,-36(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:110
	    line = __metal_driver_sifive_plic0_interrupt_lines(controller, parent);
20403878:	fec42583          	lw	a1,-20(s0)
2040387c:	fcc42503          	lw	a0,-52(s0)
20403880:	d05ff0ef          	jal	ra,20403584 <__metal_driver_sifive_plic0_interrupt_lines>
20403884:	fca42c23          	sw	a0,-40(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:113

	    /* Initialize ist parent controller, aka cpu_intc. */
	    intc->vtable->interrupt_init(intc);
20403888:	fdc42783          	lw	a5,-36(s0)
2040388c:	439c                	lw	a5,0(a5)
2040388e:	439c                	lw	a5,0(a5)
20403890:	fdc42503          	lw	a0,-36(s0)
20403894:	9782                	jalr	a5
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:115

	    for (int i = 0; i < num_interrupts; i++) {
20403896:	fe042423          	sw	zero,-24(s0)
2040389a:	a085                	j	204038fa <__metal_driver_riscv_plic0_init+0xc2>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:116 (discriminator 3)
		__metal_plic0_enable(plic, i, METAL_DISABLE);
2040389c:	4601                	li	a2,0
2040389e:	fe842583          	lw	a1,-24(s0)
204038a2:	fe442503          	lw	a0,-28(s0)
204038a6:	3585                	jal	20403706 <__metal_plic0_enable>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:117 (discriminator 3)
		__metal_plic0_set_priority(controller, i, 0);
204038a8:	4601                	li	a2,0
204038aa:	fe842583          	lw	a1,-24(s0)
204038ae:	fcc42503          	lw	a0,-52(s0)
204038b2:	3b7d                	jal	20403670 <__metal_plic0_set_priority>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:118 (discriminator 3)
		plic->metal_exint_table[i] = NULL;
204038b4:	fe442703          	lw	a4,-28(s0)
204038b8:	fe842783          	lw	a5,-24(s0)
204038bc:	078a                	slli	a5,a5,0x2
204038be:	97ba                	add	a5,a5,a4
204038c0:	0007a423          	sw	zero,8(a5)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:119 (discriminator 3)
		plic->metal_exdata_table[i].sub_int = NULL;
204038c4:	fe442683          	lw	a3,-28(s0)
204038c8:	fe842703          	lw	a4,-24(s0)
204038cc:	87ba                	mv	a5,a4
204038ce:	0786                	slli	a5,a5,0x1
204038d0:	97ba                	add	a5,a5,a4
204038d2:	078e                	slli	a5,a5,0x3
204038d4:	97b6                	add	a5,a5,a3
204038d6:	0807a223          	sw	zero,132(a5)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:120 (discriminator 3)
		plic->metal_exdata_table[i].exint_data = NULL;
204038da:	fe442683          	lw	a3,-28(s0)
204038de:	fe842703          	lw	a4,-24(s0)
204038e2:	87ba                	mv	a5,a4
204038e4:	0786                	slli	a5,a5,0x1
204038e6:	97ba                	add	a5,a5,a4
204038e8:	078e                	slli	a5,a5,0x3
204038ea:	97b6                	add	a5,a5,a3
204038ec:	0807a423          	sw	zero,136(a5)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:115 (discriminator 3)
	    for (int i = 0; i < num_interrupts; i++) {
204038f0:	fe842783          	lw	a5,-24(s0)
204038f4:	0785                	addi	a5,a5,1
204038f6:	fef42423          	sw	a5,-24(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:115 (discriminator 1)
204038fa:	fe842703          	lw	a4,-24(s0)
204038fe:	fe042783          	lw	a5,-32(s0)
20403902:	f8f74de3          	blt	a4,a5,2040389c <__metal_driver_riscv_plic0_init+0x64>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:123 (discriminator 2)
	    }

	    __metal_plic0_set_threshold(controller, 0);
20403906:	4581                	li	a1,0
20403908:	fcc42503          	lw	a0,-52(s0)
2040390c:	d01ff0ef          	jal	ra,2040360c <__metal_plic0_set_threshold>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:126 (discriminator 2)

	    /* Register plic (ext) interrupt with with parent controller */
	    intc->vtable->interrupt_register(intc, line, NULL, plic);
20403910:	fdc42783          	lw	a5,-36(s0)
20403914:	439c                	lw	a5,0(a5)
20403916:	4fdc                	lw	a5,28(a5)
20403918:	fe442683          	lw	a3,-28(s0)
2040391c:	4601                	li	a2,0
2040391e:	fd842583          	lw	a1,-40(s0)
20403922:	fdc42503          	lw	a0,-36(s0)
20403926:	9782                	jalr	a5
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:128 (discriminator 2)
	    /* Register plic handler for dispatching its device interrupts */
	    intc->vtable->interrupt_register(intc, line, __metal_plic0_handler, plic);
20403928:	fdc42783          	lw	a5,-36(s0)
2040392c:	439c                	lw	a5,0(a5)
2040392e:	4fd8                	lw	a4,28(a5)
20403930:	fe442683          	lw	a3,-28(s0)
20403934:	204037b7          	lui	a5,0x20403
20403938:	7aa78613          	addi	a2,a5,1962 # 204037aa <__metal_plic0_handler>
2040393c:	fd842583          	lw	a1,-40(s0)
20403940:	fdc42503          	lw	a0,-36(s0)
20403944:	9702                	jalr	a4
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:130 (discriminator 2)
	    /* Enable plic (ext) interrupt with with parent controller */
	    intc->vtable->interrupt_enable(intc, line);
20403946:	fdc42783          	lw	a5,-36(s0)
2040394a:	439c                	lw	a5,0(a5)
2040394c:	53dc                	lw	a5,36(a5)
2040394e:	fd842583          	lw	a1,-40(s0)
20403952:	fdc42503          	lw	a0,-36(s0)
20403956:	9782                	jalr	a5
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:107 (discriminator 2)
	for(int parent = 0; parent < __METAL_PLIC_NUM_PARENTS; parent++) {
20403958:	fec42783          	lw	a5,-20(s0)
2040395c:	0785                	addi	a5,a5,1
2040395e:	fef42623          	sw	a5,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:107 (discriminator 1)
20403962:	fec42783          	lw	a5,-20(s0)
20403966:	eef05be3          	blez	a5,2040385c <__metal_driver_riscv_plic0_init+0x24>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:132
	}
        plic->init_done = 1;
2040396a:	fe442783          	lw	a5,-28(s0)
2040396e:	4705                	li	a4,1
20403970:	c3d8                	sw	a4,4(a5)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:134
    }
}
20403972:	0001                	nop
20403974:	50f2                	lw	ra,60(sp)
20403976:	5462                	lw	s0,56(sp)
20403978:	6121                	addi	sp,sp,64
2040397a:	8082                	ret

2040397c <__metal_driver_riscv_plic0_register>:
__metal_driver_riscv_plic0_register():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:139

int __metal_driver_riscv_plic0_register (struct metal_interrupt *controller,
			               int id, metal_interrupt_handler_t isr,
			               void *priv)
{
2040397c:	7179                	addi	sp,sp,-48
2040397e:	d606                	sw	ra,44(sp)
20403980:	d422                	sw	s0,40(sp)
20403982:	1800                	addi	s0,sp,48
20403984:	fca42e23          	sw	a0,-36(s0)
20403988:	fcb42c23          	sw	a1,-40(s0)
2040398c:	fcc42a23          	sw	a2,-44(s0)
20403990:	fcd42823          	sw	a3,-48(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:140
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
20403994:	fdc42783          	lw	a5,-36(s0)
20403998:	fef42623          	sw	a5,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:142

    if (id >= __metal_driver_sifive_plic0_num_interrupts(controller)) {
2040399c:	fdc42503          	lw	a0,-36(s0)
204039a0:	b6dff0ef          	jal	ra,2040350c <__metal_driver_sifive_plic0_num_interrupts>
204039a4:	872a                	mv	a4,a0
204039a6:	fd842783          	lw	a5,-40(s0)
204039aa:	00e7c463          	blt	a5,a4,204039b2 <__metal_driver_riscv_plic0_register+0x36>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:143
        return -1;
204039ae:	57fd                	li	a5,-1
204039b0:	a051                	j	20403a34 <__metal_driver_riscv_plic0_register+0xb8>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:146
    }
 
    if (isr) {
204039b2:	fd442783          	lw	a5,-44(s0)
204039b6:	cf9d                	beqz	a5,204039f4 <__metal_driver_riscv_plic0_register+0x78>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:147
        __metal_plic0_set_priority(controller, id, 2);
204039b8:	4609                	li	a2,2
204039ba:	fd842583          	lw	a1,-40(s0)
204039be:	fdc42503          	lw	a0,-36(s0)
204039c2:	cafff0ef          	jal	ra,20403670 <__metal_plic0_set_priority>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:148
	plic->metal_exint_table[id] = isr;
204039c6:	fec42703          	lw	a4,-20(s0)
204039ca:	fd842783          	lw	a5,-40(s0)
204039ce:	078a                	slli	a5,a5,0x2
204039d0:	97ba                	add	a5,a5,a4
204039d2:	fd442703          	lw	a4,-44(s0)
204039d6:	c798                	sw	a4,8(a5)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:149
	plic->metal_exdata_table[id].exint_data = priv;
204039d8:	fec42683          	lw	a3,-20(s0)
204039dc:	fd842703          	lw	a4,-40(s0)
204039e0:	87ba                	mv	a5,a4
204039e2:	0786                	slli	a5,a5,0x1
204039e4:	97ba                	add	a5,a5,a4
204039e6:	078e                	slli	a5,a5,0x3
204039e8:	97b6                	add	a5,a5,a3
204039ea:	fd042703          	lw	a4,-48(s0)
204039ee:	08e7a423          	sw	a4,136(a5)
204039f2:	a081                	j	20403a32 <__metal_driver_riscv_plic0_register+0xb6>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:151
    } else {
        __metal_plic0_set_priority(controller, id, 1);
204039f4:	4605                	li	a2,1
204039f6:	fd842583          	lw	a1,-40(s0)
204039fa:	fdc42503          	lw	a0,-36(s0)
204039fe:	c73ff0ef          	jal	ra,20403670 <__metal_plic0_set_priority>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:152
	plic->metal_exint_table[id] = __metal_plic0_default_handler;
20403a02:	fec42703          	lw	a4,-20(s0)
20403a06:	fd842783          	lw	a5,-40(s0)
20403a0a:	078a                	slli	a5,a5,0x2
20403a0c:	97ba                	add	a5,a5,a4
20403a0e:	20403737          	lui	a4,0x20403
20403a12:	79270713          	addi	a4,a4,1938 # 20403792 <__metal_plic0_default_handler>
20403a16:	c798                	sw	a4,8(a5)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:153
	plic->metal_exdata_table[id].sub_int = priv;
20403a18:	fec42683          	lw	a3,-20(s0)
20403a1c:	fd842703          	lw	a4,-40(s0)
20403a20:	87ba                	mv	a5,a4
20403a22:	0786                	slli	a5,a5,0x1
20403a24:	97ba                	add	a5,a5,a4
20403a26:	078e                	slli	a5,a5,0x3
20403a28:	97b6                	add	a5,a5,a3
20403a2a:	fd042703          	lw	a4,-48(s0)
20403a2e:	08e7a223          	sw	a4,132(a5)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:156
    }

    return 0;
20403a32:	4781                	li	a5,0
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:157
}
20403a34:	853e                	mv	a0,a5
20403a36:	50b2                	lw	ra,44(sp)
20403a38:	5422                	lw	s0,40(sp)
20403a3a:	6145                	addi	sp,sp,48
20403a3c:	8082                	ret

20403a3e <__metal_driver_riscv_plic0_enable>:
__metal_driver_riscv_plic0_enable():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:160

int __metal_driver_riscv_plic0_enable (struct metal_interrupt *controller, int id)
{
20403a3e:	7179                	addi	sp,sp,-48
20403a40:	d606                	sw	ra,44(sp)
20403a42:	d422                	sw	s0,40(sp)
20403a44:	1800                	addi	s0,sp,48
20403a46:	fca42e23          	sw	a0,-36(s0)
20403a4a:	fcb42c23          	sw	a1,-40(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:161
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
20403a4e:	fdc42783          	lw	a5,-36(s0)
20403a52:	fef42623          	sw	a5,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:163

    if (id >= __metal_driver_sifive_plic0_num_interrupts(controller)) {
20403a56:	fdc42503          	lw	a0,-36(s0)
20403a5a:	ab3ff0ef          	jal	ra,2040350c <__metal_driver_sifive_plic0_num_interrupts>
20403a5e:	872a                	mv	a4,a0
20403a60:	fd842783          	lw	a5,-40(s0)
20403a64:	00e7c463          	blt	a5,a4,20403a6c <__metal_driver_riscv_plic0_enable+0x2e>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:164
        return -1;
20403a68:	57fd                	li	a5,-1
20403a6a:	a809                	j	20403a7c <__metal_driver_riscv_plic0_enable+0x3e>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:167
    }

    __metal_plic0_enable(plic, id, METAL_ENABLE);
20403a6c:	4605                	li	a2,1
20403a6e:	fd842583          	lw	a1,-40(s0)
20403a72:	fec42503          	lw	a0,-20(s0)
20403a76:	c91ff0ef          	jal	ra,20403706 <__metal_plic0_enable>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:168
    return 0;
20403a7a:	4781                	li	a5,0
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:169
}
20403a7c:	853e                	mv	a0,a5
20403a7e:	50b2                	lw	ra,44(sp)
20403a80:	5422                	lw	s0,40(sp)
20403a82:	6145                	addi	sp,sp,48
20403a84:	8082                	ret

20403a86 <__metal_driver_riscv_plic0_disable>:
__metal_driver_riscv_plic0_disable():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:172

int __metal_driver_riscv_plic0_disable (struct metal_interrupt *controller, int id)
{
20403a86:	7179                	addi	sp,sp,-48
20403a88:	d606                	sw	ra,44(sp)
20403a8a:	d422                	sw	s0,40(sp)
20403a8c:	1800                	addi	s0,sp,48
20403a8e:	fca42e23          	sw	a0,-36(s0)
20403a92:	fcb42c23          	sw	a1,-40(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:173
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
20403a96:	fdc42783          	lw	a5,-36(s0)
20403a9a:	fef42623          	sw	a5,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:175

    if (id >= __metal_driver_sifive_plic0_num_interrupts(controller)) {
20403a9e:	fdc42503          	lw	a0,-36(s0)
20403aa2:	a6bff0ef          	jal	ra,2040350c <__metal_driver_sifive_plic0_num_interrupts>
20403aa6:	872a                	mv	a4,a0
20403aa8:	fd842783          	lw	a5,-40(s0)
20403aac:	00e7c463          	blt	a5,a4,20403ab4 <__metal_driver_riscv_plic0_disable+0x2e>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:176
        return -1;
20403ab0:	57fd                	li	a5,-1
20403ab2:	a809                	j	20403ac4 <__metal_driver_riscv_plic0_disable+0x3e>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:178
    }
    __metal_plic0_enable(plic, id, METAL_DISABLE);
20403ab4:	4601                	li	a2,0
20403ab6:	fd842583          	lw	a1,-40(s0)
20403aba:	fec42503          	lw	a0,-20(s0)
20403abe:	c49ff0ef          	jal	ra,20403706 <__metal_plic0_enable>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:179
    return 0;
20403ac2:	4781                	li	a5,0
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:180
}
20403ac4:	853e                	mv	a0,a5
20403ac6:	50b2                	lw	ra,44(sp)
20403ac8:	5422                	lw	s0,40(sp)
20403aca:	6145                	addi	sp,sp,48
20403acc:	8082                	ret

20403ace <__metal_driver_sifive_fe310_g000_hfrosc_ref>:
__metal_driver_sifive_fe310_g000_hfrosc_ref():
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:880



/* --------------------- sifive_fe310_g000_hfrosc ------------ */
static __inline__ struct metal_clock * __metal_driver_sifive_fe310_g000_hfrosc_ref(const struct metal_clock *clock)
{
20403ace:	1101                	addi	sp,sp,-32
20403ad0:	ce22                	sw	s0,28(sp)
20403ad2:	1000                	addi	s0,sp,32
20403ad4:	fea42623          	sw	a0,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:881
		return (struct metal_clock *)&__metal_dt_clock_2.clock;
20403ad8:	800007b7          	lui	a5,0x80000
20403adc:	07878793          	addi	a5,a5,120 # 80000078 <metal_segment_heap_target_end+0xffffebe0>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:882
}
20403ae0:	853e                	mv	a0,a5
20403ae2:	4472                	lw	s0,28(sp)
20403ae4:	6105                	addi	sp,sp,32
20403ae6:	8082                	ret

20403ae8 <__metal_driver_sifive_fe310_g000_hfrosc_config_base>:
__metal_driver_sifive_fe310_g000_hfrosc_config_base():
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:885

static __inline__ struct __metal_driver_sifive_fe310_g000_prci * __metal_driver_sifive_fe310_g000_hfrosc_config_base(const struct metal_clock *clock)
{
20403ae8:	1101                	addi	sp,sp,-32
20403aea:	ce22                	sw	s0,28(sp)
20403aec:	1000                	addi	s0,sp,32
20403aee:	fea42623          	sw	a0,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:886
		return (struct __metal_driver_sifive_fe310_g000_prci *)&__metal_dt_prci_10008000;
20403af2:	82c18793          	addi	a5,gp,-2004 # 800007bc <__metal_dt_prci_10008000>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:887
}
20403af6:	853e                	mv	a0,a5
20403af8:	4472                	lw	s0,28(sp)
20403afa:	6105                	addi	sp,sp,32
20403afc:	8082                	ret

20403afe <__metal_driver_sifive_fe310_g000_hfrosc_config_offset>:
__metal_driver_sifive_fe310_g000_hfrosc_config_offset():
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:895
{
		return &__metal_driver_vtable_sifive_fe310_g000_prci;
}

static __inline__ long __metal_driver_sifive_fe310_g000_hfrosc_config_offset(const struct metal_clock *clock)
{
20403afe:	1101                	addi	sp,sp,-32
20403b00:	ce22                	sw	s0,28(sp)
20403b02:	1000                	addi	s0,sp,32
20403b04:	fea42623          	sw	a0,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:896
		return METAL_SIFIVE_FE310_G000_PRCI_HFROSCCFG;
20403b08:	4781                	li	a5,0
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:897
}
20403b0a:	853e                	mv	a0,a5
20403b0c:	4472                	lw	s0,28(sp)
20403b0e:	6105                	addi	sp,sp,32
20403b10:	8082                	ret

20403b12 <__metal_driver_sifive_fe310_g000_prci_vtable>:
__metal_driver_sifive_fe310_g000_prci_vtable():
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:1012
{
		return METAL_SIFIVE_FE310_G000_PRCI_10008000_SIZE;
}

static __inline__ const struct __metal_driver_vtable_sifive_fe310_g000_prci * __metal_driver_sifive_fe310_g000_prci_vtable( )
{
20403b12:	1141                	addi	sp,sp,-16
20403b14:	c622                	sw	s0,12(sp)
20403b16:	0800                	addi	s0,sp,16
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:1013
		return &__metal_driver_vtable_sifive_fe310_g000_prci;
20403b18:	84018793          	addi	a5,gp,-1984 # 800007d0 <__metal_driver_vtable_sifive_fe310_g000_prci>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:1014
}
20403b1c:	853e                	mv	a0,a5
20403b1e:	4432                	lw	s0,12(sp)
20403b20:	0141                	addi	sp,sp,16
20403b22:	8082                	ret

20403b24 <__metal_driver_sifive_fe310_g000_hfrosc_get_rate_hz>:
__metal_driver_sifive_fe310_g000_hfrosc_get_rate_hz():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:17
#define CONFIG_TRIM    0x001F0000UL
#define CONFIG_ENABLE  0x40000000UL
#define CONFIG_READY   0x80000000UL

long __metal_driver_sifive_fe310_g000_hfrosc_get_rate_hz(const struct metal_clock *clock)
{
20403b24:	7139                	addi	sp,sp,-64
20403b26:	de06                	sw	ra,60(sp)
20403b28:	dc22                	sw	s0,56(sp)
20403b2a:	0080                	addi	s0,sp,64
20403b2c:	fca42623          	sw	a0,-52(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:18
    struct metal_clock *ref = __metal_driver_sifive_fe310_g000_hfrosc_ref(clock);
20403b30:	fcc42503          	lw	a0,-52(s0)
20403b34:	3f69                	jal	20403ace <__metal_driver_sifive_fe310_g000_hfrosc_ref>
20403b36:	fea42623          	sw	a0,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:19
    long config_offset = __metal_driver_sifive_fe310_g000_hfrosc_config_offset(clock);
20403b3a:	fcc42503          	lw	a0,-52(s0)
20403b3e:	37c1                	jal	20403afe <__metal_driver_sifive_fe310_g000_hfrosc_config_offset>
20403b40:	fea42423          	sw	a0,-24(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:21
    struct __metal_driver_sifive_fe310_g000_prci *config_base =
      __metal_driver_sifive_fe310_g000_hfrosc_config_base(clock);
20403b44:	fcc42503          	lw	a0,-52(s0)
20403b48:	3745                	jal	20403ae8 <__metal_driver_sifive_fe310_g000_hfrosc_config_base>
20403b4a:	fea42223          	sw	a0,-28(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:23
    const struct __metal_driver_vtable_sifive_fe310_g000_prci *vtable =
      __metal_driver_sifive_fe310_g000_prci_vtable();
20403b4e:	37d1                	jal	20403b12 <__metal_driver_sifive_fe310_g000_prci_vtable>
20403b50:	fea42023          	sw	a0,-32(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:24
    long cfg = vtable->get_reg(config_base, config_offset);
20403b54:	fe042783          	lw	a5,-32(s0)
20403b58:	439c                	lw	a5,0(a5)
20403b5a:	fe842583          	lw	a1,-24(s0)
20403b5e:	fe442503          	lw	a0,-28(s0)
20403b62:	9782                	jalr	a5
20403b64:	fca42e23          	sw	a0,-36(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:26

    if ((cfg & CONFIG_ENABLE) == 0)
20403b68:	fdc42703          	lw	a4,-36(s0)
20403b6c:	400007b7          	lui	a5,0x40000
20403b70:	8ff9                	and	a5,a5,a4
20403b72:	e399                	bnez	a5,20403b78 <__metal_driver_sifive_fe310_g000_hfrosc_get_rate_hz+0x54>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:27
        return -1;
20403b74:	57fd                	li	a5,-1
20403b76:	a025                	j	20403b9e <__metal_driver_sifive_fe310_g000_hfrosc_get_rate_hz+0x7a>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:28
    if ((cfg & CONFIG_READY) == 0)
20403b78:	fdc42783          	lw	a5,-36(s0)
20403b7c:	0007c463          	bltz	a5,20403b84 <__metal_driver_sifive_fe310_g000_hfrosc_get_rate_hz+0x60>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:29
        return -1;
20403b80:	57fd                	li	a5,-1
20403b82:	a831                	j	20403b9e <__metal_driver_sifive_fe310_g000_hfrosc_get_rate_hz+0x7a>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:30
    return metal_clock_get_rate_hz(ref) / ((cfg & CONFIG_DIVIDER) + 1);
20403b84:	fec42503          	lw	a0,-20(s0)
20403b88:	111010ef          	jal	ra,20405498 <metal_clock_get_rate_hz>
20403b8c:	87aa                	mv	a5,a0
20403b8e:	873e                	mv	a4,a5
20403b90:	fdc42783          	lw	a5,-36(s0)
20403b94:	03f7f793          	andi	a5,a5,63
20403b98:	0785                	addi	a5,a5,1
20403b9a:	02f757b3          	divu	a5,a4,a5
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:31
}
20403b9e:	853e                	mv	a0,a5
20403ba0:	50f2                	lw	ra,60(sp)
20403ba2:	5462                	lw	s0,56(sp)
20403ba4:	6121                	addi	sp,sp,64
20403ba6:	8082                	ret

20403ba8 <__metal_driver_sifive_fe310_g000_hfrosc_set_rate_hz>:
__metal_driver_sifive_fe310_g000_hfrosc_set_rate_hz():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:34

long __metal_driver_sifive_fe310_g000_hfrosc_set_rate_hz(struct metal_clock *clock, long rate)
{
20403ba8:	1101                	addi	sp,sp,-32
20403baa:	ce06                	sw	ra,28(sp)
20403bac:	cc22                	sw	s0,24(sp)
20403bae:	1000                	addi	s0,sp,32
20403bb0:	fea42623          	sw	a0,-20(s0)
20403bb4:	feb42423          	sw	a1,-24(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:35
    return __metal_driver_sifive_fe310_g000_hfrosc_get_rate_hz(clock);
20403bb8:	fec42503          	lw	a0,-20(s0)
20403bbc:	37a5                	jal	20403b24 <__metal_driver_sifive_fe310_g000_hfrosc_get_rate_hz>
20403bbe:	87aa                	mv	a5,a0
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:36
}
20403bc0:	853e                	mv	a0,a5
20403bc2:	40f2                	lw	ra,28(sp)
20403bc4:	4462                	lw	s0,24(sp)
20403bc6:	6105                	addi	sp,sp,32
20403bc8:	8082                	ret

20403bca <__metal_driver_sifive_fe310_g000_hfxosc_ref>:
__metal_driver_sifive_fe310_g000_hfxosc_ref():
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:903
{
20403bca:	1101                	addi	sp,sp,-32
20403bcc:	ce22                	sw	s0,28(sp)
20403bce:	1000                	addi	s0,sp,32
20403bd0:	fea42623          	sw	a0,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:904
		return (struct metal_clock *)&__metal_dt_clock_0.clock;
20403bd4:	800007b7          	lui	a5,0x80000
20403bd8:	06c78793          	addi	a5,a5,108 # 8000006c <metal_segment_heap_target_end+0xffffebd4>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:905
}
20403bdc:	853e                	mv	a0,a5
20403bde:	4472                	lw	s0,28(sp)
20403be0:	6105                	addi	sp,sp,32
20403be2:	8082                	ret

20403be4 <__metal_driver_sifive_fe310_g000_hfxosc_config_base>:
__metal_driver_sifive_fe310_g000_hfxosc_config_base():
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:908
{
20403be4:	1101                	addi	sp,sp,-32
20403be6:	ce22                	sw	s0,28(sp)
20403be8:	1000                	addi	s0,sp,32
20403bea:	fea42623          	sw	a0,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:909
		return (struct __metal_driver_sifive_fe310_g000_prci *)&__metal_dt_prci_10008000;
20403bee:	82c18793          	addi	a5,gp,-2004 # 800007bc <__metal_dt_prci_10008000>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:910
}
20403bf2:	853e                	mv	a0,a5
20403bf4:	4472                	lw	s0,28(sp)
20403bf6:	6105                	addi	sp,sp,32
20403bf8:	8082                	ret

20403bfa <__metal_driver_sifive_fe310_g000_hfxosc_config_offset>:
__metal_driver_sifive_fe310_g000_hfxosc_config_offset():
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:913
{
20403bfa:	1101                	addi	sp,sp,-32
20403bfc:	ce22                	sw	s0,28(sp)
20403bfe:	1000                	addi	s0,sp,32
20403c00:	fea42623          	sw	a0,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:914
		return METAL_SIFIVE_FE310_G000_PRCI_HFXOSCCFG;
20403c04:	4791                	li	a5,4
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:915
}
20403c06:	853e                	mv	a0,a5
20403c08:	4472                	lw	s0,28(sp)
20403c0a:	6105                	addi	sp,sp,32
20403c0c:	8082                	ret

20403c0e <__metal_driver_sifive_fe310_g000_prci_vtable>:
__metal_driver_sifive_fe310_g000_prci_vtable():
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:1012
{
20403c0e:	1141                	addi	sp,sp,-16
20403c10:	c622                	sw	s0,12(sp)
20403c12:	0800                	addi	s0,sp,16
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:1013
		return &__metal_driver_vtable_sifive_fe310_g000_prci;
20403c14:	84018793          	addi	a5,gp,-1984 # 800007d0 <__metal_driver_vtable_sifive_fe310_g000_prci>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:1014
}
20403c18:	853e                	mv	a0,a5
20403c1a:	4432                	lw	s0,12(sp)
20403c1c:	0141                	addi	sp,sp,16
20403c1e:	8082                	ret

20403c20 <__metal_driver_sifive_fe310_g000_hfxosc_get_rate_hz>:
__metal_driver_sifive_fe310_g000_hfxosc_get_rate_hz():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:15

#define CONFIG_ENABLE  0x40000000UL
#define CONFIG_READY   0x80000000UL

long __metal_driver_sifive_fe310_g000_hfxosc_get_rate_hz(const struct metal_clock *clock)
{
20403c20:	7139                	addi	sp,sp,-64
20403c22:	de06                	sw	ra,60(sp)
20403c24:	dc22                	sw	s0,56(sp)
20403c26:	0080                	addi	s0,sp,64
20403c28:	fca42623          	sw	a0,-52(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:16
    struct metal_clock *ref = __metal_driver_sifive_fe310_g000_hfxosc_ref(clock);
20403c2c:	fcc42503          	lw	a0,-52(s0)
20403c30:	3f69                	jal	20403bca <__metal_driver_sifive_fe310_g000_hfxosc_ref>
20403c32:	fea42623          	sw	a0,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:17
    long config_offset = __metal_driver_sifive_fe310_g000_hfxosc_config_offset(clock);
20403c36:	fcc42503          	lw	a0,-52(s0)
20403c3a:	37c1                	jal	20403bfa <__metal_driver_sifive_fe310_g000_hfxosc_config_offset>
20403c3c:	fea42423          	sw	a0,-24(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:19
    struct __metal_driver_sifive_fe310_g000_prci *config_base =
      __metal_driver_sifive_fe310_g000_hfxosc_config_base(clock);
20403c40:	fcc42503          	lw	a0,-52(s0)
20403c44:	3745                	jal	20403be4 <__metal_driver_sifive_fe310_g000_hfxosc_config_base>
20403c46:	fea42223          	sw	a0,-28(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:21
    const struct __metal_driver_vtable_sifive_fe310_g000_prci *vtable =
      __metal_driver_sifive_fe310_g000_prci_vtable();
20403c4a:	37d1                	jal	20403c0e <__metal_driver_sifive_fe310_g000_prci_vtable>
20403c4c:	fea42023          	sw	a0,-32(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:22
    long cfg = vtable->get_reg(config_base, config_offset);
20403c50:	fe042783          	lw	a5,-32(s0)
20403c54:	439c                	lw	a5,0(a5)
20403c56:	fe842583          	lw	a1,-24(s0)
20403c5a:	fe442503          	lw	a0,-28(s0)
20403c5e:	9782                	jalr	a5
20403c60:	fca42e23          	sw	a0,-36(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:24

    if ((cfg & CONFIG_ENABLE) == 0)
20403c64:	fdc42703          	lw	a4,-36(s0)
20403c68:	400007b7          	lui	a5,0x40000
20403c6c:	8ff9                	and	a5,a5,a4
20403c6e:	e399                	bnez	a5,20403c74 <__metal_driver_sifive_fe310_g000_hfxosc_get_rate_hz+0x54>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:25
        return -1;
20403c70:	57fd                	li	a5,-1
20403c72:	a821                	j	20403c8a <__metal_driver_sifive_fe310_g000_hfxosc_get_rate_hz+0x6a>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:26
    if ((cfg & CONFIG_READY) == 0)
20403c74:	fdc42783          	lw	a5,-36(s0)
20403c78:	0007c463          	bltz	a5,20403c80 <__metal_driver_sifive_fe310_g000_hfxosc_get_rate_hz+0x60>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:27
        return -1;
20403c7c:	57fd                	li	a5,-1
20403c7e:	a031                	j	20403c8a <__metal_driver_sifive_fe310_g000_hfxosc_get_rate_hz+0x6a>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:28
    return metal_clock_get_rate_hz(ref);
20403c80:	fec42503          	lw	a0,-20(s0)
20403c84:	015010ef          	jal	ra,20405498 <metal_clock_get_rate_hz>
20403c88:	87aa                	mv	a5,a0
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:29
}
20403c8a:	853e                	mv	a0,a5
20403c8c:	50f2                	lw	ra,60(sp)
20403c8e:	5462                	lw	s0,56(sp)
20403c90:	6121                	addi	sp,sp,64
20403c92:	8082                	ret

20403c94 <__metal_driver_sifive_fe310_g000_hfxosc_set_rate_hz>:
__metal_driver_sifive_fe310_g000_hfxosc_set_rate_hz():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:32

long __metal_driver_sifive_fe310_g000_hfxosc_set_rate_hz(struct metal_clock *clock, long rate)
{
20403c94:	1101                	addi	sp,sp,-32
20403c96:	ce06                	sw	ra,28(sp)
20403c98:	cc22                	sw	s0,24(sp)
20403c9a:	1000                	addi	s0,sp,32
20403c9c:	fea42623          	sw	a0,-20(s0)
20403ca0:	feb42423          	sw	a1,-24(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:33
    return __metal_driver_sifive_fe310_g000_hfxosc_get_rate_hz(clock);
20403ca4:	fec42503          	lw	a0,-20(s0)
20403ca8:	3fa5                	jal	20403c20 <__metal_driver_sifive_fe310_g000_hfxosc_get_rate_hz>
20403caa:	87aa                	mv	a5,a0
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:34
}
20403cac:	853e                	mv	a0,a5
20403cae:	40f2                	lw	ra,28(sp)
20403cb0:	4462                	lw	s0,24(sp)
20403cb2:	6105                	addi	sp,sp,32
20403cb4:	8082                	ret

20403cb6 <__metal_driver_sifive_fe310_g000_pll_pllsel0>:
__metal_driver_sifive_fe310_g000_pll_pllsel0():
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:964
{
20403cb6:	1101                	addi	sp,sp,-32
20403cb8:	ce22                	sw	s0,28(sp)
20403cba:	1000                	addi	s0,sp,32
20403cbc:	fea42623          	sw	a0,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:965
		return (struct metal_clock *)&__metal_dt_clock_3.clock;
20403cc0:	800007b7          	lui	a5,0x80000
20403cc4:	76878793          	addi	a5,a5,1896 # 80000768 <metal_segment_heap_target_end+0xfffff2d0>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:966
}
20403cc8:	853e                	mv	a0,a5
20403cca:	4472                	lw	s0,28(sp)
20403ccc:	6105                	addi	sp,sp,32
20403cce:	8082                	ret

20403cd0 <__metal_driver_sifive_fe310_g000_pll_pllref>:
__metal_driver_sifive_fe310_g000_pll_pllref():
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:969
{
20403cd0:	1101                	addi	sp,sp,-32
20403cd2:	ce22                	sw	s0,28(sp)
20403cd4:	1000                	addi	s0,sp,32
20403cd6:	fea42623          	sw	a0,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:970
		return (struct metal_clock *)&__metal_dt_clock_1.clock;
20403cda:	800007b7          	lui	a5,0x80000
20403cde:	77478793          	addi	a5,a5,1908 # 80000774 <metal_segment_heap_target_end+0xfffff2dc>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:971
}
20403ce2:	853e                	mv	a0,a5
20403ce4:	4472                	lw	s0,28(sp)
20403ce6:	6105                	addi	sp,sp,32
20403ce8:	8082                	ret

20403cea <__metal_driver_sifive_fe310_g000_pll_divider_base>:
__metal_driver_sifive_fe310_g000_pll_divider_base():
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:974
{
20403cea:	1101                	addi	sp,sp,-32
20403cec:	ce22                	sw	s0,28(sp)
20403cee:	1000                	addi	s0,sp,32
20403cf0:	fea42623          	sw	a0,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:975
		return (struct __metal_driver_sifive_fe310_g000_prci *)&__metal_dt_prci_10008000;
20403cf4:	82c18793          	addi	a5,gp,-2004 # 800007bc <__metal_dt_prci_10008000>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:976
}
20403cf8:	853e                	mv	a0,a5
20403cfa:	4472                	lw	s0,28(sp)
20403cfc:	6105                	addi	sp,sp,32
20403cfe:	8082                	ret

20403d00 <__metal_driver_sifive_fe310_g000_pll_divider_offset>:
__metal_driver_sifive_fe310_g000_pll_divider_offset():
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:979
{
20403d00:	1101                	addi	sp,sp,-32
20403d02:	ce22                	sw	s0,28(sp)
20403d04:	1000                	addi	s0,sp,32
20403d06:	fea42623          	sw	a0,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:980
		return METAL_SIFIVE_FE310_G000_PRCI_PLLOUTDIV;
20403d0a:	47b1                	li	a5,12
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:981
}
20403d0c:	853e                	mv	a0,a5
20403d0e:	4472                	lw	s0,28(sp)
20403d10:	6105                	addi	sp,sp,32
20403d12:	8082                	ret

20403d14 <__metal_driver_sifive_fe310_g000_pll_config_base>:
__metal_driver_sifive_fe310_g000_pll_config_base():
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:984
{
20403d14:	1141                	addi	sp,sp,-16
20403d16:	c622                	sw	s0,12(sp)
20403d18:	0800                	addi	s0,sp,16
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:985
		return (struct __metal_driver_sifive_fe310_g000_prci *)&__metal_dt_prci_10008000;
20403d1a:	82c18793          	addi	a5,gp,-2004 # 800007bc <__metal_dt_prci_10008000>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:986
}
20403d1e:	853e                	mv	a0,a5
20403d20:	4432                	lw	s0,12(sp)
20403d22:	0141                	addi	sp,sp,16
20403d24:	8082                	ret

20403d26 <__metal_driver_sifive_fe310_g000_pll_config_offset>:
__metal_driver_sifive_fe310_g000_pll_config_offset():
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:989
{
20403d26:	1141                	addi	sp,sp,-16
20403d28:	c622                	sw	s0,12(sp)
20403d2a:	0800                	addi	s0,sp,16
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:990
		return METAL_SIFIVE_FE310_G000_PRCI_PLLCFG;
20403d2c:	47a1                	li	a5,8
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:991
}
20403d2e:	853e                	mv	a0,a5
20403d30:	4432                	lw	s0,12(sp)
20403d32:	0141                	addi	sp,sp,16
20403d34:	8082                	ret

20403d36 <__metal_driver_sifive_fe310_g000_pll_init_rate>:
__metal_driver_sifive_fe310_g000_pll_init_rate():
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:994
{
20403d36:	1141                	addi	sp,sp,-16
20403d38:	c622                	sw	s0,12(sp)
20403d3a:	0800                	addi	s0,sp,16
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:995
		return 16000000;
20403d3c:	00f427b7          	lui	a5,0xf42
20403d40:	40078793          	addi	a5,a5,1024 # f42400 <__heap_size+0xf41c00>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:996
}
20403d44:	853e                	mv	a0,a5
20403d46:	4432                	lw	s0,12(sp)
20403d48:	0141                	addi	sp,sp,16
20403d4a:	8082                	ret

20403d4c <__metal_driver_sifive_fe310_g000_prci_base>:
__metal_driver_sifive_fe310_g000_prci_base():
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:1002
{
20403d4c:	1141                	addi	sp,sp,-16
20403d4e:	c622                	sw	s0,12(sp)
20403d50:	0800                	addi	s0,sp,16
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:1003
		return METAL_SIFIVE_FE310_G000_PRCI_10008000_BASE_ADDRESS;
20403d52:	100087b7          	lui	a5,0x10008
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:1004
}
20403d56:	853e                	mv	a0,a5
20403d58:	4432                	lw	s0,12(sp)
20403d5a:	0141                	addi	sp,sp,16
20403d5c:	8082                	ret

20403d5e <__metal_driver_sifive_fe310_g000_prci_vtable>:
__metal_driver_sifive_fe310_g000_prci_vtable():
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:1012
{
20403d5e:	1141                	addi	sp,sp,-16
20403d60:	c622                	sw	s0,12(sp)
20403d62:	0800                	addi	s0,sp,16
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:1013
		return &__metal_driver_vtable_sifive_fe310_g000_prci;
20403d64:	84018793          	addi	a5,gp,-1984 # 800007d0 <__metal_driver_vtable_sifive_fe310_g000_prci>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:1014
}
20403d68:	853e                	mv	a0,a5
20403d6a:	4432                	lw	s0,12(sp)
20403d6c:	0141                	addi	sp,sp,16
20403d6e:	8082                	ret

20403d70 <get_pll_config_freq>:
get_pll_config_freq():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:137
 *  - config the PLL configuration
 * Returns:
 *  - PLL_CONFIG_NOT_VALID if the configuration is not valid for the input frequency
 *  - the output frequency, in hertz */
static long get_pll_config_freq(unsigned long pll_input_rate, const struct pll_config_t *config)
{
20403d70:	1101                	addi	sp,sp,-32
20403d72:	ce22                	sw	s0,28(sp)
20403d74:	1000                	addi	s0,sp,32
20403d76:	fea42623          	sw	a0,-20(s0)
20403d7a:	feb42423          	sw	a1,-24(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:138
    if(pll_input_rate < config->min_input_rate || pll_input_rate > config->max_input_rate)
20403d7e:	fe842783          	lw	a5,-24(s0)
20403d82:	479c                	lw	a5,8(a5)
20403d84:	fec42703          	lw	a4,-20(s0)
20403d88:	00f76963          	bltu	a4,a5,20403d9a <get_pll_config_freq+0x2a>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:138 (discriminator 1)
20403d8c:	fe842783          	lw	a5,-24(s0)
20403d90:	47dc                	lw	a5,12(a5)
20403d92:	fec42703          	lw	a4,-20(s0)
20403d96:	00e7f463          	bgeu	a5,a4,20403d9e <get_pll_config_freq+0x2e>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:139
        return PLL_CONFIG_NOT_VALID;
20403d9a:	57fd                	li	a5,-1
20403d9c:	a829                	j	20403db6 <get_pll_config_freq+0x46>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:141

    return pll_input_rate * config->multiplier / config->divisor;
20403d9e:	fe842783          	lw	a5,-24(s0)
20403da2:	4398                	lw	a4,0(a5)
20403da4:	fec42783          	lw	a5,-20(s0)
20403da8:	02f70733          	mul	a4,a4,a5
20403dac:	fe842783          	lw	a5,-24(s0)
20403db0:	43dc                	lw	a5,4(a5)
20403db2:	02f757b3          	divu	a5,a4,a5
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:142
}
20403db6:	853e                	mv	a0,a5
20403db8:	4472                	lw	s0,28(sp)
20403dba:	6105                	addi	sp,sp,32
20403dbc:	8082                	ret

20403dbe <metal_sifive_fe310_g000_pll_init>:
metal_sifive_fe310_g000_pll_init():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:147

#ifdef __METAL_DT_SIFIVE_FE310_G000_PLL_HANDLE

static void metal_sifive_fe310_g000_pll_init(void) __attribute__((constructor));
static void metal_sifive_fe310_g000_pll_init(void) {
20403dbe:	1101                	addi	sp,sp,-32
20403dc0:	ce06                	sw	ra,28(sp)
20403dc2:	cc22                	sw	s0,24(sp)
20403dc4:	1000                	addi	s0,sp,32
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:148
    long init_rate = __metal_driver_sifive_fe310_g000_pll_init_rate();
20403dc6:	3f85                	jal	20403d36 <__metal_driver_sifive_fe310_g000_pll_init_rate>
20403dc8:	fea42623          	sw	a0,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:150
    /* If the PLL init_rate is zero, don't initialize the PLL */
    if(init_rate != 0)
20403dcc:	fec42783          	lw	a5,-20(s0)
20403dd0:	c791                	beqz	a5,20403ddc <metal_sifive_fe310_g000_pll_init+0x1e>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:151
        __metal_driver_sifive_fe310_g000_pll_init(__METAL_DT_SIFIVE_FE310_G000_PLL_HANDLE);
20403dd2:	800007b7          	lui	a5,0x80000
20403dd6:	78078513          	addi	a0,a5,1920 # 80000780 <metal_segment_heap_target_end+0xfffff2e8>
20403dda:	2031                	jal	20403de6 <__metal_driver_sifive_fe310_g000_pll_init>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:152
}
20403ddc:	0001                	nop
20403dde:	40f2                	lw	ra,28(sp)
20403de0:	4462                	lw	s0,24(sp)
20403de2:	6105                	addi	sp,sp,32
20403de4:	8082                	ret

20403de6 <__metal_driver_sifive_fe310_g000_pll_init>:
__metal_driver_sifive_fe310_g000_pll_init():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:156

#endif /* __METAL_DT_SIFIVE_FE310_G000__PLL_HANDLE */

void __metal_driver_sifive_fe310_g000_pll_init(struct __metal_driver_sifive_fe310_g000_pll *pll) {
20403de6:	7139                	addi	sp,sp,-64
20403de8:	de06                	sw	ra,60(sp)
20403dea:	dc22                	sw	s0,56(sp)
20403dec:	0080                	addi	s0,sp,64
20403dee:	fca42623          	sw	a0,-52(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:157
    struct metal_clock *pllref = __metal_driver_sifive_fe310_g000_pll_pllref(&(pll->clock));
20403df2:	fcc42783          	lw	a5,-52(s0)
20403df6:	853e                	mv	a0,a5
20403df8:	3de1                	jal	20403cd0 <__metal_driver_sifive_fe310_g000_pll_pllref>
20403dfa:	fea42623          	sw	a0,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:158
    long init_rate = __metal_driver_sifive_fe310_g000_pll_init_rate();
20403dfe:	3f25                	jal	20403d36 <__metal_driver_sifive_fe310_g000_pll_init_rate>
20403e00:	fea42423          	sw	a0,-24(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:159
    long config_offset = __metal_driver_sifive_fe310_g000_pll_config_offset();
20403e04:	370d                	jal	20403d26 <__metal_driver_sifive_fe310_g000_pll_config_offset>
20403e06:	fea42223          	sw	a0,-28(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:160
    long base = __metal_driver_sifive_fe310_g000_prci_base();
20403e0a:	3789                	jal	20403d4c <__metal_driver_sifive_fe310_g000_prci_base>
20403e0c:	fea42023          	sw	a0,-32(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:162

    __metal_io_u32 *pllcfg = (__metal_io_u32 *) (base + config_offset);
20403e10:	fe042703          	lw	a4,-32(s0)
20403e14:	fe442783          	lw	a5,-28(s0)
20403e18:	97ba                	add	a5,a5,a4
20403e1a:	fcf42e23          	sw	a5,-36(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:165

    /* If the PLL clock has had a _pre_rate_change_callback configured, call it */
    _metal_clock_call_all_callbacks(pll->clock._pre_rate_change_callback);
20403e1e:	fcc42783          	lw	a5,-52(s0)
20403e22:	43dc                	lw	a5,4(a5)
20403e24:	853e                	mv	a0,a5
20403e26:	5de010ef          	jal	ra,20405404 <_metal_clock_call_all_callbacks>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:168

    /* If we're running off of the PLL, switch off before we start configuring it*/
    if((__METAL_ACCESS_ONCE(pllcfg) & PLL_SEL) == 0)
20403e2a:	fdc42783          	lw	a5,-36(s0)
20403e2e:	4398                	lw	a4,0(a5)
20403e30:	67c1                	lui	a5,0x10
20403e32:	8ff9                	and	a5,a5,a4
20403e34:	eb91                	bnez	a5,20403e48 <__metal_driver_sifive_fe310_g000_pll_init+0x62>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:169
        __METAL_ACCESS_ONCE(pllcfg) &= ~(PLL_SEL);
20403e36:	fdc42783          	lw	a5,-36(s0)
20403e3a:	4398                	lw	a4,0(a5)
20403e3c:	77c1                	lui	a5,0xffff0
20403e3e:	17fd                	addi	a5,a5,-1
20403e40:	8f7d                	and	a4,a4,a5
20403e42:	fdc42783          	lw	a5,-36(s0)
20403e46:	c398                	sw	a4,0(a5)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:172

    /* Make sure we're running off of the external oscillator for stability */
    if(pllref != NULL)
20403e48:	fec42783          	lw	a5,-20(s0)
20403e4c:	cb91                	beqz	a5,20403e60 <__metal_driver_sifive_fe310_g000_pll_init+0x7a>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:173
        __METAL_ACCESS_ONCE(pllcfg) |= PLL_REFSEL;
20403e4e:	fdc42783          	lw	a5,-36(s0)
20403e52:	4398                	lw	a4,0(a5)
20403e54:	000207b7          	lui	a5,0x20
20403e58:	8f5d                	or	a4,a4,a5
20403e5a:	fdc42783          	lw	a5,-36(s0)
20403e5e:	c398                	sw	a4,0(a5)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:178

    /* Configure the PLL to run at the requested init frequency.
     * Using the vtable instead of the user API because we want to control
     * when the callbacks occur. */
    pll->clock.vtable->set_rate_hz(&(pll->clock), init_rate);
20403e60:	fcc42783          	lw	a5,-52(s0)
20403e64:	439c                	lw	a5,0(a5)
20403e66:	43d8                	lw	a4,4(a5)
20403e68:	fcc42783          	lw	a5,-52(s0)
20403e6c:	fe842583          	lw	a1,-24(s0)
20403e70:	853e                	mv	a0,a5
20403e72:	9702                	jalr	a4
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:181

    /* If the PLL clock has had a rate_change_callback configured, call it */
    _metal_clock_call_all_callbacks(pll->clock._post_rate_change_callback);
20403e74:	fcc42783          	lw	a5,-52(s0)
20403e78:	479c                	lw	a5,8(a5)
20403e7a:	853e                	mv	a0,a5
20403e7c:	588010ef          	jal	ra,20405404 <_metal_clock_call_all_callbacks>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:182
}
20403e80:	0001                	nop
20403e82:	50f2                	lw	ra,60(sp)
20403e84:	5462                	lw	s0,56(sp)
20403e86:	6121                	addi	sp,sp,64
20403e88:	8082                	ret

20403e8a <__metal_driver_sifive_fe310_g000_pll_get_rate_hz>:
__metal_driver_sifive_fe310_g000_pll_get_rate_hz():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:185

long __metal_driver_sifive_fe310_g000_pll_get_rate_hz(const struct metal_clock *clock)
{
20403e8a:	711d                	addi	sp,sp,-96
20403e8c:	ce86                	sw	ra,92(sp)
20403e8e:	cca2                	sw	s0,88(sp)
20403e90:	1080                	addi	s0,sp,96
20403e92:	faa42623          	sw	a0,-84(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:186
    struct metal_clock *pllref = __metal_driver_sifive_fe310_g000_pll_pllref(clock);
20403e96:	fac42503          	lw	a0,-84(s0)
20403e9a:	3d1d                	jal	20403cd0 <__metal_driver_sifive_fe310_g000_pll_pllref>
20403e9c:	fea42623          	sw	a0,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:187
    struct metal_clock *pllsel0 = __metal_driver_sifive_fe310_g000_pll_pllsel0(clock);
20403ea0:	fac42503          	lw	a0,-84(s0)
20403ea4:	3d09                	jal	20403cb6 <__metal_driver_sifive_fe310_g000_pll_pllsel0>
20403ea6:	fea42423          	sw	a0,-24(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:188
    long config_offset = __metal_driver_sifive_fe310_g000_pll_config_offset(clock);
20403eaa:	fac42503          	lw	a0,-84(s0)
20403eae:	3da5                	jal	20403d26 <__metal_driver_sifive_fe310_g000_pll_config_offset>
20403eb0:	fea42223          	sw	a0,-28(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:190
    struct __metal_driver_sifive_fe310_g000_prci *config_base =
      __metal_driver_sifive_fe310_g000_pll_config_base(clock);
20403eb4:	fac42503          	lw	a0,-84(s0)
20403eb8:	3db1                	jal	20403d14 <__metal_driver_sifive_fe310_g000_pll_config_base>
20403eba:	fea42023          	sw	a0,-32(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:191
    long divider_offset = __metal_driver_sifive_fe310_g000_pll_divider_offset(clock);
20403ebe:	fac42503          	lw	a0,-84(s0)
20403ec2:	3d3d                	jal	20403d00 <__metal_driver_sifive_fe310_g000_pll_divider_offset>
20403ec4:	fca42e23          	sw	a0,-36(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:193
    struct __metal_driver_sifive_fe310_g000_prci *divider_base =
      __metal_driver_sifive_fe310_g000_pll_divider_base(clock);
20403ec8:	fac42503          	lw	a0,-84(s0)
20403ecc:	3d39                	jal	20403cea <__metal_driver_sifive_fe310_g000_pll_divider_base>
20403ece:	fca42c23          	sw	a0,-40(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:195
    const struct __metal_driver_vtable_sifive_fe310_g000_prci *vtable =
      __metal_driver_sifive_fe310_g000_prci_vtable();
20403ed2:	3571                	jal	20403d5e <__metal_driver_sifive_fe310_g000_prci_vtable>
20403ed4:	fca42a23          	sw	a0,-44(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:197

    long cfg = vtable->get_reg(config_base, config_offset);
20403ed8:	fd442783          	lw	a5,-44(s0)
20403edc:	439c                	lw	a5,0(a5)
20403ede:	fe442583          	lw	a1,-28(s0)
20403ee2:	fe042503          	lw	a0,-32(s0)
20403ee6:	9782                	jalr	a5
20403ee8:	fca42823          	sw	a0,-48(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:198
    long div = vtable->get_reg(divider_base, divider_offset);
20403eec:	fd442783          	lw	a5,-44(s0)
20403ef0:	439c                	lw	a5,0(a5)
20403ef2:	fdc42583          	lw	a1,-36(s0)
20403ef6:	fd842503          	lw	a0,-40(s0)
20403efa:	9782                	jalr	a5
20403efc:	fca42623          	sw	a0,-52(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:202

    /* At the end of the PLL there's one big mux: it either selects the HFROSC
     * (bypassing the PLL entirely) or uses the PLL. */
    if (__METAL_GET_FIELD(cfg, PLL_SEL) == 0)
20403f00:	fd042703          	lw	a4,-48(s0)
20403f04:	67c1                	lui	a5,0x10
20403f06:	8f7d                	and	a4,a4,a5
20403f08:	67c1                	lui	a5,0x10
20403f0a:	00f77863          	bgeu	a4,a5,20403f1a <__metal_driver_sifive_fe310_g000_pll_get_rate_hz+0x90>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:203
        return metal_clock_get_rate_hz(pllsel0);
20403f0e:	fe842503          	lw	a0,-24(s0)
20403f12:	586010ef          	jal	ra,20405498 <metal_clock_get_rate_hz>
20403f16:	87aa                	mv	a5,a0
20403f18:	a8e1                	j	20403ff0 <__metal_driver_sifive_fe310_g000_pll_get_rate_hz+0x166>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:207

    /* There's a clock mux before the PLL that selects between the HFROSC adn
     * the HFXOSC as the PLL's input clock. */
    long ref_hz = metal_clock_get_rate_hz(__METAL_GET_FIELD(cfg, PLL_REFSEL) ? pllref : pllsel0);
20403f1a:	fd042703          	lw	a4,-48(s0)
20403f1e:	000207b7          	lui	a5,0x20
20403f22:	8f7d                	and	a4,a4,a5
20403f24:	000207b7          	lui	a5,0x20
20403f28:	00f76563          	bltu	a4,a5,20403f32 <__metal_driver_sifive_fe310_g000_pll_get_rate_hz+0xa8>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:207 (discriminator 1)
20403f2c:	fec42783          	lw	a5,-20(s0)
20403f30:	a019                	j	20403f36 <__metal_driver_sifive_fe310_g000_pll_get_rate_hz+0xac>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:207 (discriminator 2)
20403f32:	fe842783          	lw	a5,-24(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:207 (discriminator 4)
20403f36:	853e                	mv	a0,a5
20403f38:	560010ef          	jal	ra,20405498 <metal_clock_get_rate_hz>
20403f3c:	fca42423          	sw	a0,-56(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:211 (discriminator 4)

    /* It's possible to bypass the PLL, which is an internal bpyass.  This
     * still obays the PLL's input clock mu. */
    if (__METAL_GET_FIELD(cfg, PLL_BYPASS))
20403f40:	fd042703          	lw	a4,-48(s0)
20403f44:	000407b7          	lui	a5,0x40
20403f48:	8f7d                	and	a4,a4,a5
20403f4a:	000407b7          	lui	a5,0x40
20403f4e:	00f76563          	bltu	a4,a5,20403f58 <__metal_driver_sifive_fe310_g000_pll_get_rate_hz+0xce>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:212
        return ref_hz;
20403f52:	fc842783          	lw	a5,-56(s0)
20403f56:	a869                	j	20403ff0 <__metal_driver_sifive_fe310_g000_pll_get_rate_hz+0x166>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:215

    /* Logically the PLL is a three stage div-mul-div. */
    long div_r = __METAL_GET_FIELD(cfg, PLL_R) + 1;
20403f58:	fd042783          	lw	a5,-48(s0)
20403f5c:	8b9d                	andi	a5,a5,7
20403f5e:	0785                	addi	a5,a5,1
20403f60:	fcf42223          	sw	a5,-60(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:216
    long mul_f = 2 * (__METAL_GET_FIELD(cfg, PLL_F) + 1);
20403f64:	fd042783          	lw	a5,-48(s0)
20403f68:	3f07f793          	andi	a5,a5,1008
20403f6c:	8391                	srli	a5,a5,0x4
20403f6e:	0785                	addi	a5,a5,1
20403f70:	0786                	slli	a5,a5,0x1
20403f72:	fcf42023          	sw	a5,-64(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:217
    if (__METAL_GET_FIELD(cfg, PLL_Q) == 0)
20403f76:	fd042703          	lw	a4,-48(s0)
20403f7a:	6785                	lui	a5,0x1
20403f7c:	c0078793          	addi	a5,a5,-1024 # c00 <__heap_size+0x400>
20403f80:	8f7d                	and	a4,a4,a5
20403f82:	3ff00793          	li	a5,1023
20403f86:	00e7e463          	bltu	a5,a4,20403f8e <__metal_driver_sifive_fe310_g000_pll_get_rate_hz+0x104>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:218
        return -1;
20403f8a:	57fd                	li	a5,-1
20403f8c:	a095                	j	20403ff0 <__metal_driver_sifive_fe310_g000_pll_get_rate_hz+0x166>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:219
    long div_q = 1 << __METAL_GET_FIELD(cfg, PLL_Q);
20403f8e:	fd042703          	lw	a4,-48(s0)
20403f92:	6785                	lui	a5,0x1
20403f94:	c0078793          	addi	a5,a5,-1024 # c00 <__heap_size+0x400>
20403f98:	8ff9                	and	a5,a5,a4
20403f9a:	83a9                	srli	a5,a5,0xa
20403f9c:	4705                	li	a4,1
20403f9e:	00f717b3          	sll	a5,a4,a5
20403fa2:	faf42e23          	sw	a5,-68(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:224

    /* In addition to the dividers inherent in the PLL, there's an additional
     * clock divider that lives after the PLL and lets us pick a more
     * interesting range of frequencies. */
    long pllout = (((ref_hz / div_r) * mul_f) / div_q);
20403fa6:	fc842703          	lw	a4,-56(s0)
20403faa:	fc442783          	lw	a5,-60(s0)
20403fae:	02f74733          	div	a4,a4,a5
20403fb2:	fc042783          	lw	a5,-64(s0)
20403fb6:	02f70733          	mul	a4,a4,a5
20403fba:	fbc42783          	lw	a5,-68(s0)
20403fbe:	02f747b3          	div	a5,a4,a5
20403fc2:	faf42c23          	sw	a5,-72(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:225
    if (__METAL_GET_FIELD(div, DIV_1))
20403fc6:	fcc42783          	lw	a5,-52(s0)
20403fca:	1007f713          	andi	a4,a5,256
20403fce:	0ff00793          	li	a5,255
20403fd2:	00e7f563          	bgeu	a5,a4,20403fdc <__metal_driver_sifive_fe310_g000_pll_get_rate_hz+0x152>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:226
        return pllout;
20403fd6:	fb842783          	lw	a5,-72(s0)
20403fda:	a819                	j	20403ff0 <__metal_driver_sifive_fe310_g000_pll_get_rate_hz+0x166>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:228

    return pllout / (2 * (__METAL_GET_FIELD(div, DIV_DIV) + 1));
20403fdc:	fb842703          	lw	a4,-72(s0)
20403fe0:	fcc42783          	lw	a5,-52(s0)
20403fe4:	03f7f793          	andi	a5,a5,63
20403fe8:	0785                	addi	a5,a5,1
20403fea:	0786                	slli	a5,a5,0x1
20403fec:	02f757b3          	divu	a5,a4,a5
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:229
}
20403ff0:	853e                	mv	a0,a5
20403ff2:	40f6                	lw	ra,92(sp)
20403ff4:	4466                	lw	s0,88(sp)
20403ff6:	6125                	addi	sp,sp,96
20403ff8:	8082                	ret

20403ffa <find_closest_config>:
find_closest_config():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:240
 *  - rate desired PLL output frequency
 * Returns:
 *  -1 if no valid configuration is available
 *  the index into pll_configs of a valid configuration */
static int find_closest_config(long ref_hz, long rate)
{
20403ffa:	7139                	addi	sp,sp,-64
20403ffc:	de06                	sw	ra,60(sp)
20403ffe:	dc22                	sw	s0,56(sp)
20404000:	0080                	addi	s0,sp,64
20404002:	fca42623          	sw	a0,-52(s0)
20404006:	fcb42423          	sw	a1,-56(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:241
    int closest_index = -1;
2040400a:	57fd                	li	a5,-1
2040400c:	fef42623          	sw	a5,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:242
    long closest_diff = LONG_MAX;
20404010:	800007b7          	lui	a5,0x80000
20404014:	fff7c793          	not	a5,a5
20404018:	fef42423          	sw	a5,-24(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:246

    /* We're probably trying for a fast output frequency, so start from
     * the high end of the configs. */
    for(int i = (sizeof(pll_configs) / sizeof(pll_configs[0])) - 1; i >= 0; i--)
2040401c:	04300793          	li	a5,67
20404020:	fef42223          	sw	a5,-28(s0)
20404024:	a0b5                	j	20404090 <find_closest_config+0x96>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:248
    {
        long config_freq = get_pll_config_freq(ref_hz, &(pll_configs[i]));
20404026:	fcc42683          	lw	a3,-52(s0)
2040402a:	fe442783          	lw	a5,-28(s0)
2040402e:	00579713          	slli	a4,a5,0x5
20404032:	204067b7          	lui	a5,0x20406
20404036:	5c478793          	addi	a5,a5,1476 # 204065c4 <pll_configs>
2040403a:	97ba                	add	a5,a5,a4
2040403c:	85be                	mv	a1,a5
2040403e:	8536                	mv	a0,a3
20404040:	d31ff0ef          	jal	ra,20403d70 <get_pll_config_freq>
20404044:	fea42023          	sw	a0,-32(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:249
        if(config_freq != PLL_CONFIG_NOT_VALID)
20404048:	fe042703          	lw	a4,-32(s0)
2040404c:	57fd                	li	a5,-1
2040404e:	02f70c63          	beq	a4,a5,20404086 <find_closest_config+0x8c>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:251
        {
            long freq_diff = abs(config_freq - rate);
20404052:	fe042703          	lw	a4,-32(s0)
20404056:	fc842783          	lw	a5,-56(s0)
2040405a:	8f1d                	sub	a4,a4,a5
2040405c:	41f75793          	srai	a5,a4,0x1f
20404060:	8f3d                	xor	a4,a4,a5
20404062:	40f707b3          	sub	a5,a4,a5
20404066:	fcf42e23          	sw	a5,-36(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:252
            if(freq_diff < closest_diff)
2040406a:	fdc42703          	lw	a4,-36(s0)
2040406e:	fe842783          	lw	a5,-24(s0)
20404072:	00f75a63          	bge	a4,a5,20404086 <find_closest_config+0x8c>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:254
            {
                closest_index = i;
20404076:	fe442783          	lw	a5,-28(s0)
2040407a:	fef42623          	sw	a5,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:255
                closest_diff = freq_diff;
2040407e:	fdc42783          	lw	a5,-36(s0)
20404082:	fef42423          	sw	a5,-24(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:246 (discriminator 2)
    for(int i = (sizeof(pll_configs) / sizeof(pll_configs[0])) - 1; i >= 0; i--)
20404086:	fe442783          	lw	a5,-28(s0)
2040408a:	17fd                	addi	a5,a5,-1
2040408c:	fef42223          	sw	a5,-28(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:246 (discriminator 1)
20404090:	fe442783          	lw	a5,-28(s0)
20404094:	f807d9e3          	bgez	a5,20404026 <find_closest_config+0x2c>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:260
            }
        }
    }

    return closest_index;
20404098:	fec42783          	lw	a5,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:261
}
2040409c:	853e                	mv	a0,a5
2040409e:	50f2                	lw	ra,60(sp)
204040a0:	5462                	lw	s0,56(sp)
204040a2:	6121                	addi	sp,sp,64
204040a4:	8082                	ret

204040a6 <configure_pll>:
configure_pll():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:265

/* Configure the PLL and wait for it to lock */
static void configure_pll(__metal_io_u32 *pllcfg, __metal_io_u32 *plloutdiv, const struct pll_config_t *config)
{
204040a6:	1101                	addi	sp,sp,-32
204040a8:	ce22                	sw	s0,28(sp)
204040aa:	1000                	addi	s0,sp,32
204040ac:	fea42623          	sw	a0,-20(s0)
204040b0:	feb42423          	sw	a1,-24(s0)
204040b4:	fec42223          	sw	a2,-28(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:266
    __METAL_ACCESS_ONCE(pllcfg) &= ~(PLL_R);
204040b8:	fec42783          	lw	a5,-20(s0)
204040bc:	439c                	lw	a5,0(a5)
204040be:	ff87f713          	andi	a4,a5,-8
204040c2:	fec42783          	lw	a5,-20(s0)
204040c6:	c398                	sw	a4,0(a5)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:267
    __METAL_ACCESS_ONCE(pllcfg) |= PLL_R_SHIFT(config->r);
204040c8:	fec42783          	lw	a5,-20(s0)
204040cc:	4398                	lw	a4,0(a5)
204040ce:	fe442783          	lw	a5,-28(s0)
204040d2:	4b9c                	lw	a5,16(a5)
204040d4:	8b9d                	andi	a5,a5,7
204040d6:	8f5d                	or	a4,a4,a5
204040d8:	fec42783          	lw	a5,-20(s0)
204040dc:	c398                	sw	a4,0(a5)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:269

    __METAL_ACCESS_ONCE(pllcfg) &= ~(PLL_F);
204040de:	fec42783          	lw	a5,-20(s0)
204040e2:	439c                	lw	a5,0(a5)
204040e4:	c0f7f713          	andi	a4,a5,-1009
204040e8:	fec42783          	lw	a5,-20(s0)
204040ec:	c398                	sw	a4,0(a5)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:270
    __METAL_ACCESS_ONCE(pllcfg) |= PLL_F_SHIFT(config->f);
204040ee:	fec42783          	lw	a5,-20(s0)
204040f2:	4398                	lw	a4,0(a5)
204040f4:	fe442783          	lw	a5,-28(s0)
204040f8:	4bdc                	lw	a5,20(a5)
204040fa:	0792                	slli	a5,a5,0x4
204040fc:	3f07f793          	andi	a5,a5,1008
20404100:	8f5d                	or	a4,a4,a5
20404102:	fec42783          	lw	a5,-20(s0)
20404106:	c398                	sw	a4,0(a5)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:272

    __METAL_ACCESS_ONCE(pllcfg) &= ~(PLL_Q);
20404108:	fec42783          	lw	a5,-20(s0)
2040410c:	4398                	lw	a4,0(a5)
2040410e:	77fd                	lui	a5,0xfffff
20404110:	3ff78793          	addi	a5,a5,1023 # fffff3ff <metal_segment_heap_target_end+0x7fffdf67>
20404114:	8f7d                	and	a4,a4,a5
20404116:	fec42783          	lw	a5,-20(s0)
2040411a:	c398                	sw	a4,0(a5)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:273
    __METAL_ACCESS_ONCE(pllcfg) |= PLL_Q_SHIFT(config->q);
2040411c:	fec42783          	lw	a5,-20(s0)
20404120:	4398                	lw	a4,0(a5)
20404122:	fe442783          	lw	a5,-28(s0)
20404126:	4f9c                	lw	a5,24(a5)
20404128:	00a79693          	slli	a3,a5,0xa
2040412c:	6785                	lui	a5,0x1
2040412e:	c0078793          	addi	a5,a5,-1024 # c00 <__heap_size+0x400>
20404132:	8ff5                	and	a5,a5,a3
20404134:	8f5d                	or	a4,a4,a5
20404136:	fec42783          	lw	a5,-20(s0)
2040413a:	c398                	sw	a4,0(a5)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:275

    if(config->d < 0)
2040413c:	fe442783          	lw	a5,-28(s0)
20404140:	4fdc                	lw	a5,28(a5)
20404142:	0207db63          	bgez	a5,20404178 <configure_pll+0xd2>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:278
    {
        /* disable final divider */
        __METAL_ACCESS_ONCE(plloutdiv) |= DIV_1;
20404146:	fe842783          	lw	a5,-24(s0)
2040414a:	439c                	lw	a5,0(a5)
2040414c:	1007e713          	ori	a4,a5,256
20404150:	fe842783          	lw	a5,-24(s0)
20404154:	c398                	sw	a4,0(a5)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:280

        __METAL_ACCESS_ONCE(plloutdiv) &= ~(DIV_DIV);
20404156:	fe842783          	lw	a5,-24(s0)
2040415a:	439c                	lw	a5,0(a5)
2040415c:	fc07f713          	andi	a4,a5,-64
20404160:	fe842783          	lw	a5,-24(s0)
20404164:	c398                	sw	a4,0(a5)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:281
        __METAL_ACCESS_ONCE(plloutdiv) |= PLL_DIV_SHIFT(1);
20404166:	fe842783          	lw	a5,-24(s0)
2040416a:	439c                	lw	a5,0(a5)
2040416c:	0017e713          	ori	a4,a5,1
20404170:	fe842783          	lw	a5,-24(s0)
20404174:	c398                	sw	a4,0(a5)
20404176:	a82d                	j	204041b0 <configure_pll+0x10a>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:285
    }
    else
    {
        __METAL_ACCESS_ONCE(plloutdiv) &= ~(DIV_1);
20404178:	fe842783          	lw	a5,-24(s0)
2040417c:	439c                	lw	a5,0(a5)
2040417e:	eff7f713          	andi	a4,a5,-257
20404182:	fe842783          	lw	a5,-24(s0)
20404186:	c398                	sw	a4,0(a5)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:287

        __METAL_ACCESS_ONCE(plloutdiv) &= ~(DIV_DIV);
20404188:	fe842783          	lw	a5,-24(s0)
2040418c:	439c                	lw	a5,0(a5)
2040418e:	fc07f713          	andi	a4,a5,-64
20404192:	fe842783          	lw	a5,-24(s0)
20404196:	c398                	sw	a4,0(a5)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:288
        __METAL_ACCESS_ONCE(plloutdiv) |= PLL_DIV_SHIFT(config->d);
20404198:	fe842783          	lw	a5,-24(s0)
2040419c:	4398                	lw	a4,0(a5)
2040419e:	fe442783          	lw	a5,-28(s0)
204041a2:	4fdc                	lw	a5,28(a5)
204041a4:	03f7f793          	andi	a5,a5,63
204041a8:	8f5d                	or	a4,a4,a5
204041aa:	fe842783          	lw	a5,-24(s0)
204041ae:	c398                	sw	a4,0(a5)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:291
    }

    __METAL_ACCESS_ONCE(pllcfg) &= ~(PLL_BYPASS);
204041b0:	fec42783          	lw	a5,-20(s0)
204041b4:	4398                	lw	a4,0(a5)
204041b6:	fffc07b7          	lui	a5,0xfffc0
204041ba:	17fd                	addi	a5,a5,-1
204041bc:	8f7d                	and	a4,a4,a5
204041be:	fec42783          	lw	a5,-20(s0)
204041c2:	c398                	sw	a4,0(a5)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:294

    /* Wait for PLL to lock */
    while((__METAL_ACCESS_ONCE(pllcfg) & PLL_LOCK) == 0) ;
204041c4:	0001                	nop
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:294 (discriminator 1)
204041c6:	fec42783          	lw	a5,-20(s0)
204041ca:	439c                	lw	a5,0(a5)
204041cc:	fe07dde3          	bgez	a5,204041c6 <configure_pll+0x120>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:295
}
204041d0:	0001                	nop
204041d2:	4472                	lw	s0,28(sp)
204041d4:	6105                	addi	sp,sp,32
204041d6:	8082                	ret

204041d8 <__metal_driver_sifive_fe310_g000_pll_set_rate_hz>:
__metal_driver_sifive_fe310_g000_pll_set_rate_hz():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:298

long __metal_driver_sifive_fe310_g000_pll_set_rate_hz(struct metal_clock *clock, long rate)
{
204041d8:	715d                	addi	sp,sp,-80
204041da:	c686                	sw	ra,76(sp)
204041dc:	c4a2                	sw	s0,72(sp)
204041de:	0880                	addi	s0,sp,80
204041e0:	faa42e23          	sw	a0,-68(s0)
204041e4:	fab42c23          	sw	a1,-72(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:299
    struct metal_clock *pllref = __metal_driver_sifive_fe310_g000_pll_pllref(clock);
204041e8:	fbc42503          	lw	a0,-68(s0)
204041ec:	ae5ff0ef          	jal	ra,20403cd0 <__metal_driver_sifive_fe310_g000_pll_pllref>
204041f0:	fea42623          	sw	a0,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:300
    struct metal_clock *pllsel0 = __metal_driver_sifive_fe310_g000_pll_pllsel0(clock);
204041f4:	fbc42503          	lw	a0,-68(s0)
204041f8:	abfff0ef          	jal	ra,20403cb6 <__metal_driver_sifive_fe310_g000_pll_pllsel0>
204041fc:	fea42423          	sw	a0,-24(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:301
    long config_offset = __metal_driver_sifive_fe310_g000_pll_config_offset(clock);
20404200:	fbc42503          	lw	a0,-68(s0)
20404204:	b23ff0ef          	jal	ra,20403d26 <__metal_driver_sifive_fe310_g000_pll_config_offset>
20404208:	fea42223          	sw	a0,-28(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:302
    long divider_offset = __metal_driver_sifive_fe310_g000_pll_divider_offset(clock);
2040420c:	fbc42503          	lw	a0,-68(s0)
20404210:	af1ff0ef          	jal	ra,20403d00 <__metal_driver_sifive_fe310_g000_pll_divider_offset>
20404214:	fea42023          	sw	a0,-32(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:303
    long base = __metal_driver_sifive_fe310_g000_prci_base();
20404218:	b35ff0ef          	jal	ra,20403d4c <__metal_driver_sifive_fe310_g000_prci_base>
2040421c:	fca42e23          	sw	a0,-36(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:305

    __metal_io_u32 *pllcfg = (__metal_io_u32 *) (base + config_offset);
20404220:	fdc42703          	lw	a4,-36(s0)
20404224:	fe442783          	lw	a5,-28(s0)
20404228:	97ba                	add	a5,a5,a4
2040422a:	fcf42c23          	sw	a5,-40(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:306
    __metal_io_u32 *plloutdiv = (__metal_io_u32 *) (base + divider_offset);
2040422e:	fdc42703          	lw	a4,-36(s0)
20404232:	fe042783          	lw	a5,-32(s0)
20404236:	97ba                	add	a5,a5,a4
20404238:	fcf42a23          	sw	a5,-44(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:309

    /* We can't modify the PLL if coreclk is driven by it, so switch it off */
    if (__METAL_ACCESS_ONCE(pllcfg) & PLL_SEL)
2040423c:	fd842783          	lw	a5,-40(s0)
20404240:	4398                	lw	a4,0(a5)
20404242:	67c1                	lui	a5,0x10
20404244:	8ff9                	and	a5,a5,a4
20404246:	cb91                	beqz	a5,2040425a <__metal_driver_sifive_fe310_g000_pll_set_rate_hz+0x82>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:310
        __METAL_ACCESS_ONCE(pllcfg) &= ~(PLL_SEL);
20404248:	fd842783          	lw	a5,-40(s0)
2040424c:	4398                	lw	a4,0(a5)
2040424e:	77c1                	lui	a5,0xffff0
20404250:	17fd                	addi	a5,a5,-1
20404252:	8f7d                	and	a4,a4,a5
20404254:	fd842783          	lw	a5,-40(s0)
20404258:	c398                	sw	a4,0(a5)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:314

    /* There's a clock mux before the PLL that selects between the HFROSC and
     * the HFXOSC as the PLL's input clock. */
    long ref_hz = metal_clock_get_rate_hz(__METAL_ACCESS_ONCE(pllcfg) & PLL_REFSEL ? pllref : pllsel0);
2040425a:	fd842783          	lw	a5,-40(s0)
2040425e:	4398                	lw	a4,0(a5)
20404260:	000207b7          	lui	a5,0x20
20404264:	8ff9                	and	a5,a5,a4
20404266:	c781                	beqz	a5,2040426e <__metal_driver_sifive_fe310_g000_pll_set_rate_hz+0x96>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:314 (discriminator 1)
20404268:	fec42783          	lw	a5,-20(s0)
2040426c:	a019                	j	20404272 <__metal_driver_sifive_fe310_g000_pll_set_rate_hz+0x9a>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:314 (discriminator 2)
2040426e:	fe842783          	lw	a5,-24(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:314 (discriminator 4)
20404272:	853e                	mv	a0,a5
20404274:	224010ef          	jal	ra,20405498 <metal_clock_get_rate_hz>
20404278:	fca42823          	sw	a0,-48(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:317 (discriminator 4)

    /* if the desired rate is within 75%-125% of the input clock, bypass the PLL */
    if((ref_hz * 3 / 4) <= rate && (ref_hz * 5 / 4) >= rate)
2040427c:	fd042703          	lw	a4,-48(s0)
20404280:	87ba                	mv	a5,a4
20404282:	0786                	slli	a5,a5,0x1
20404284:	97ba                	add	a5,a5,a4
20404286:	41f7d713          	srai	a4,a5,0x1f
2040428a:	8b0d                	andi	a4,a4,3
2040428c:	97ba                	add	a5,a5,a4
2040428e:	8789                	srai	a5,a5,0x2
20404290:	873e                	mv	a4,a5
20404292:	fb842783          	lw	a5,-72(s0)
20404296:	02e7cb63          	blt	a5,a4,204042cc <__metal_driver_sifive_fe310_g000_pll_set_rate_hz+0xf4>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:317 (discriminator 1)
2040429a:	fd042703          	lw	a4,-48(s0)
2040429e:	87ba                	mv	a5,a4
204042a0:	078a                	slli	a5,a5,0x2
204042a2:	97ba                	add	a5,a5,a4
204042a4:	41f7d713          	srai	a4,a5,0x1f
204042a8:	8b0d                	andi	a4,a4,3
204042aa:	97ba                	add	a5,a5,a4
204042ac:	8789                	srai	a5,a5,0x2
204042ae:	873e                	mv	a4,a5
204042b0:	fb842783          	lw	a5,-72(s0)
204042b4:	00f74c63          	blt	a4,a5,204042cc <__metal_driver_sifive_fe310_g000_pll_set_rate_hz+0xf4>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:319
    {
        __METAL_ACCESS_ONCE(pllcfg) |= PLL_BYPASS;
204042b8:	fd842783          	lw	a5,-40(s0)
204042bc:	4398                	lw	a4,0(a5)
204042be:	000407b7          	lui	a5,0x40
204042c2:	8f5d                	or	a4,a4,a5
204042c4:	fd842783          	lw	a5,-40(s0)
204042c8:	c398                	sw	a4,0(a5)
204042ca:	a881                	j	2040431a <__metal_driver_sifive_fe310_g000_pll_set_rate_hz+0x142>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:323
    }
    else
    {
        int config_index = find_closest_config(ref_hz, rate);
204042cc:	fb842583          	lw	a1,-72(s0)
204042d0:	fd042503          	lw	a0,-48(s0)
204042d4:	d27ff0ef          	jal	ra,20403ffa <find_closest_config>
204042d8:	fca42623          	sw	a0,-52(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:324
        if(config_index != -1)
204042dc:	fcc42703          	lw	a4,-52(s0)
204042e0:	57fd                	li	a5,-1
204042e2:	02f70363          	beq	a4,a5,20404308 <__metal_driver_sifive_fe310_g000_pll_set_rate_hz+0x130>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:326
        {
            configure_pll(pllcfg, plloutdiv, &(pll_configs[config_index]));
204042e6:	fcc42783          	lw	a5,-52(s0)
204042ea:	00579713          	slli	a4,a5,0x5
204042ee:	204067b7          	lui	a5,0x20406
204042f2:	5c478793          	addi	a5,a5,1476 # 204065c4 <pll_configs>
204042f6:	97ba                	add	a5,a5,a4
204042f8:	863e                	mv	a2,a5
204042fa:	fd442583          	lw	a1,-44(s0)
204042fe:	fd842503          	lw	a0,-40(s0)
20404302:	da5ff0ef          	jal	ra,204040a6 <configure_pll>
20404306:	a811                	j	2040431a <__metal_driver_sifive_fe310_g000_pll_set_rate_hz+0x142>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:331
        }
        else
        {
            /* unable to find a valid configuration */
            __METAL_ACCESS_ONCE(pllcfg) |= PLL_BYPASS;
20404308:	fd842783          	lw	a5,-40(s0)
2040430c:	4398                	lw	a4,0(a5)
2040430e:	000407b7          	lui	a5,0x40
20404312:	8f5d                	or	a4,a4,a5
20404314:	fd842783          	lw	a5,-40(s0)
20404318:	c398                	sw	a4,0(a5)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:336
        }
    }

    /* Enable the PLL */
    __METAL_ACCESS_ONCE(pllcfg) |= PLL_SEL;
2040431a:	fd842783          	lw	a5,-40(s0)
2040431e:	4398                	lw	a4,0(a5)
20404320:	67c1                	lui	a5,0x10
20404322:	8f5d                	or	a4,a4,a5
20404324:	fd842783          	lw	a5,-40(s0)
20404328:	c398                	sw	a4,0(a5)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:338

    return __metal_driver_sifive_fe310_g000_pll_get_rate_hz(clock);
2040432a:	fbc42503          	lw	a0,-68(s0)
2040432e:	b5dff0ef          	jal	ra,20403e8a <__metal_driver_sifive_fe310_g000_pll_get_rate_hz>
20404332:	87aa                	mv	a5,a0
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:339
}
20404334:	853e                	mv	a0,a5
20404336:	40b6                	lw	ra,76(sp)
20404338:	4426                	lw	s0,72(sp)
2040433a:	6161                	addi	sp,sp,80
2040433c:	8082                	ret

2040433e <use_hfxosc>:
use_hfxosc():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:344

#ifdef __METAL_DT_SIFIVE_FE310_G000_PLL_HANDLE
static void use_hfxosc(void) __attribute__((constructor));
static void use_hfxosc(void)
{
2040433e:	1101                	addi	sp,sp,-32
20404340:	ce06                	sw	ra,28(sp)
20404342:	cc22                	sw	s0,24(sp)
20404344:	1000                	addi	s0,sp,32
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:345
    long init_rate = __metal_driver_sifive_fe310_g000_pll_init_rate();
20404346:	9f1ff0ef          	jal	ra,20403d36 <__metal_driver_sifive_fe310_g000_pll_init_rate>
2040434a:	fea42623          	sw	a0,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:346
    metal_clock_set_rate_hz(
2040434e:	fec42583          	lw	a1,-20(s0)
20404352:	800007b7          	lui	a5,0x80000
20404356:	78078513          	addi	a0,a5,1920 # 80000780 <metal_segment_heap_target_end+0xfffff2e8>
2040435a:	164010ef          	jal	ra,204054be <metal_clock_set_rate_hz>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:349
        &__METAL_DT_SIFIVE_FE310_G000_PLL_HANDLE->clock, init_rate
    );
}
2040435e:	0001                	nop
20404360:	40f2                	lw	ra,28(sp)
20404362:	4462                	lw	s0,24(sp)
20404364:	6105                	addi	sp,sp,32
20404366:	8082                	ret

20404368 <__metal_driver_sifive_fe310_g000_prci_base>:
__metal_driver_sifive_fe310_g000_prci_base():
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:1002
{
20404368:	1141                	addi	sp,sp,-16
2040436a:	c622                	sw	s0,12(sp)
2040436c:	0800                	addi	s0,sp,16
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:1003
		return METAL_SIFIVE_FE310_G000_PRCI_10008000_BASE_ADDRESS;
2040436e:	100087b7          	lui	a5,0x10008
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:1004
}
20404372:	853e                	mv	a0,a5
20404374:	4432                	lw	s0,12(sp)
20404376:	0141                	addi	sp,sp,16
20404378:	8082                	ret

2040437a <__metal_driver_sifive_fe310_g000_prci_get_reg>:
__metal_driver_sifive_fe310_g000_prci_get_reg():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_prci.c:11
#ifdef METAL_SIFIVE_FE310_G000_PRCI

#include <metal/drivers/sifive_fe310-g000_prci.h>
#include <metal/machine.h>

long __metal_driver_sifive_fe310_g000_prci_get_reg(const struct __metal_driver_sifive_fe310_g000_prci *prci, long offset) {
2040437a:	7179                	addi	sp,sp,-48
2040437c:	d606                	sw	ra,44(sp)
2040437e:	d422                	sw	s0,40(sp)
20404380:	1800                	addi	s0,sp,48
20404382:	fca42e23          	sw	a0,-36(s0)
20404386:	fcb42c23          	sw	a1,-40(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_prci.c:12
    unsigned long base = __metal_driver_sifive_fe310_g000_prci_base();
2040438a:	3ff9                	jal	20404368 <__metal_driver_sifive_fe310_g000_prci_base>
2040438c:	87aa                	mv	a5,a0
2040438e:	fef42623          	sw	a5,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_prci.c:13
    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + offset));
20404392:	fd842703          	lw	a4,-40(s0)
20404396:	fec42783          	lw	a5,-20(s0)
2040439a:	97ba                	add	a5,a5,a4
2040439c:	439c                	lw	a5,0(a5)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_prci.c:14
}
2040439e:	853e                	mv	a0,a5
204043a0:	50b2                	lw	ra,44(sp)
204043a2:	5422                	lw	s0,40(sp)
204043a4:	6145                	addi	sp,sp,48
204043a6:	8082                	ret

204043a8 <__metal_driver_sifive_fe310_g000_prci_set_reg>:
__metal_driver_sifive_fe310_g000_prci_set_reg():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_prci.c:16

long __metal_driver_sifive_fe310_g000_prci_set_reg(const struct __metal_driver_sifive_fe310_g000_prci *prci, long offset, long value) {
204043a8:	7179                	addi	sp,sp,-48
204043aa:	d606                	sw	ra,44(sp)
204043ac:	d422                	sw	s0,40(sp)
204043ae:	1800                	addi	s0,sp,48
204043b0:	fca42e23          	sw	a0,-36(s0)
204043b4:	fcb42c23          	sw	a1,-40(s0)
204043b8:	fcc42a23          	sw	a2,-44(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_prci.c:17
    unsigned long base = __metal_driver_sifive_fe310_g000_prci_base();
204043bc:	3775                	jal	20404368 <__metal_driver_sifive_fe310_g000_prci_base>
204043be:	87aa                	mv	a5,a0
204043c0:	fef42623          	sw	a5,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_prci.c:18
    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + offset)) = value;
204043c4:	fd842703          	lw	a4,-40(s0)
204043c8:	fec42783          	lw	a5,-20(s0)
204043cc:	97ba                	add	a5,a5,a4
204043ce:	873e                	mv	a4,a5
204043d0:	fd442783          	lw	a5,-44(s0)
204043d4:	c31c                	sw	a5,0(a4)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_prci.c:19
}
204043d6:	853e                	mv	a0,a5
204043d8:	50b2                	lw	ra,44(sp)
204043da:	5422                	lw	s0,40(sp)
204043dc:	6145                	addi	sp,sp,48
204043de:	8082                	ret

204043e0 <__metal_driver_sifive_gpio_led_gpio>:
__metal_driver_sifive_gpio_led_gpio():
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:541
{
204043e0:	1101                	addi	sp,sp,-32
204043e2:	ce22                	sw	s0,28(sp)
204043e4:	1000                	addi	s0,sp,32
204043e6:	fea42623          	sw	a0,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:542
	if ((uintptr_t)led == (uintptr_t)&__metal_dt_led_0red) {
204043ea:	fec42703          	lw	a4,-20(s0)
204043ee:	81c18793          	addi	a5,gp,-2020 # 800007ac <__metal_dt_led_0red>
204043f2:	00f71563          	bne	a4,a5,204043fc <__metal_driver_sifive_gpio_led_gpio+0x1c>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:543
		return (struct metal_gpio *)&__metal_dt_gpio_10012000;
204043f6:	81818793          	addi	a5,gp,-2024 # 800007a8 <__metal_dt_gpio_10012000>
204043fa:	a025                	j	20404422 <__metal_driver_sifive_gpio_led_gpio+0x42>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:545
	else if ((uintptr_t)led == (uintptr_t)&__metal_dt_led_0green) {
204043fc:	fec42703          	lw	a4,-20(s0)
20404400:	82018793          	addi	a5,gp,-2016 # 800007b0 <__metal_dt_led_0green>
20404404:	00f71563          	bne	a4,a5,2040440e <__metal_driver_sifive_gpio_led_gpio+0x2e>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:546
		return (struct metal_gpio *)&__metal_dt_gpio_10012000;
20404408:	81818793          	addi	a5,gp,-2024 # 800007a8 <__metal_dt_gpio_10012000>
2040440c:	a819                	j	20404422 <__metal_driver_sifive_gpio_led_gpio+0x42>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:548
	else if ((uintptr_t)led == (uintptr_t)&__metal_dt_led_0blue) {
2040440e:	fec42703          	lw	a4,-20(s0)
20404412:	82418793          	addi	a5,gp,-2012 # 800007b4 <__metal_dt_led_0blue>
20404416:	00f71563          	bne	a4,a5,20404420 <__metal_driver_sifive_gpio_led_gpio+0x40>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:549
		return (struct metal_gpio *)&__metal_dt_gpio_10012000;
2040441a:	81818793          	addi	a5,gp,-2024 # 800007a8 <__metal_dt_gpio_10012000>
2040441e:	a011                	j	20404422 <__metal_driver_sifive_gpio_led_gpio+0x42>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:552
		return NULL;
20404420:	4781                	li	a5,0
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:554
}
20404422:	853e                	mv	a0,a5
20404424:	4472                	lw	s0,28(sp)
20404426:	6105                	addi	sp,sp,32
20404428:	8082                	ret

2040442a <__metal_driver_sifive_gpio_led_pin>:
__metal_driver_sifive_gpio_led_pin():
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:557
{
2040442a:	1101                	addi	sp,sp,-32
2040442c:	ce22                	sw	s0,28(sp)
2040442e:	1000                	addi	s0,sp,32
20404430:	fea42623          	sw	a0,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:558
	if ((uintptr_t)led == (uintptr_t)&__metal_dt_led_0red) {
20404434:	fec42703          	lw	a4,-20(s0)
20404438:	81c18793          	addi	a5,gp,-2020 # 800007ac <__metal_dt_led_0red>
2040443c:	00f71463          	bne	a4,a5,20404444 <__metal_driver_sifive_gpio_led_pin+0x1a>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:559
		return 22;
20404440:	47d9                	li	a5,22
20404442:	a015                	j	20404466 <__metal_driver_sifive_gpio_led_pin+0x3c>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:561
	else if ((uintptr_t)led == (uintptr_t)&__metal_dt_led_0green) {
20404444:	fec42703          	lw	a4,-20(s0)
20404448:	82018793          	addi	a5,gp,-2016 # 800007b0 <__metal_dt_led_0green>
2040444c:	00f71463          	bne	a4,a5,20404454 <__metal_driver_sifive_gpio_led_pin+0x2a>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:562
		return 19;
20404450:	47cd                	li	a5,19
20404452:	a811                	j	20404466 <__metal_driver_sifive_gpio_led_pin+0x3c>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:564
	else if ((uintptr_t)led == (uintptr_t)&__metal_dt_led_0blue) {
20404454:	fec42703          	lw	a4,-20(s0)
20404458:	82418793          	addi	a5,gp,-2012 # 800007b4 <__metal_dt_led_0blue>
2040445c:	00f71463          	bne	a4,a5,20404464 <__metal_driver_sifive_gpio_led_pin+0x3a>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:565
		return 21;
20404460:	47d5                	li	a5,21
20404462:	a011                	j	20404466 <__metal_driver_sifive_gpio_led_pin+0x3c>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:568
		return 0;
20404464:	4781                	li	a5,0
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:570
}
20404466:	853e                	mv	a0,a5
20404468:	4472                	lw	s0,28(sp)
2040446a:	6105                	addi	sp,sp,32
2040446c:	8082                	ret

2040446e <__metal_driver_sifive_gpio_led_label>:
__metal_driver_sifive_gpio_led_label():
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:573
{
2040446e:	1101                	addi	sp,sp,-32
20404470:	ce22                	sw	s0,28(sp)
20404472:	1000                	addi	s0,sp,32
20404474:	fea42623          	sw	a0,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:574
	if ((uintptr_t)led == (uintptr_t)&__metal_dt_led_0red) {
20404478:	fec42703          	lw	a4,-20(s0)
2040447c:	81c18793          	addi	a5,gp,-2020 # 800007ac <__metal_dt_led_0red>
20404480:	00f71763          	bne	a4,a5,2040448e <__metal_driver_sifive_gpio_led_label+0x20>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:575
		return "LD0red";
20404484:	204077b7          	lui	a5,0x20407
20404488:	e5078793          	addi	a5,a5,-432 # 20406e50 <__metal_driver_vtable_sifive_fe310_g000_pll+0xc>
2040448c:	a81d                	j	204044c2 <__metal_driver_sifive_gpio_led_label+0x54>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:577
	else if ((uintptr_t)led == (uintptr_t)&__metal_dt_led_0green) {
2040448e:	fec42703          	lw	a4,-20(s0)
20404492:	82018793          	addi	a5,gp,-2016 # 800007b0 <__metal_dt_led_0green>
20404496:	00f71763          	bne	a4,a5,204044a4 <__metal_driver_sifive_gpio_led_label+0x36>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:578
		return "LD0green";
2040449a:	204077b7          	lui	a5,0x20407
2040449e:	e5878793          	addi	a5,a5,-424 # 20406e58 <__metal_driver_vtable_sifive_fe310_g000_pll+0x14>
204044a2:	a005                	j	204044c2 <__metal_driver_sifive_gpio_led_label+0x54>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:580
	else if ((uintptr_t)led == (uintptr_t)&__metal_dt_led_0blue) {
204044a4:	fec42703          	lw	a4,-20(s0)
204044a8:	82418793          	addi	a5,gp,-2012 # 800007b4 <__metal_dt_led_0blue>
204044ac:	00f71763          	bne	a4,a5,204044ba <__metal_driver_sifive_gpio_led_label+0x4c>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:581
		return "LD0blue";
204044b0:	204077b7          	lui	a5,0x20407
204044b4:	e6478793          	addi	a5,a5,-412 # 20406e64 <__metal_driver_vtable_sifive_fe310_g000_pll+0x20>
204044b8:	a029                	j	204044c2 <__metal_driver_sifive_gpio_led_label+0x54>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:584
		return "";
204044ba:	204077b7          	lui	a5,0x20407
204044be:	e6c78793          	addi	a5,a5,-404 # 20406e6c <__metal_driver_vtable_sifive_fe310_g000_pll+0x28>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:586
}
204044c2:	853e                	mv	a0,a5
204044c4:	4472                	lw	s0,28(sp)
204044c6:	6105                	addi	sp,sp,32
204044c8:	8082                	ret

204044ca <__metal_driver_led_exist>:
__metal_driver_led_exist():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio-leds.c:14
#include <metal/gpio.h>
#include <metal/drivers/sifive_gpio-leds.h>
#include <metal/machine.h>

int  __metal_driver_led_exist (struct metal_led *led, char *label)
{
204044ca:	1101                	addi	sp,sp,-32
204044cc:	ce06                	sw	ra,28(sp)
204044ce:	cc22                	sw	s0,24(sp)
204044d0:	1000                	addi	s0,sp,32
204044d2:	fea42623          	sw	a0,-20(s0)
204044d6:	feb42423          	sw	a1,-24(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio-leds.c:15
    if (strcmp(__metal_driver_sifive_gpio_led_label(led), label) == 0) {
204044da:	fec42503          	lw	a0,-20(s0)
204044de:	3f41                	jal	2040446e <__metal_driver_sifive_gpio_led_label>
204044e0:	87aa                	mv	a5,a0
204044e2:	fe842583          	lw	a1,-24(s0)
204044e6:	853e                	mv	a0,a5
204044e8:	644010ef          	jal	ra,20405b2c <strcmp>
204044ec:	87aa                	mv	a5,a0
204044ee:	e399                	bnez	a5,204044f4 <__metal_driver_led_exist+0x2a>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio-leds.c:16
        return 1;
204044f0:	4785                	li	a5,1
204044f2:	a011                	j	204044f6 <__metal_driver_led_exist+0x2c>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio-leds.c:18
    }
    return 0;
204044f4:	4781                	li	a5,0
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio-leds.c:19
}
204044f6:	853e                	mv	a0,a5
204044f8:	40f2                	lw	ra,28(sp)
204044fa:	4462                	lw	s0,24(sp)
204044fc:	6105                	addi	sp,sp,32
204044fe:	8082                	ret

20404500 <__metal_driver_led_enable>:
__metal_driver_led_enable():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio-leds.c:22

void __metal_driver_led_enable (struct metal_led *led)
{
20404500:	7179                	addi	sp,sp,-48
20404502:	d606                	sw	ra,44(sp)
20404504:	d422                	sw	s0,40(sp)
20404506:	1800                	addi	s0,sp,48
20404508:	fca42e23          	sw	a0,-36(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio-leds.c:26
    int pin;
    struct metal_gpio *gpio;

    pin = __metal_driver_sifive_gpio_led_pin(led);
2040450c:	fdc42503          	lw	a0,-36(s0)
20404510:	3f29                	jal	2040442a <__metal_driver_sifive_gpio_led_pin>
20404512:	fea42623          	sw	a0,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio-leds.c:27
    gpio =  __metal_driver_sifive_gpio_led_gpio(led);
20404516:	fdc42503          	lw	a0,-36(s0)
2040451a:	35d9                	jal	204043e0 <__metal_driver_sifive_gpio_led_gpio>
2040451c:	fea42423          	sw	a0,-24(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio-leds.c:29

    if (gpio != NULL) {
20404520:	fe842783          	lw	a5,-24(s0)
20404524:	cf89                	beqz	a5,2040453e <__metal_driver_led_enable+0x3e>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio-leds.c:31
        /* Configure LED as output */
        metal_gpio_disable_input((struct metal_gpio *) gpio, pin);
20404526:	fec42583          	lw	a1,-20(s0)
2040452a:	fe842503          	lw	a0,-24(s0)
2040452e:	040010ef          	jal	ra,2040556e <metal_gpio_disable_input>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio-leds.c:32
        metal_gpio_enable_output((struct metal_gpio *) gpio, pin);
20404532:	fec42583          	lw	a1,-20(s0)
20404536:	fe842503          	lw	a0,-24(s0)
2040453a:	074010ef          	jal	ra,204055ae <metal_gpio_enable_output>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio-leds.c:34
    }
}
2040453e:	0001                	nop
20404540:	50b2                	lw	ra,44(sp)
20404542:	5422                	lw	s0,40(sp)
20404544:	6145                	addi	sp,sp,48
20404546:	8082                	ret

20404548 <__metal_driver_led_on>:
__metal_driver_led_on():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio-leds.c:37

void __metal_driver_led_on (struct metal_led *led)
{
20404548:	7179                	addi	sp,sp,-48
2040454a:	d606                	sw	ra,44(sp)
2040454c:	d422                	sw	s0,40(sp)
2040454e:	1800                	addi	s0,sp,48
20404550:	fca42e23          	sw	a0,-36(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio-leds.c:41
    int pin;
    struct metal_gpio *gpio;

    pin = __metal_driver_sifive_gpio_led_pin(led);
20404554:	fdc42503          	lw	a0,-36(s0)
20404558:	3dc9                	jal	2040442a <__metal_driver_sifive_gpio_led_pin>
2040455a:	fea42623          	sw	a0,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio-leds.c:42
    gpio =  __metal_driver_sifive_gpio_led_gpio(led);
2040455e:	fdc42503          	lw	a0,-36(s0)
20404562:	e7fff0ef          	jal	ra,204043e0 <__metal_driver_sifive_gpio_led_gpio>
20404566:	fea42423          	sw	a0,-24(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio-leds.c:44

    if (gpio != NULL) {
2040456a:	fe842783          	lw	a5,-24(s0)
2040456e:	cb81                	beqz	a5,2040457e <__metal_driver_led_on+0x36>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio-leds.c:45
        metal_gpio_set_pin((struct metal_gpio *) gpio, pin, 1);
20404570:	4605                	li	a2,1
20404572:	fec42583          	lw	a1,-20(s0)
20404576:	fe842503          	lw	a0,-24(s0)
2040457a:	074010ef          	jal	ra,204055ee <metal_gpio_set_pin>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio-leds.c:47
    }
}
2040457e:	0001                	nop
20404580:	50b2                	lw	ra,44(sp)
20404582:	5422                	lw	s0,40(sp)
20404584:	6145                	addi	sp,sp,48
20404586:	8082                	ret

20404588 <__metal_driver_led_off>:
__metal_driver_led_off():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio-leds.c:50

void __metal_driver_led_off (struct metal_led *led)
{
20404588:	7179                	addi	sp,sp,-48
2040458a:	d606                	sw	ra,44(sp)
2040458c:	d422                	sw	s0,40(sp)
2040458e:	1800                	addi	s0,sp,48
20404590:	fca42e23          	sw	a0,-36(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio-leds.c:54
    int pin;
    struct metal_gpio *gpio;

    pin = __metal_driver_sifive_gpio_led_pin(led);
20404594:	fdc42503          	lw	a0,-36(s0)
20404598:	e93ff0ef          	jal	ra,2040442a <__metal_driver_sifive_gpio_led_pin>
2040459c:	fea42623          	sw	a0,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio-leds.c:55
    gpio =  __metal_driver_sifive_gpio_led_gpio(led);
204045a0:	fdc42503          	lw	a0,-36(s0)
204045a4:	e3dff0ef          	jal	ra,204043e0 <__metal_driver_sifive_gpio_led_gpio>
204045a8:	fea42423          	sw	a0,-24(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio-leds.c:57

    if (gpio != NULL) {
204045ac:	fe842783          	lw	a5,-24(s0)
204045b0:	cb81                	beqz	a5,204045c0 <__metal_driver_led_off+0x38>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio-leds.c:58
        metal_gpio_set_pin((struct metal_gpio *) gpio, pin, 0);
204045b2:	4601                	li	a2,0
204045b4:	fec42583          	lw	a1,-20(s0)
204045b8:	fe842503          	lw	a0,-24(s0)
204045bc:	032010ef          	jal	ra,204055ee <metal_gpio_set_pin>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio-leds.c:60
    }
}
204045c0:	0001                	nop
204045c2:	50b2                	lw	ra,44(sp)
204045c4:	5422                	lw	s0,40(sp)
204045c6:	6145                	addi	sp,sp,48
204045c8:	8082                	ret

204045ca <__metal_driver_led_toggle>:
__metal_driver_led_toggle():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio-leds.c:63

void __metal_driver_led_toggle (struct metal_led *led)
{
204045ca:	7179                	addi	sp,sp,-48
204045cc:	d606                	sw	ra,44(sp)
204045ce:	d422                	sw	s0,40(sp)
204045d0:	1800                	addi	s0,sp,48
204045d2:	fca42e23          	sw	a0,-36(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio-leds.c:67
    int pin;
    struct metal_gpio *gpio;

    pin = __metal_driver_sifive_gpio_led_pin(led);
204045d6:	fdc42503          	lw	a0,-36(s0)
204045da:	e51ff0ef          	jal	ra,2040442a <__metal_driver_sifive_gpio_led_pin>
204045de:	fea42623          	sw	a0,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio-leds.c:68
    gpio =  __metal_driver_sifive_gpio_led_gpio(led);
204045e2:	fdc42503          	lw	a0,-36(s0)
204045e6:	dfbff0ef          	jal	ra,204043e0 <__metal_driver_sifive_gpio_led_gpio>
204045ea:	fea42423          	sw	a0,-24(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio-leds.c:70

    if (gpio != NULL) {
204045ee:	fe842783          	lw	a5,-24(s0)
204045f2:	c799                	beqz	a5,20404600 <__metal_driver_led_toggle+0x36>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio-leds.c:71
        metal_gpio_toggle_pin((struct metal_gpio *) gpio, pin);
204045f4:	fec42583          	lw	a1,-20(s0)
204045f8:	fe842503          	lw	a0,-24(s0)
204045fc:	05a010ef          	jal	ra,20405656 <metal_gpio_toggle_pin>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio-leds.c:73
    }
}
20404600:	0001                	nop
20404602:	50b2                	lw	ra,44(sp)
20404604:	5422                	lw	s0,40(sp)
20404606:	6145                	addi	sp,sp,48
20404608:	8082                	ret

2040460a <__metal_driver_sifive_gpio0_base>:
__metal_driver_sifive_gpio0_base():
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:440
{
2040460a:	1101                	addi	sp,sp,-32
2040460c:	ce22                	sw	s0,28(sp)
2040460e:	1000                	addi	s0,sp,32
20404610:	fea42623          	sw	a0,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:441
	if ((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) {
20404614:	fec42703          	lw	a4,-20(s0)
20404618:	81818793          	addi	a5,gp,-2024 # 800007a8 <__metal_dt_gpio_10012000>
2040461c:	00f71563          	bne	a4,a5,20404626 <__metal_driver_sifive_gpio0_base+0x1c>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:442
		return METAL_SIFIVE_GPIO0_10012000_BASE_ADDRESS;
20404620:	100127b7          	lui	a5,0x10012
20404624:	a011                	j	20404628 <__metal_driver_sifive_gpio0_base+0x1e>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:445
		return 0;
20404626:	4781                	li	a5,0
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:447
}
20404628:	853e                	mv	a0,a5
2040462a:	4472                	lw	s0,28(sp)
2040462c:	6105                	addi	sp,sp,32
2040462e:	8082                	ret

20404630 <__metal_driver_sifive_gpio0_interrupt_parent>:
__metal_driver_sifive_gpio0_interrupt_parent():
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:470
{
20404630:	1101                	addi	sp,sp,-32
20404632:	ce22                	sw	s0,28(sp)
20404634:	1000                	addi	s0,sp,32
20404636:	fea42623          	sw	a0,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:471
	if ((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) {
2040463a:	fec42703          	lw	a4,-20(s0)
2040463e:	81818793          	addi	a5,gp,-2024 # 800007a8 <__metal_dt_gpio_10012000>
20404642:	00f71763          	bne	a4,a5,20404650 <__metal_driver_sifive_gpio0_interrupt_parent+0x20>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:472
		return (struct metal_interrupt *)&__metal_dt_interrupt_controller_c000000.controller;
20404646:	800007b7          	lui	a5,0x80000
2040464a:	44878793          	addi	a5,a5,1096 # 80000448 <metal_segment_heap_target_end+0xffffefb0>
2040464e:	a011                	j	20404652 <__metal_driver_sifive_gpio0_interrupt_parent+0x22>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:475
		return 0;
20404650:	4781                	li	a5,0
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:477
}
20404652:	853e                	mv	a0,a5
20404654:	4472                	lw	s0,28(sp)
20404656:	6105                	addi	sp,sp,32
20404658:	8082                	ret

2040465a <__metal_driver_sifive_gpio0_interrupt_lines>:
__metal_driver_sifive_gpio0_interrupt_lines():
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:480
{
2040465a:	1101                	addi	sp,sp,-32
2040465c:	ce22                	sw	s0,28(sp)
2040465e:	1000                	addi	s0,sp,32
20404660:	fea42623          	sw	a0,-20(s0)
20404664:	feb42423          	sw	a1,-24(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:481
	if (((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 0)) {
20404668:	fec42703          	lw	a4,-20(s0)
2040466c:	81818793          	addi	a5,gp,-2024 # 800007a8 <__metal_dt_gpio_10012000>
20404670:	00f71763          	bne	a4,a5,2040467e <__metal_driver_sifive_gpio0_interrupt_lines+0x24>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:481 (discriminator 1)
20404674:	fe842783          	lw	a5,-24(s0)
20404678:	e399                	bnez	a5,2040467e <__metal_driver_sifive_gpio0_interrupt_lines+0x24>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:482
		return 7;
2040467a:	479d                	li	a5,7
2040467c:	a269                	j	20404806 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:484
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 1))) {
2040467e:	fec42703          	lw	a4,-20(s0)
20404682:	81818793          	addi	a5,gp,-2024 # 800007a8 <__metal_dt_gpio_10012000>
20404686:	00f71963          	bne	a4,a5,20404698 <__metal_driver_sifive_gpio0_interrupt_lines+0x3e>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:484 (discriminator 1)
2040468a:	fe842703          	lw	a4,-24(s0)
2040468e:	4785                	li	a5,1
20404690:	00f71463          	bne	a4,a5,20404698 <__metal_driver_sifive_gpio0_interrupt_lines+0x3e>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:485
		return 8;
20404694:	47a1                	li	a5,8
20404696:	aa85                	j	20404806 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:487
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 2))) {
20404698:	fec42703          	lw	a4,-20(s0)
2040469c:	81818793          	addi	a5,gp,-2024 # 800007a8 <__metal_dt_gpio_10012000>
204046a0:	00f71963          	bne	a4,a5,204046b2 <__metal_driver_sifive_gpio0_interrupt_lines+0x58>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:487 (discriminator 1)
204046a4:	fe842703          	lw	a4,-24(s0)
204046a8:	4789                	li	a5,2
204046aa:	00f71463          	bne	a4,a5,204046b2 <__metal_driver_sifive_gpio0_interrupt_lines+0x58>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:488
		return 9;
204046ae:	47a5                	li	a5,9
204046b0:	aa99                	j	20404806 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:490
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 3))) {
204046b2:	fec42703          	lw	a4,-20(s0)
204046b6:	81818793          	addi	a5,gp,-2024 # 800007a8 <__metal_dt_gpio_10012000>
204046ba:	00f71963          	bne	a4,a5,204046cc <__metal_driver_sifive_gpio0_interrupt_lines+0x72>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:490 (discriminator 1)
204046be:	fe842703          	lw	a4,-24(s0)
204046c2:	478d                	li	a5,3
204046c4:	00f71463          	bne	a4,a5,204046cc <__metal_driver_sifive_gpio0_interrupt_lines+0x72>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:491
		return 10;
204046c8:	47a9                	li	a5,10
204046ca:	aa35                	j	20404806 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:493
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 4))) {
204046cc:	fec42703          	lw	a4,-20(s0)
204046d0:	81818793          	addi	a5,gp,-2024 # 800007a8 <__metal_dt_gpio_10012000>
204046d4:	00f71963          	bne	a4,a5,204046e6 <__metal_driver_sifive_gpio0_interrupt_lines+0x8c>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:493 (discriminator 1)
204046d8:	fe842703          	lw	a4,-24(s0)
204046dc:	4791                	li	a5,4
204046de:	00f71463          	bne	a4,a5,204046e6 <__metal_driver_sifive_gpio0_interrupt_lines+0x8c>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:494
		return 11;
204046e2:	47ad                	li	a5,11
204046e4:	a20d                	j	20404806 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:496
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 5))) {
204046e6:	fec42703          	lw	a4,-20(s0)
204046ea:	81818793          	addi	a5,gp,-2024 # 800007a8 <__metal_dt_gpio_10012000>
204046ee:	00f71963          	bne	a4,a5,20404700 <__metal_driver_sifive_gpio0_interrupt_lines+0xa6>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:496 (discriminator 1)
204046f2:	fe842703          	lw	a4,-24(s0)
204046f6:	4795                	li	a5,5
204046f8:	00f71463          	bne	a4,a5,20404700 <__metal_driver_sifive_gpio0_interrupt_lines+0xa6>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:497
		return 12;
204046fc:	47b1                	li	a5,12
204046fe:	a221                	j	20404806 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:499
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 6))) {
20404700:	fec42703          	lw	a4,-20(s0)
20404704:	81818793          	addi	a5,gp,-2024 # 800007a8 <__metal_dt_gpio_10012000>
20404708:	00f71963          	bne	a4,a5,2040471a <__metal_driver_sifive_gpio0_interrupt_lines+0xc0>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:499 (discriminator 1)
2040470c:	fe842703          	lw	a4,-24(s0)
20404710:	4799                	li	a5,6
20404712:	00f71463          	bne	a4,a5,2040471a <__metal_driver_sifive_gpio0_interrupt_lines+0xc0>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:500
		return 13;
20404716:	47b5                	li	a5,13
20404718:	a0fd                	j	20404806 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:502
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 7))) {
2040471a:	fec42703          	lw	a4,-20(s0)
2040471e:	81818793          	addi	a5,gp,-2024 # 800007a8 <__metal_dt_gpio_10012000>
20404722:	00f71963          	bne	a4,a5,20404734 <__metal_driver_sifive_gpio0_interrupt_lines+0xda>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:502 (discriminator 1)
20404726:	fe842703          	lw	a4,-24(s0)
2040472a:	479d                	li	a5,7
2040472c:	00f71463          	bne	a4,a5,20404734 <__metal_driver_sifive_gpio0_interrupt_lines+0xda>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:503
		return 14;
20404730:	47b9                	li	a5,14
20404732:	a8d1                	j	20404806 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:505
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 8))) {
20404734:	fec42703          	lw	a4,-20(s0)
20404738:	81818793          	addi	a5,gp,-2024 # 800007a8 <__metal_dt_gpio_10012000>
2040473c:	00f71963          	bne	a4,a5,2040474e <__metal_driver_sifive_gpio0_interrupt_lines+0xf4>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:505 (discriminator 1)
20404740:	fe842703          	lw	a4,-24(s0)
20404744:	47a1                	li	a5,8
20404746:	00f71463          	bne	a4,a5,2040474e <__metal_driver_sifive_gpio0_interrupt_lines+0xf4>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:506
		return 15;
2040474a:	47bd                	li	a5,15
2040474c:	a86d                	j	20404806 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:508
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 9))) {
2040474e:	fec42703          	lw	a4,-20(s0)
20404752:	81818793          	addi	a5,gp,-2024 # 800007a8 <__metal_dt_gpio_10012000>
20404756:	00f71963          	bne	a4,a5,20404768 <__metal_driver_sifive_gpio0_interrupt_lines+0x10e>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:508 (discriminator 1)
2040475a:	fe842703          	lw	a4,-24(s0)
2040475e:	47a5                	li	a5,9
20404760:	00f71463          	bne	a4,a5,20404768 <__metal_driver_sifive_gpio0_interrupt_lines+0x10e>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:509
		return 16;
20404764:	47c1                	li	a5,16
20404766:	a045                	j	20404806 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:511
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 10))) {
20404768:	fec42703          	lw	a4,-20(s0)
2040476c:	81818793          	addi	a5,gp,-2024 # 800007a8 <__metal_dt_gpio_10012000>
20404770:	00f71963          	bne	a4,a5,20404782 <__metal_driver_sifive_gpio0_interrupt_lines+0x128>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:511 (discriminator 1)
20404774:	fe842703          	lw	a4,-24(s0)
20404778:	47a9                	li	a5,10
2040477a:	00f71463          	bne	a4,a5,20404782 <__metal_driver_sifive_gpio0_interrupt_lines+0x128>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:512
		return 17;
2040477e:	47c5                	li	a5,17
20404780:	a059                	j	20404806 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:514
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 11))) {
20404782:	fec42703          	lw	a4,-20(s0)
20404786:	81818793          	addi	a5,gp,-2024 # 800007a8 <__metal_dt_gpio_10012000>
2040478a:	00f71963          	bne	a4,a5,2040479c <__metal_driver_sifive_gpio0_interrupt_lines+0x142>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:514 (discriminator 1)
2040478e:	fe842703          	lw	a4,-24(s0)
20404792:	47ad                	li	a5,11
20404794:	00f71463          	bne	a4,a5,2040479c <__metal_driver_sifive_gpio0_interrupt_lines+0x142>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:515
		return 18;
20404798:	47c9                	li	a5,18
2040479a:	a0b5                	j	20404806 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:517
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 12))) {
2040479c:	fec42703          	lw	a4,-20(s0)
204047a0:	81818793          	addi	a5,gp,-2024 # 800007a8 <__metal_dt_gpio_10012000>
204047a4:	00f71963          	bne	a4,a5,204047b6 <__metal_driver_sifive_gpio0_interrupt_lines+0x15c>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:517 (discriminator 1)
204047a8:	fe842703          	lw	a4,-24(s0)
204047ac:	47b1                	li	a5,12
204047ae:	00f71463          	bne	a4,a5,204047b6 <__metal_driver_sifive_gpio0_interrupt_lines+0x15c>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:518
		return 19;
204047b2:	47cd                	li	a5,19
204047b4:	a889                	j	20404806 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:520
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 13))) {
204047b6:	fec42703          	lw	a4,-20(s0)
204047ba:	81818793          	addi	a5,gp,-2024 # 800007a8 <__metal_dt_gpio_10012000>
204047be:	00f71963          	bne	a4,a5,204047d0 <__metal_driver_sifive_gpio0_interrupt_lines+0x176>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:520 (discriminator 1)
204047c2:	fe842703          	lw	a4,-24(s0)
204047c6:	47b5                	li	a5,13
204047c8:	00f71463          	bne	a4,a5,204047d0 <__metal_driver_sifive_gpio0_interrupt_lines+0x176>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:521
		return 20;
204047cc:	47d1                	li	a5,20
204047ce:	a825                	j	20404806 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:523
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 14))) {
204047d0:	fec42703          	lw	a4,-20(s0)
204047d4:	81818793          	addi	a5,gp,-2024 # 800007a8 <__metal_dt_gpio_10012000>
204047d8:	00f71963          	bne	a4,a5,204047ea <__metal_driver_sifive_gpio0_interrupt_lines+0x190>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:523 (discriminator 1)
204047dc:	fe842703          	lw	a4,-24(s0)
204047e0:	47b9                	li	a5,14
204047e2:	00f71463          	bne	a4,a5,204047ea <__metal_driver_sifive_gpio0_interrupt_lines+0x190>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:524
		return 21;
204047e6:	47d5                	li	a5,21
204047e8:	a839                	j	20404806 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:526
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 15))) {
204047ea:	fec42703          	lw	a4,-20(s0)
204047ee:	81818793          	addi	a5,gp,-2024 # 800007a8 <__metal_dt_gpio_10012000>
204047f2:	00f71963          	bne	a4,a5,20404804 <__metal_driver_sifive_gpio0_interrupt_lines+0x1aa>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:526 (discriminator 1)
204047f6:	fe842703          	lw	a4,-24(s0)
204047fa:	47bd                	li	a5,15
204047fc:	00f71463          	bne	a4,a5,20404804 <__metal_driver_sifive_gpio0_interrupt_lines+0x1aa>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:527
		return 22;
20404800:	47d9                	li	a5,22
20404802:	a011                	j	20404806 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:530
		return 0;
20404804:	4781                	li	a5,0
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:532
}
20404806:	853e                	mv	a0,a5
20404808:	4472                	lw	s0,28(sp)
2040480a:	6105                	addi	sp,sp,32
2040480c:	8082                	ret

2040480e <__metal_driver_sifive_gpio0_enable_input>:
__metal_driver_sifive_gpio0_enable_input():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:13
#include <metal/drivers/sifive_gpio0.h>
#include <metal/io.h>
#include <metal/machine.h>

int __metal_driver_sifive_gpio0_enable_input(struct metal_gpio *ggpio, long source)
{
2040480e:	7179                	addi	sp,sp,-48
20404810:	d606                	sw	ra,44(sp)
20404812:	d422                	sw	s0,40(sp)
20404814:	1800                	addi	s0,sp,48
20404816:	fca42e23          	sw	a0,-36(s0)
2040481a:	fcb42c23          	sw	a1,-40(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:14
    long base = __metal_driver_sifive_gpio0_base(ggpio);
2040481e:	fdc42503          	lw	a0,-36(s0)
20404822:	de9ff0ef          	jal	ra,2040460a <__metal_driver_sifive_gpio0_base>
20404826:	87aa                	mv	a5,a0
20404828:	fef42623          	sw	a5,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:16

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_INPUT_EN))  |= source;
2040482c:	fec42783          	lw	a5,-20(s0)
20404830:	0791                	addi	a5,a5,4
20404832:	4398                	lw	a4,0(a5)
20404834:	fd842783          	lw	a5,-40(s0)
20404838:	fec42683          	lw	a3,-20(s0)
2040483c:	0691                	addi	a3,a3,4
2040483e:	8fd9                	or	a5,a5,a4
20404840:	c29c                	sw	a5,0(a3)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:18

    return 0;
20404842:	4781                	li	a5,0
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:19
}
20404844:	853e                	mv	a0,a5
20404846:	50b2                	lw	ra,44(sp)
20404848:	5422                	lw	s0,40(sp)
2040484a:	6145                	addi	sp,sp,48
2040484c:	8082                	ret

2040484e <__metal_driver_sifive_gpio0_disable_input>:
__metal_driver_sifive_gpio0_disable_input():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:22

int __metal_driver_sifive_gpio0_disable_input(struct metal_gpio *ggpio, long source)
{
2040484e:	7179                	addi	sp,sp,-48
20404850:	d606                	sw	ra,44(sp)
20404852:	d422                	sw	s0,40(sp)
20404854:	1800                	addi	s0,sp,48
20404856:	fca42e23          	sw	a0,-36(s0)
2040485a:	fcb42c23          	sw	a1,-40(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:23
    long base = __metal_driver_sifive_gpio0_base(ggpio);
2040485e:	fdc42503          	lw	a0,-36(s0)
20404862:	da9ff0ef          	jal	ra,2040460a <__metal_driver_sifive_gpio0_base>
20404866:	87aa                	mv	a5,a0
20404868:	fef42623          	sw	a5,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:25

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_INPUT_EN))  &= ~source;
2040486c:	fec42783          	lw	a5,-20(s0)
20404870:	0791                	addi	a5,a5,4
20404872:	439c                	lw	a5,0(a5)
20404874:	fd842703          	lw	a4,-40(s0)
20404878:	fff74713          	not	a4,a4
2040487c:	86ba                	mv	a3,a4
2040487e:	fec42703          	lw	a4,-20(s0)
20404882:	0711                	addi	a4,a4,4
20404884:	8ff5                	and	a5,a5,a3
20404886:	c31c                	sw	a5,0(a4)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:27

    return 0;
20404888:	4781                	li	a5,0
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:28
}
2040488a:	853e                	mv	a0,a5
2040488c:	50b2                	lw	ra,44(sp)
2040488e:	5422                	lw	s0,40(sp)
20404890:	6145                	addi	sp,sp,48
20404892:	8082                	ret

20404894 <__metal_driver_sifive_gpio0_input>:
__metal_driver_sifive_gpio0_input():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:31

long __metal_driver_sifive_gpio0_input(struct metal_gpio *ggpio)
{
20404894:	7179                	addi	sp,sp,-48
20404896:	d606                	sw	ra,44(sp)
20404898:	d422                	sw	s0,40(sp)
2040489a:	1800                	addi	s0,sp,48
2040489c:	fca42e23          	sw	a0,-36(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:32
    long base = __metal_driver_sifive_gpio0_base(ggpio);
204048a0:	fdc42503          	lw	a0,-36(s0)
204048a4:	d67ff0ef          	jal	ra,2040460a <__metal_driver_sifive_gpio0_base>
204048a8:	87aa                	mv	a5,a0
204048aa:	fef42623          	sw	a5,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:34

    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_VALUE));
204048ae:	fec42783          	lw	a5,-20(s0)
204048b2:	439c                	lw	a5,0(a5)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:35
}
204048b4:	853e                	mv	a0,a5
204048b6:	50b2                	lw	ra,44(sp)
204048b8:	5422                	lw	s0,40(sp)
204048ba:	6145                	addi	sp,sp,48
204048bc:	8082                	ret

204048be <__metal_driver_sifive_gpio0_output>:
__metal_driver_sifive_gpio0_output():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:38

long __metal_driver_sifive_gpio0_output(struct metal_gpio *ggpio)
{
204048be:	7179                	addi	sp,sp,-48
204048c0:	d606                	sw	ra,44(sp)
204048c2:	d422                	sw	s0,40(sp)
204048c4:	1800                	addi	s0,sp,48
204048c6:	fca42e23          	sw	a0,-36(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:39
    long base = __metal_driver_sifive_gpio0_base(ggpio);
204048ca:	fdc42503          	lw	a0,-36(s0)
204048ce:	d3dff0ef          	jal	ra,2040460a <__metal_driver_sifive_gpio0_base>
204048d2:	87aa                	mv	a5,a0
204048d4:	fef42623          	sw	a5,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:41

    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT));
204048d8:	fec42783          	lw	a5,-20(s0)
204048dc:	07b1                	addi	a5,a5,12
204048de:	439c                	lw	a5,0(a5)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:42
}
204048e0:	853e                	mv	a0,a5
204048e2:	50b2                	lw	ra,44(sp)
204048e4:	5422                	lw	s0,40(sp)
204048e6:	6145                	addi	sp,sp,48
204048e8:	8082                	ret

204048ea <__metal_driver_sifive_gpio0_disable_output>:
__metal_driver_sifive_gpio0_disable_output():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:46


int __metal_driver_sifive_gpio0_disable_output(struct metal_gpio *ggpio, long source)
{
204048ea:	7179                	addi	sp,sp,-48
204048ec:	d606                	sw	ra,44(sp)
204048ee:	d422                	sw	s0,40(sp)
204048f0:	1800                	addi	s0,sp,48
204048f2:	fca42e23          	sw	a0,-36(s0)
204048f6:	fcb42c23          	sw	a1,-40(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:47
    long base = __metal_driver_sifive_gpio0_base(ggpio);
204048fa:	fdc42503          	lw	a0,-36(s0)
204048fe:	d0dff0ef          	jal	ra,2040460a <__metal_driver_sifive_gpio0_base>
20404902:	87aa                	mv	a5,a0
20404904:	fef42623          	sw	a5,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:49

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_OUTPUT_EN))  &= ~source;
20404908:	fec42783          	lw	a5,-20(s0)
2040490c:	07a1                	addi	a5,a5,8
2040490e:	439c                	lw	a5,0(a5)
20404910:	fd842703          	lw	a4,-40(s0)
20404914:	fff74713          	not	a4,a4
20404918:	86ba                	mv	a3,a4
2040491a:	fec42703          	lw	a4,-20(s0)
2040491e:	0721                	addi	a4,a4,8
20404920:	8ff5                	and	a5,a5,a3
20404922:	c31c                	sw	a5,0(a4)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:51

    return 0;
20404924:	4781                	li	a5,0
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:52
}
20404926:	853e                	mv	a0,a5
20404928:	50b2                	lw	ra,44(sp)
2040492a:	5422                	lw	s0,40(sp)
2040492c:	6145                	addi	sp,sp,48
2040492e:	8082                	ret

20404930 <__metal_driver_sifive_gpio0_enable_output>:
__metal_driver_sifive_gpio0_enable_output():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:55

int __metal_driver_sifive_gpio0_enable_output(struct metal_gpio *ggpio, long source)
{
20404930:	7179                	addi	sp,sp,-48
20404932:	d606                	sw	ra,44(sp)
20404934:	d422                	sw	s0,40(sp)
20404936:	1800                	addi	s0,sp,48
20404938:	fca42e23          	sw	a0,-36(s0)
2040493c:	fcb42c23          	sw	a1,-40(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:56
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404940:	fdc42503          	lw	a0,-36(s0)
20404944:	cc7ff0ef          	jal	ra,2040460a <__metal_driver_sifive_gpio0_base>
20404948:	87aa                	mv	a5,a0
2040494a:	fef42623          	sw	a5,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:58

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_OUTPUT_EN))  |= source;
2040494e:	fec42783          	lw	a5,-20(s0)
20404952:	07a1                	addi	a5,a5,8
20404954:	4398                	lw	a4,0(a5)
20404956:	fd842783          	lw	a5,-40(s0)
2040495a:	fec42683          	lw	a3,-20(s0)
2040495e:	06a1                	addi	a3,a3,8
20404960:	8fd9                	or	a5,a5,a4
20404962:	c29c                	sw	a5,0(a3)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:60

    return 0;
20404964:	4781                	li	a5,0
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:61
}
20404966:	853e                	mv	a0,a5
20404968:	50b2                	lw	ra,44(sp)
2040496a:	5422                	lw	s0,40(sp)
2040496c:	6145                	addi	sp,sp,48
2040496e:	8082                	ret

20404970 <__metal_driver_sifive_gpio0_output_set>:
__metal_driver_sifive_gpio0_output_set():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:64

int __metal_driver_sifive_gpio0_output_set(struct metal_gpio *ggpio, long value)
{
20404970:	7179                	addi	sp,sp,-48
20404972:	d606                	sw	ra,44(sp)
20404974:	d422                	sw	s0,40(sp)
20404976:	1800                	addi	s0,sp,48
20404978:	fca42e23          	sw	a0,-36(s0)
2040497c:	fcb42c23          	sw	a1,-40(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:65
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404980:	fdc42503          	lw	a0,-36(s0)
20404984:	c87ff0ef          	jal	ra,2040460a <__metal_driver_sifive_gpio0_base>
20404988:	87aa                	mv	a5,a0
2040498a:	fef42623          	sw	a5,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:67

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) |= value;
2040498e:	fec42783          	lw	a5,-20(s0)
20404992:	07b1                	addi	a5,a5,12
20404994:	4398                	lw	a4,0(a5)
20404996:	fd842783          	lw	a5,-40(s0)
2040499a:	fec42683          	lw	a3,-20(s0)
2040499e:	06b1                	addi	a3,a3,12
204049a0:	8fd9                	or	a5,a5,a4
204049a2:	c29c                	sw	a5,0(a3)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:69

    return 0;
204049a4:	4781                	li	a5,0
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:70
}
204049a6:	853e                	mv	a0,a5
204049a8:	50b2                	lw	ra,44(sp)
204049aa:	5422                	lw	s0,40(sp)
204049ac:	6145                	addi	sp,sp,48
204049ae:	8082                	ret

204049b0 <__metal_driver_sifive_gpio0_output_clear>:
__metal_driver_sifive_gpio0_output_clear():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:73

int __metal_driver_sifive_gpio0_output_clear(struct metal_gpio *ggpio, long value)
{
204049b0:	7179                	addi	sp,sp,-48
204049b2:	d606                	sw	ra,44(sp)
204049b4:	d422                	sw	s0,40(sp)
204049b6:	1800                	addi	s0,sp,48
204049b8:	fca42e23          	sw	a0,-36(s0)
204049bc:	fcb42c23          	sw	a1,-40(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:74
    long base = __metal_driver_sifive_gpio0_base(ggpio);
204049c0:	fdc42503          	lw	a0,-36(s0)
204049c4:	c47ff0ef          	jal	ra,2040460a <__metal_driver_sifive_gpio0_base>
204049c8:	87aa                	mv	a5,a0
204049ca:	fef42623          	sw	a5,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:76

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) &= ~value;
204049ce:	fec42783          	lw	a5,-20(s0)
204049d2:	07b1                	addi	a5,a5,12
204049d4:	439c                	lw	a5,0(a5)
204049d6:	fd842703          	lw	a4,-40(s0)
204049da:	fff74713          	not	a4,a4
204049de:	86ba                	mv	a3,a4
204049e0:	fec42703          	lw	a4,-20(s0)
204049e4:	0731                	addi	a4,a4,12
204049e6:	8ff5                	and	a5,a5,a3
204049e8:	c31c                	sw	a5,0(a4)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:78

    return 0;
204049ea:	4781                	li	a5,0
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:79
}
204049ec:	853e                	mv	a0,a5
204049ee:	50b2                	lw	ra,44(sp)
204049f0:	5422                	lw	s0,40(sp)
204049f2:	6145                	addi	sp,sp,48
204049f4:	8082                	ret

204049f6 <__metal_driver_sifive_gpio0_output_toggle>:
__metal_driver_sifive_gpio0_output_toggle():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:82

int __metal_driver_sifive_gpio0_output_toggle(struct metal_gpio *ggpio, long value)
{
204049f6:	7179                	addi	sp,sp,-48
204049f8:	d606                	sw	ra,44(sp)
204049fa:	d422                	sw	s0,40(sp)
204049fc:	1800                	addi	s0,sp,48
204049fe:	fca42e23          	sw	a0,-36(s0)
20404a02:	fcb42c23          	sw	a1,-40(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:83
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404a06:	fdc42503          	lw	a0,-36(s0)
20404a0a:	c01ff0ef          	jal	ra,2040460a <__metal_driver_sifive_gpio0_base>
20404a0e:	87aa                	mv	a5,a0
20404a10:	fef42623          	sw	a5,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:86

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) =
	__METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) ^ value;
20404a14:	fec42783          	lw	a5,-20(s0)
20404a18:	07b1                	addi	a5,a5,12
20404a1a:	4398                	lw	a4,0(a5)
20404a1c:	fd842783          	lw	a5,-40(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:85
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) =
20404a20:	fec42683          	lw	a3,-20(s0)
20404a24:	06b1                	addi	a3,a3,12
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:86
	__METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) ^ value;
20404a26:	8fb9                	xor	a5,a5,a4
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:85
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) =
20404a28:	c29c                	sw	a5,0(a3)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:88

    return 0;
20404a2a:	4781                	li	a5,0
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:89
}
20404a2c:	853e                	mv	a0,a5
20404a2e:	50b2                	lw	ra,44(sp)
20404a30:	5422                	lw	s0,40(sp)
20404a32:	6145                	addi	sp,sp,48
20404a34:	8082                	ret

20404a36 <__metal_driver_sifive_gpio0_enable_io>:
__metal_driver_sifive_gpio0_enable_io():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:92

int __metal_driver_sifive_gpio0_enable_io(struct metal_gpio *ggpio, long source, long dest)
{
20404a36:	7179                	addi	sp,sp,-48
20404a38:	d606                	sw	ra,44(sp)
20404a3a:	d422                	sw	s0,40(sp)
20404a3c:	1800                	addi	s0,sp,48
20404a3e:	fca42e23          	sw	a0,-36(s0)
20404a42:	fcb42c23          	sw	a1,-40(s0)
20404a46:	fcc42a23          	sw	a2,-44(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:93
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404a4a:	fdc42503          	lw	a0,-36(s0)
20404a4e:	bbdff0ef          	jal	ra,2040460a <__metal_driver_sifive_gpio0_base>
20404a52:	87aa                	mv	a5,a0
20404a54:	fef42623          	sw	a5,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:95

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_IOF_SEL)) &= ~source;
20404a58:	fec42783          	lw	a5,-20(s0)
20404a5c:	03c78793          	addi	a5,a5,60
20404a60:	439c                	lw	a5,0(a5)
20404a62:	fd842703          	lw	a4,-40(s0)
20404a66:	fff74713          	not	a4,a4
20404a6a:	86ba                	mv	a3,a4
20404a6c:	fec42703          	lw	a4,-20(s0)
20404a70:	03c70713          	addi	a4,a4,60
20404a74:	8ff5                	and	a5,a5,a3
20404a76:	c31c                	sw	a5,0(a4)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:96
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_IOF_EN))  |= dest;
20404a78:	fec42783          	lw	a5,-20(s0)
20404a7c:	03878793          	addi	a5,a5,56
20404a80:	4398                	lw	a4,0(a5)
20404a82:	fd442783          	lw	a5,-44(s0)
20404a86:	fec42683          	lw	a3,-20(s0)
20404a8a:	03868693          	addi	a3,a3,56
20404a8e:	8fd9                	or	a5,a5,a4
20404a90:	c29c                	sw	a5,0(a3)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:98

    return 0;
20404a92:	4781                	li	a5,0
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:99
}
20404a94:	853e                	mv	a0,a5
20404a96:	50b2                	lw	ra,44(sp)
20404a98:	5422                	lw	s0,40(sp)
20404a9a:	6145                	addi	sp,sp,48
20404a9c:	8082                	ret

20404a9e <__metal_driver_sifive_gpio0_disable_io>:
__metal_driver_sifive_gpio0_disable_io():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:102

int __metal_driver_sifive_gpio0_disable_io(struct metal_gpio *ggpio, long source)
{
20404a9e:	7179                	addi	sp,sp,-48
20404aa0:	d606                	sw	ra,44(sp)
20404aa2:	d422                	sw	s0,40(sp)
20404aa4:	1800                	addi	s0,sp,48
20404aa6:	fca42e23          	sw	a0,-36(s0)
20404aaa:	fcb42c23          	sw	a1,-40(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:103
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404aae:	fdc42503          	lw	a0,-36(s0)
20404ab2:	b59ff0ef          	jal	ra,2040460a <__metal_driver_sifive_gpio0_base>
20404ab6:	87aa                	mv	a5,a0
20404ab8:	fef42623          	sw	a5,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:105

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_IOF_EN))  &= ~source;
20404abc:	fec42783          	lw	a5,-20(s0)
20404ac0:	03878793          	addi	a5,a5,56
20404ac4:	439c                	lw	a5,0(a5)
20404ac6:	fd842703          	lw	a4,-40(s0)
20404aca:	fff74713          	not	a4,a4
20404ace:	86ba                	mv	a3,a4
20404ad0:	fec42703          	lw	a4,-20(s0)
20404ad4:	03870713          	addi	a4,a4,56
20404ad8:	8ff5                	and	a5,a5,a3
20404ada:	c31c                	sw	a5,0(a4)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:107

    return 0;
20404adc:	4781                	li	a5,0
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:108
}
20404ade:	853e                	mv	a0,a5
20404ae0:	50b2                	lw	ra,44(sp)
20404ae2:	5422                	lw	s0,40(sp)
20404ae4:	6145                	addi	sp,sp,48
20404ae6:	8082                	ret

20404ae8 <__metal_driver_sifive_gpio0_config_int>:
__metal_driver_sifive_gpio0_config_int():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:111

int __metal_driver_sifive_gpio0_config_int(struct metal_gpio *ggpio, long source, int intr_type)
{
20404ae8:	7179                	addi	sp,sp,-48
20404aea:	d606                	sw	ra,44(sp)
20404aec:	d422                	sw	s0,40(sp)
20404aee:	1800                	addi	s0,sp,48
20404af0:	fca42e23          	sw	a0,-36(s0)
20404af4:	fcb42c23          	sw	a1,-40(s0)
20404af8:	fcc42a23          	sw	a2,-44(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:112
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404afc:	fdc42503          	lw	a0,-36(s0)
20404b00:	b0bff0ef          	jal	ra,2040460a <__metal_driver_sifive_gpio0_base>
20404b04:	87aa                	mv	a5,a0
20404b06:	fef42623          	sw	a5,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:114

    switch (intr_type)
20404b0a:	fd442703          	lw	a4,-44(s0)
20404b0e:	479d                	li	a5,7
20404b10:	1ce7e963          	bltu	a5,a4,20404ce2 <__metal_driver_sifive_gpio0_config_int+0x1fa>
20404b14:	fd442783          	lw	a5,-44(s0)
20404b18:	00279713          	slli	a4,a5,0x2
20404b1c:	204077b7          	lui	a5,0x20407
20404b20:	e8478793          	addi	a5,a5,-380 # 20406e84 <__metal_driver_vtable_sifive_led+0x14>
20404b24:	97ba                	add	a5,a5,a4
20404b26:	439c                	lw	a5,0(a5)
20404b28:	8782                	jr	a5
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:117
    {
        case METAL_GPIO_INT_DISABLE:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE))  &= ~source;
20404b2a:	fec42783          	lw	a5,-20(s0)
20404b2e:	07e1                	addi	a5,a5,24
20404b30:	439c                	lw	a5,0(a5)
20404b32:	fd842703          	lw	a4,-40(s0)
20404b36:	fff74713          	not	a4,a4
20404b3a:	86ba                	mv	a3,a4
20404b3c:	fec42703          	lw	a4,-20(s0)
20404b40:	0761                	addi	a4,a4,24
20404b42:	8ff5                	and	a5,a5,a3
20404b44:	c31c                	sw	a5,0(a4)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:118
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE))  &= ~source;
20404b46:	fec42783          	lw	a5,-20(s0)
20404b4a:	02078793          	addi	a5,a5,32
20404b4e:	439c                	lw	a5,0(a5)
20404b50:	fd842703          	lw	a4,-40(s0)
20404b54:	fff74713          	not	a4,a4
20404b58:	86ba                	mv	a3,a4
20404b5a:	fec42703          	lw	a4,-20(s0)
20404b5e:	02070713          	addi	a4,a4,32
20404b62:	8ff5                	and	a5,a5,a3
20404b64:	c31c                	sw	a5,0(a4)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:119
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE))  &= ~source;
20404b66:	fec42783          	lw	a5,-20(s0)
20404b6a:	02878793          	addi	a5,a5,40
20404b6e:	439c                	lw	a5,0(a5)
20404b70:	fd842703          	lw	a4,-40(s0)
20404b74:	fff74713          	not	a4,a4
20404b78:	86ba                	mv	a3,a4
20404b7a:	fec42703          	lw	a4,-20(s0)
20404b7e:	02870713          	addi	a4,a4,40
20404b82:	8ff5                	and	a5,a5,a3
20404b84:	c31c                	sw	a5,0(a4)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:120
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE))  &= ~source;
20404b86:	fec42783          	lw	a5,-20(s0)
20404b8a:	03078793          	addi	a5,a5,48
20404b8e:	439c                	lw	a5,0(a5)
20404b90:	fd842703          	lw	a4,-40(s0)
20404b94:	fff74713          	not	a4,a4
20404b98:	86ba                	mv	a3,a4
20404b9a:	fec42703          	lw	a4,-20(s0)
20404b9e:	03070713          	addi	a4,a4,48
20404ba2:	8ff5                	and	a5,a5,a3
20404ba4:	c31c                	sw	a5,0(a4)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:121
            break;
20404ba6:	aa35                	j	20404ce2 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:123
        case METAL_GPIO_INT_RISING:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE))  |= source;
20404ba8:	fec42783          	lw	a5,-20(s0)
20404bac:	07e1                	addi	a5,a5,24
20404bae:	4398                	lw	a4,0(a5)
20404bb0:	fd842783          	lw	a5,-40(s0)
20404bb4:	fec42683          	lw	a3,-20(s0)
20404bb8:	06e1                	addi	a3,a3,24
20404bba:	8fd9                	or	a5,a5,a4
20404bbc:	c29c                	sw	a5,0(a3)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:124
            break;
20404bbe:	a215                	j	20404ce2 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:126
        case METAL_GPIO_INT_FALLING:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE))  |= source;
20404bc0:	fec42783          	lw	a5,-20(s0)
20404bc4:	02078793          	addi	a5,a5,32
20404bc8:	4398                	lw	a4,0(a5)
20404bca:	fd842783          	lw	a5,-40(s0)
20404bce:	fec42683          	lw	a3,-20(s0)
20404bd2:	02068693          	addi	a3,a3,32
20404bd6:	8fd9                	or	a5,a5,a4
20404bd8:	c29c                	sw	a5,0(a3)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:127
            break;
20404bda:	a221                	j	20404ce2 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:129
        case METAL_GPIO_INT_BOTH_EDGE:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE))  |= source;
20404bdc:	fec42783          	lw	a5,-20(s0)
20404be0:	07e1                	addi	a5,a5,24
20404be2:	4398                	lw	a4,0(a5)
20404be4:	fd842783          	lw	a5,-40(s0)
20404be8:	fec42683          	lw	a3,-20(s0)
20404bec:	06e1                	addi	a3,a3,24
20404bee:	8fd9                	or	a5,a5,a4
20404bf0:	c29c                	sw	a5,0(a3)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:130
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE))  |= source;
20404bf2:	fec42783          	lw	a5,-20(s0)
20404bf6:	02078793          	addi	a5,a5,32
20404bfa:	4398                	lw	a4,0(a5)
20404bfc:	fd842783          	lw	a5,-40(s0)
20404c00:	fec42683          	lw	a3,-20(s0)
20404c04:	02068693          	addi	a3,a3,32
20404c08:	8fd9                	or	a5,a5,a4
20404c0a:	c29c                	sw	a5,0(a3)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:131
            break;
20404c0c:	a8d9                	j	20404ce2 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:133
        case METAL_GPIO_INT_HIGH:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE))  |= source;
20404c0e:	fec42783          	lw	a5,-20(s0)
20404c12:	02878793          	addi	a5,a5,40
20404c16:	4398                	lw	a4,0(a5)
20404c18:	fd842783          	lw	a5,-40(s0)
20404c1c:	fec42683          	lw	a3,-20(s0)
20404c20:	02868693          	addi	a3,a3,40
20404c24:	8fd9                	or	a5,a5,a4
20404c26:	c29c                	sw	a5,0(a3)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:134
            break;
20404c28:	a86d                	j	20404ce2 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:136
        case METAL_GPIO_INT_LOW:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE))  |= source;
20404c2a:	fec42783          	lw	a5,-20(s0)
20404c2e:	03078793          	addi	a5,a5,48
20404c32:	4398                	lw	a4,0(a5)
20404c34:	fd842783          	lw	a5,-40(s0)
20404c38:	fec42683          	lw	a3,-20(s0)
20404c3c:	03068693          	addi	a3,a3,48
20404c40:	8fd9                	or	a5,a5,a4
20404c42:	c29c                	sw	a5,0(a3)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:137
            break;
20404c44:	a879                	j	20404ce2 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:139
        case METAL_GPIO_INT_BOTH_LEVEL:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE))  |= source;
20404c46:	fec42783          	lw	a5,-20(s0)
20404c4a:	02878793          	addi	a5,a5,40
20404c4e:	4398                	lw	a4,0(a5)
20404c50:	fd842783          	lw	a5,-40(s0)
20404c54:	fec42683          	lw	a3,-20(s0)
20404c58:	02868693          	addi	a3,a3,40
20404c5c:	8fd9                	or	a5,a5,a4
20404c5e:	c29c                	sw	a5,0(a3)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:140
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE))  |= source;
20404c60:	fec42783          	lw	a5,-20(s0)
20404c64:	03078793          	addi	a5,a5,48
20404c68:	4398                	lw	a4,0(a5)
20404c6a:	fd842783          	lw	a5,-40(s0)
20404c6e:	fec42683          	lw	a3,-20(s0)
20404c72:	03068693          	addi	a3,a3,48
20404c76:	8fd9                	or	a5,a5,a4
20404c78:	c29c                	sw	a5,0(a3)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:141
            break;
20404c7a:	a0a5                	j	20404ce2 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:143
        case METAL_GPIO_INT_MAX:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE))  |= source;
20404c7c:	fec42783          	lw	a5,-20(s0)
20404c80:	07e1                	addi	a5,a5,24
20404c82:	4398                	lw	a4,0(a5)
20404c84:	fd842783          	lw	a5,-40(s0)
20404c88:	fec42683          	lw	a3,-20(s0)
20404c8c:	06e1                	addi	a3,a3,24
20404c8e:	8fd9                	or	a5,a5,a4
20404c90:	c29c                	sw	a5,0(a3)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:144
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE))  |= source;
20404c92:	fec42783          	lw	a5,-20(s0)
20404c96:	02078793          	addi	a5,a5,32
20404c9a:	4398                	lw	a4,0(a5)
20404c9c:	fd842783          	lw	a5,-40(s0)
20404ca0:	fec42683          	lw	a3,-20(s0)
20404ca4:	02068693          	addi	a3,a3,32
20404ca8:	8fd9                	or	a5,a5,a4
20404caa:	c29c                	sw	a5,0(a3)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:145
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE))  |= source;
20404cac:	fec42783          	lw	a5,-20(s0)
20404cb0:	02878793          	addi	a5,a5,40
20404cb4:	4398                	lw	a4,0(a5)
20404cb6:	fd842783          	lw	a5,-40(s0)
20404cba:	fec42683          	lw	a3,-20(s0)
20404cbe:	02868693          	addi	a3,a3,40
20404cc2:	8fd9                	or	a5,a5,a4
20404cc4:	c29c                	sw	a5,0(a3)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:146
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE))  |= source;
20404cc6:	fec42783          	lw	a5,-20(s0)
20404cca:	03078793          	addi	a5,a5,48
20404cce:	4398                	lw	a4,0(a5)
20404cd0:	fd842783          	lw	a5,-40(s0)
20404cd4:	fec42683          	lw	a3,-20(s0)
20404cd8:	03068693          	addi	a3,a3,48
20404cdc:	8fd9                	or	a5,a5,a4
20404cde:	c29c                	sw	a5,0(a3)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:147
            break;
20404ce0:	0001                	nop
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:149
    }
    return 0;
20404ce2:	4781                	li	a5,0
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:150
}
20404ce4:	853e                	mv	a0,a5
20404ce6:	50b2                	lw	ra,44(sp)
20404ce8:	5422                	lw	s0,40(sp)
20404cea:	6145                	addi	sp,sp,48
20404cec:	8082                	ret

20404cee <__metal_driver_sifive_gpio0_clear_int>:
__metal_driver_sifive_gpio0_clear_int():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:153

int __metal_driver_sifive_gpio0_clear_int(struct metal_gpio *ggpio, long source, int intr_type)
{
20404cee:	7179                	addi	sp,sp,-48
20404cf0:	d606                	sw	ra,44(sp)
20404cf2:	d422                	sw	s0,40(sp)
20404cf4:	1800                	addi	s0,sp,48
20404cf6:	fca42e23          	sw	a0,-36(s0)
20404cfa:	fcb42c23          	sw	a1,-40(s0)
20404cfe:	fcc42a23          	sw	a2,-44(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:154
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404d02:	fdc42503          	lw	a0,-36(s0)
20404d06:	905ff0ef          	jal	ra,2040460a <__metal_driver_sifive_gpio0_base>
20404d0a:	87aa                	mv	a5,a0
20404d0c:	fef42623          	sw	a5,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:156

    switch (intr_type)
20404d10:	fd442703          	lw	a4,-44(s0)
20404d14:	479d                	li	a5,7
20404d16:	14e7ea63          	bltu	a5,a4,20404e6a <__metal_driver_sifive_gpio0_clear_int+0x17c>
20404d1a:	fd442783          	lw	a5,-44(s0)
20404d1e:	00279713          	slli	a4,a5,0x2
20404d22:	204077b7          	lui	a5,0x20407
20404d26:	ea478793          	addi	a5,a5,-348 # 20406ea4 <__metal_driver_vtable_sifive_led+0x34>
20404d2a:	97ba                	add	a5,a5,a4
20404d2c:	439c                	lw	a5,0(a5)
20404d2e:	8782                	jr	a5
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:159
    {
        case METAL_GPIO_INT_RISING:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IP))  |= source;
20404d30:	fec42783          	lw	a5,-20(s0)
20404d34:	07f1                	addi	a5,a5,28
20404d36:	4398                	lw	a4,0(a5)
20404d38:	fd842783          	lw	a5,-40(s0)
20404d3c:	fec42683          	lw	a3,-20(s0)
20404d40:	06f1                	addi	a3,a3,28
20404d42:	8fd9                	or	a5,a5,a4
20404d44:	c29c                	sw	a5,0(a3)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:160
            break;
20404d46:	a215                	j	20404e6a <__metal_driver_sifive_gpio0_clear_int+0x17c>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:162
        case METAL_GPIO_INT_FALLING:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IP))  |= source;
20404d48:	fec42783          	lw	a5,-20(s0)
20404d4c:	02478793          	addi	a5,a5,36
20404d50:	4398                	lw	a4,0(a5)
20404d52:	fd842783          	lw	a5,-40(s0)
20404d56:	fec42683          	lw	a3,-20(s0)
20404d5a:	02468693          	addi	a3,a3,36
20404d5e:	8fd9                	or	a5,a5,a4
20404d60:	c29c                	sw	a5,0(a3)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:163
            break;
20404d62:	a221                	j	20404e6a <__metal_driver_sifive_gpio0_clear_int+0x17c>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:165
        case METAL_GPIO_INT_BOTH_EDGE:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IP))  |= source;
20404d64:	fec42783          	lw	a5,-20(s0)
20404d68:	07f1                	addi	a5,a5,28
20404d6a:	4398                	lw	a4,0(a5)
20404d6c:	fd842783          	lw	a5,-40(s0)
20404d70:	fec42683          	lw	a3,-20(s0)
20404d74:	06f1                	addi	a3,a3,28
20404d76:	8fd9                	or	a5,a5,a4
20404d78:	c29c                	sw	a5,0(a3)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:166
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IP))  |= source;
20404d7a:	fec42783          	lw	a5,-20(s0)
20404d7e:	02478793          	addi	a5,a5,36
20404d82:	4398                	lw	a4,0(a5)
20404d84:	fd842783          	lw	a5,-40(s0)
20404d88:	fec42683          	lw	a3,-20(s0)
20404d8c:	02468693          	addi	a3,a3,36
20404d90:	8fd9                	or	a5,a5,a4
20404d92:	c29c                	sw	a5,0(a3)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:167
            break;
20404d94:	a8d9                	j	20404e6a <__metal_driver_sifive_gpio0_clear_int+0x17c>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:169
        case METAL_GPIO_INT_HIGH:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IP))  |= source;
20404d96:	fec42783          	lw	a5,-20(s0)
20404d9a:	02c78793          	addi	a5,a5,44
20404d9e:	4398                	lw	a4,0(a5)
20404da0:	fd842783          	lw	a5,-40(s0)
20404da4:	fec42683          	lw	a3,-20(s0)
20404da8:	02c68693          	addi	a3,a3,44
20404dac:	8fd9                	or	a5,a5,a4
20404dae:	c29c                	sw	a5,0(a3)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:170
            break;
20404db0:	a86d                	j	20404e6a <__metal_driver_sifive_gpio0_clear_int+0x17c>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:172
        case METAL_GPIO_INT_LOW:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IP))  |= source;
20404db2:	fec42783          	lw	a5,-20(s0)
20404db6:	03478793          	addi	a5,a5,52
20404dba:	4398                	lw	a4,0(a5)
20404dbc:	fd842783          	lw	a5,-40(s0)
20404dc0:	fec42683          	lw	a3,-20(s0)
20404dc4:	03468693          	addi	a3,a3,52
20404dc8:	8fd9                	or	a5,a5,a4
20404dca:	c29c                	sw	a5,0(a3)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:173
            break;
20404dcc:	a879                	j	20404e6a <__metal_driver_sifive_gpio0_clear_int+0x17c>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:175
        case METAL_GPIO_INT_BOTH_LEVEL:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IP))  |= source;
20404dce:	fec42783          	lw	a5,-20(s0)
20404dd2:	02c78793          	addi	a5,a5,44
20404dd6:	4398                	lw	a4,0(a5)
20404dd8:	fd842783          	lw	a5,-40(s0)
20404ddc:	fec42683          	lw	a3,-20(s0)
20404de0:	02c68693          	addi	a3,a3,44
20404de4:	8fd9                	or	a5,a5,a4
20404de6:	c29c                	sw	a5,0(a3)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:176
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IP))  |= source;
20404de8:	fec42783          	lw	a5,-20(s0)
20404dec:	03478793          	addi	a5,a5,52
20404df0:	4398                	lw	a4,0(a5)
20404df2:	fd842783          	lw	a5,-40(s0)
20404df6:	fec42683          	lw	a3,-20(s0)
20404dfa:	03468693          	addi	a3,a3,52
20404dfe:	8fd9                	or	a5,a5,a4
20404e00:	c29c                	sw	a5,0(a3)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:177
            break;
20404e02:	a0a5                	j	20404e6a <__metal_driver_sifive_gpio0_clear_int+0x17c>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:179
        case METAL_GPIO_INT_MAX:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IP))  |= source;
20404e04:	fec42783          	lw	a5,-20(s0)
20404e08:	07f1                	addi	a5,a5,28
20404e0a:	4398                	lw	a4,0(a5)
20404e0c:	fd842783          	lw	a5,-40(s0)
20404e10:	fec42683          	lw	a3,-20(s0)
20404e14:	06f1                	addi	a3,a3,28
20404e16:	8fd9                	or	a5,a5,a4
20404e18:	c29c                	sw	a5,0(a3)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:180
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IP))  |= source;
20404e1a:	fec42783          	lw	a5,-20(s0)
20404e1e:	02478793          	addi	a5,a5,36
20404e22:	4398                	lw	a4,0(a5)
20404e24:	fd842783          	lw	a5,-40(s0)
20404e28:	fec42683          	lw	a3,-20(s0)
20404e2c:	02468693          	addi	a3,a3,36
20404e30:	8fd9                	or	a5,a5,a4
20404e32:	c29c                	sw	a5,0(a3)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:181
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IP))  |= source;
20404e34:	fec42783          	lw	a5,-20(s0)
20404e38:	02c78793          	addi	a5,a5,44
20404e3c:	4398                	lw	a4,0(a5)
20404e3e:	fd842783          	lw	a5,-40(s0)
20404e42:	fec42683          	lw	a3,-20(s0)
20404e46:	02c68693          	addi	a3,a3,44
20404e4a:	8fd9                	or	a5,a5,a4
20404e4c:	c29c                	sw	a5,0(a3)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:182
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IP))  |= source;
20404e4e:	fec42783          	lw	a5,-20(s0)
20404e52:	03478793          	addi	a5,a5,52
20404e56:	4398                	lw	a4,0(a5)
20404e58:	fd842783          	lw	a5,-40(s0)
20404e5c:	fec42683          	lw	a3,-20(s0)
20404e60:	03468693          	addi	a3,a3,52
20404e64:	8fd9                	or	a5,a5,a4
20404e66:	c29c                	sw	a5,0(a3)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:183
            break;
20404e68:	0001                	nop
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:185
    }
    return 0;
20404e6a:	4781                	li	a5,0
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:186
}
20404e6c:	853e                	mv	a0,a5
20404e6e:	50b2                	lw	ra,44(sp)
20404e70:	5422                	lw	s0,40(sp)
20404e72:	6145                	addi	sp,sp,48
20404e74:	8082                	ret

20404e76 <__metal_driver_gpio_interrupt_controller>:
__metal_driver_gpio_interrupt_controller():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:190

struct metal_interrupt *
__metal_driver_gpio_interrupt_controller(struct metal_gpio *gpio)
{
20404e76:	1101                	addi	sp,sp,-32
20404e78:	ce06                	sw	ra,28(sp)
20404e7a:	cc22                	sw	s0,24(sp)
20404e7c:	1000                	addi	s0,sp,32
20404e7e:	fea42623          	sw	a0,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:191
    return __metal_driver_sifive_gpio0_interrupt_parent(gpio);
20404e82:	fec42503          	lw	a0,-20(s0)
20404e86:	faaff0ef          	jal	ra,20404630 <__metal_driver_sifive_gpio0_interrupt_parent>
20404e8a:	87aa                	mv	a5,a0
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:192
}
20404e8c:	853e                	mv	a0,a5
20404e8e:	40f2                	lw	ra,28(sp)
20404e90:	4462                	lw	s0,24(sp)
20404e92:	6105                	addi	sp,sp,32
20404e94:	8082                	ret

20404e96 <__metal_driver_gpio_get_interrupt_id>:
__metal_driver_gpio_get_interrupt_id():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:195

int __metal_driver_gpio_get_interrupt_id(struct metal_gpio *gpio, int pin)
{
20404e96:	7179                	addi	sp,sp,-48
20404e98:	d606                	sw	ra,44(sp)
20404e9a:	d422                	sw	s0,40(sp)
20404e9c:	1800                	addi	s0,sp,48
20404e9e:	fca42e23          	sw	a0,-36(s0)
20404ea2:	fcb42c23          	sw	a1,-40(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:197
    int irq;
    irq = __metal_driver_sifive_gpio0_interrupt_lines(gpio, pin);
20404ea6:	fd842583          	lw	a1,-40(s0)
20404eaa:	fdc42503          	lw	a0,-36(s0)
20404eae:	facff0ef          	jal	ra,2040465a <__metal_driver_sifive_gpio0_interrupt_lines>
20404eb2:	fea42623          	sw	a0,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:198
    return irq;
20404eb6:	fec42783          	lw	a5,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:199
}
20404eba:	853e                	mv	a0,a5
20404ebc:	50b2                	lw	ra,44(sp)
20404ebe:	5422                	lw	s0,40(sp)
20404ec0:	6145                	addi	sp,sp,48
20404ec2:	8082                	ret

20404ec4 <__metal_driver_sifive_test0_base>:
__metal_driver_sifive_test0_base():
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:709
{
20404ec4:	1101                	addi	sp,sp,-32
20404ec6:	ce22                	sw	s0,28(sp)
20404ec8:	1000                	addi	s0,sp,32
20404eca:	fea42623          	sw	a0,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:710
	if ((uintptr_t)sd == (uintptr_t)&__metal_dt_test_100000) {
20404ece:	fec42703          	lw	a4,-20(s0)
20404ed2:	82818793          	addi	a5,gp,-2008 # 800007b8 <__metal_dt_test_100000>
20404ed6:	00f71563          	bne	a4,a5,20404ee0 <__metal_driver_sifive_test0_base+0x1c>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:711
		return METAL_SIFIVE_TEST0_100000_BASE_ADDRESS;
20404eda:	001007b7          	lui	a5,0x100
20404ede:	a011                	j	20404ee2 <__metal_driver_sifive_test0_base+0x1e>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:714
		return 0;
20404ee0:	4781                	li	a5,0
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:716
}
20404ee2:	853e                	mv	a0,a5
20404ee4:	4472                	lw	s0,28(sp)
20404ee6:	6105                	addi	sp,sp,32
20404ee8:	8082                	ret

20404eea <__metal_driver_sifive_test0_exit>:
__metal_driver_sifive_test0_exit():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_test0.c:17
#include <metal/drivers/sifive_test0.h>
#include <metal/io.h>

void __metal_driver_sifive_test0_exit(const struct __metal_shutdown *sd, int code) __attribute__((noreturn));
void __metal_driver_sifive_test0_exit(const struct __metal_shutdown *sd, int code)
{
20404eea:	7179                	addi	sp,sp,-48
20404eec:	d606                	sw	ra,44(sp)
20404eee:	d422                	sw	s0,40(sp)
20404ef0:	1800                	addi	s0,sp,48
20404ef2:	fca42e23          	sw	a0,-36(s0)
20404ef6:	fcb42c23          	sw	a1,-40(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_test0.c:18
    long base = __metal_driver_sifive_test0_base(sd);
20404efa:	fdc42503          	lw	a0,-36(s0)
20404efe:	37d9                	jal	20404ec4 <__metal_driver_sifive_test0_base>
20404f00:	87aa                	mv	a5,a0
20404f02:	fef42623          	sw	a5,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_test0.c:19
    uint32_t out = (code << 16) + (code == 0 ? 0x5555 : 0x3333);
20404f06:	fd842783          	lw	a5,-40(s0)
20404f0a:	01079713          	slli	a4,a5,0x10
20404f0e:	fd842783          	lw	a5,-40(s0)
20404f12:	e789                	bnez	a5,20404f1c <__metal_driver_sifive_test0_exit+0x32>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_test0.c:19 (discriminator 1)
20404f14:	6795                	lui	a5,0x5
20404f16:	55578793          	addi	a5,a5,1365 # 5555 <__heap_size+0x4d55>
20404f1a:	a021                	j	20404f22 <__metal_driver_sifive_test0_exit+0x38>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_test0.c:19 (discriminator 2)
20404f1c:	678d                	lui	a5,0x3
20404f1e:	33378793          	addi	a5,a5,819 # 3333 <__heap_size+0x2b33>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_test0.c:19 (discriminator 4)
20404f22:	97ba                	add	a5,a5,a4
20404f24:	fef42423          	sw	a5,-24(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_test0.c:21 (discriminator 1)
    while (1) {
        __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_TEST0_FINISHER_OFFSET)) = out;
20404f28:	fec42783          	lw	a5,-20(s0)
20404f2c:	fe842703          	lw	a4,-24(s0)
20404f30:	c398                	sw	a4,0(a5)
20404f32:	bfdd                	j	20404f28 <__metal_driver_sifive_test0_exit+0x3e>

20404f34 <__metal_driver_sifive_uart0_control_base>:
__metal_driver_sifive_uart0_control_base():
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:734
{
20404f34:	1101                	addi	sp,sp,-32
20404f36:	ce22                	sw	s0,28(sp)
20404f38:	1000                	addi	s0,sp,32
20404f3a:	fea42623          	sw	a0,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:735
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20404f3e:	fec42703          	lw	a4,-20(s0)
20404f42:	800007b7          	lui	a5,0x80000
20404f46:	74878793          	addi	a5,a5,1864 # 80000748 <metal_segment_heap_target_end+0xfffff2b0>
20404f4a:	00f71563          	bne	a4,a5,20404f54 <__metal_driver_sifive_uart0_control_base+0x20>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:736
		return METAL_SIFIVE_UART0_10013000_BASE_ADDRESS;
20404f4e:	100137b7          	lui	a5,0x10013
20404f52:	a011                	j	20404f56 <__metal_driver_sifive_uart0_control_base+0x22>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:739
		return 0;
20404f54:	4781                	li	a5,0
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:741
}
20404f56:	853e                	mv	a0,a5
20404f58:	4472                	lw	s0,28(sp)
20404f5a:	6105                	addi	sp,sp,32
20404f5c:	8082                	ret

20404f5e <__metal_driver_sifive_uart0_interrupt_parent>:
__metal_driver_sifive_uart0_interrupt_parent():
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:764
{
20404f5e:	1101                	addi	sp,sp,-32
20404f60:	ce22                	sw	s0,28(sp)
20404f62:	1000                	addi	s0,sp,32
20404f64:	fea42623          	sw	a0,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:765
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20404f68:	fec42703          	lw	a4,-20(s0)
20404f6c:	800007b7          	lui	a5,0x80000
20404f70:	74878793          	addi	a5,a5,1864 # 80000748 <metal_segment_heap_target_end+0xfffff2b0>
20404f74:	00f71763          	bne	a4,a5,20404f82 <__metal_driver_sifive_uart0_interrupt_parent+0x24>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:766
		return (struct metal_interrupt *)&__metal_dt_interrupt_controller_c000000.controller;
20404f78:	800007b7          	lui	a5,0x80000
20404f7c:	44878793          	addi	a5,a5,1096 # 80000448 <metal_segment_heap_target_end+0xffffefb0>
20404f80:	a011                	j	20404f84 <__metal_driver_sifive_uart0_interrupt_parent+0x26>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:769
		return 0;
20404f82:	4781                	li	a5,0
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:771
}
20404f84:	853e                	mv	a0,a5
20404f86:	4472                	lw	s0,28(sp)
20404f88:	6105                	addi	sp,sp,32
20404f8a:	8082                	ret

20404f8c <__metal_driver_sifive_uart0_interrupt_line>:
__metal_driver_sifive_uart0_interrupt_line():
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:774
{
20404f8c:	1101                	addi	sp,sp,-32
20404f8e:	ce22                	sw	s0,28(sp)
20404f90:	1000                	addi	s0,sp,32
20404f92:	fea42623          	sw	a0,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:775
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20404f96:	fec42703          	lw	a4,-20(s0)
20404f9a:	800007b7          	lui	a5,0x80000
20404f9e:	74878793          	addi	a5,a5,1864 # 80000748 <metal_segment_heap_target_end+0xfffff2b0>
20404fa2:	00f71463          	bne	a4,a5,20404faa <__metal_driver_sifive_uart0_interrupt_line+0x1e>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:776
		return 5;
20404fa6:	4795                	li	a5,5
20404fa8:	a011                	j	20404fac <__metal_driver_sifive_uart0_interrupt_line+0x20>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:779
		return 0;
20404faa:	4781                	li	a5,0
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:781
}
20404fac:	853e                	mv	a0,a5
20404fae:	4472                	lw	s0,28(sp)
20404fb0:	6105                	addi	sp,sp,32
20404fb2:	8082                	ret

20404fb4 <__metal_driver_sifive_uart0_clock>:
__metal_driver_sifive_uart0_clock():
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:784
{
20404fb4:	1101                	addi	sp,sp,-32
20404fb6:	ce22                	sw	s0,28(sp)
20404fb8:	1000                	addi	s0,sp,32
20404fba:	fea42623          	sw	a0,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:785
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20404fbe:	fec42703          	lw	a4,-20(s0)
20404fc2:	800007b7          	lui	a5,0x80000
20404fc6:	74878793          	addi	a5,a5,1864 # 80000748 <metal_segment_heap_target_end+0xfffff2b0>
20404fca:	00f71763          	bne	a4,a5,20404fd8 <__metal_driver_sifive_uart0_clock+0x24>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:786
		return (struct metal_clock *)&__metal_dt_clock_4.clock;
20404fce:	800007b7          	lui	a5,0x80000
20404fd2:	78078793          	addi	a5,a5,1920 # 80000780 <metal_segment_heap_target_end+0xfffff2e8>
20404fd6:	a011                	j	20404fda <__metal_driver_sifive_uart0_clock+0x26>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:789
		return 0;
20404fd8:	4781                	li	a5,0
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:791
}
20404fda:	853e                	mv	a0,a5
20404fdc:	4472                	lw	s0,28(sp)
20404fde:	6105                	addi	sp,sp,32
20404fe0:	8082                	ret

20404fe2 <__metal_driver_sifive_uart0_pinmux>:
__metal_driver_sifive_uart0_pinmux():
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:794
{
20404fe2:	1101                	addi	sp,sp,-32
20404fe4:	ce22                	sw	s0,28(sp)
20404fe6:	1000                	addi	s0,sp,32
20404fe8:	fea42623          	sw	a0,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:795
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20404fec:	fec42703          	lw	a4,-20(s0)
20404ff0:	800007b7          	lui	a5,0x80000
20404ff4:	74878793          	addi	a5,a5,1864 # 80000748 <metal_segment_heap_target_end+0xfffff2b0>
20404ff8:	00f71563          	bne	a4,a5,20405002 <__metal_driver_sifive_uart0_pinmux+0x20>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:796
		return (struct __metal_driver_sifive_gpio0 *)&__metal_dt_gpio_10012000;
20404ffc:	81818793          	addi	a5,gp,-2024 # 800007a8 <__metal_dt_gpio_10012000>
20405000:	a011                	j	20405004 <__metal_driver_sifive_uart0_pinmux+0x22>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:799
		return 0;
20405002:	4781                	li	a5,0
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:801
}
20405004:	853e                	mv	a0,a5
20405006:	4472                	lw	s0,28(sp)
20405008:	6105                	addi	sp,sp,32
2040500a:	8082                	ret

2040500c <__metal_driver_sifive_uart0_pinmux_output_selector>:
__metal_driver_sifive_uart0_pinmux_output_selector():
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:804
{
2040500c:	1101                	addi	sp,sp,-32
2040500e:	ce22                	sw	s0,28(sp)
20405010:	1000                	addi	s0,sp,32
20405012:	fea42623          	sw	a0,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:805
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20405016:	fec42703          	lw	a4,-20(s0)
2040501a:	800007b7          	lui	a5,0x80000
2040501e:	74878793          	addi	a5,a5,1864 # 80000748 <metal_segment_heap_target_end+0xfffff2b0>
20405022:	00f71563          	bne	a4,a5,2040502c <__metal_driver_sifive_uart0_pinmux_output_selector+0x20>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:806
		return 196608;
20405026:	000307b7          	lui	a5,0x30
2040502a:	a011                	j	2040502e <__metal_driver_sifive_uart0_pinmux_output_selector+0x22>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:809
		return 0;
2040502c:	4781                	li	a5,0
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:811
}
2040502e:	853e                	mv	a0,a5
20405030:	4472                	lw	s0,28(sp)
20405032:	6105                	addi	sp,sp,32
20405034:	8082                	ret

20405036 <__metal_driver_sifive_uart0_pinmux_source_selector>:
__metal_driver_sifive_uart0_pinmux_source_selector():
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:814
{
20405036:	1101                	addi	sp,sp,-32
20405038:	ce22                	sw	s0,28(sp)
2040503a:	1000                	addi	s0,sp,32
2040503c:	fea42623          	sw	a0,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:815
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20405040:	fec42703          	lw	a4,-20(s0)
20405044:	800007b7          	lui	a5,0x80000
20405048:	74878793          	addi	a5,a5,1864 # 80000748 <metal_segment_heap_target_end+0xfffff2b0>
2040504c:	00f71563          	bne	a4,a5,20405056 <__metal_driver_sifive_uart0_pinmux_source_selector+0x20>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:816
		return 196608;
20405050:	000307b7          	lui	a5,0x30
20405054:	a011                	j	20405058 <__metal_driver_sifive_uart0_pinmux_source_selector+0x22>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:819
		return 0;
20405056:	4781                	li	a5,0
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:821
}
20405058:	853e                	mv	a0,a5
2040505a:	4472                	lw	s0,28(sp)
2040505c:	6105                	addi	sp,sp,32
2040505e:	8082                	ret

20405060 <__metal_driver_sifive_uart0_interrupt_controller>:
__metal_driver_sifive_uart0_interrupt_controller():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:32
#define UART_REGB(offset)  (__METAL_ACCESS_ONCE((__metal_io_u8  *)UART_REG(offset)))
#define UART_REGW(offset)  (__METAL_ACCESS_ONCE((__metal_io_u32 *)UART_REG(offset)))

struct metal_interrupt *
__metal_driver_sifive_uart0_interrupt_controller(struct metal_uart *uart)
{
20405060:	1101                	addi	sp,sp,-32
20405062:	ce06                	sw	ra,28(sp)
20405064:	cc22                	sw	s0,24(sp)
20405066:	1000                	addi	s0,sp,32
20405068:	fea42623          	sw	a0,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:33
    return __metal_driver_sifive_uart0_interrupt_parent(uart);
2040506c:	fec42503          	lw	a0,-20(s0)
20405070:	eefff0ef          	jal	ra,20404f5e <__metal_driver_sifive_uart0_interrupt_parent>
20405074:	87aa                	mv	a5,a0
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:34
}
20405076:	853e                	mv	a0,a5
20405078:	40f2                	lw	ra,28(sp)
2040507a:	4462                	lw	s0,24(sp)
2040507c:	6105                	addi	sp,sp,32
2040507e:	8082                	ret

20405080 <__metal_driver_sifive_uart0_get_interrupt_id>:
__metal_driver_sifive_uart0_get_interrupt_id():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:37

int __metal_driver_sifive_uart0_get_interrupt_id(struct metal_uart *uart)
{
20405080:	1101                	addi	sp,sp,-32
20405082:	ce06                	sw	ra,28(sp)
20405084:	cc22                	sw	s0,24(sp)
20405086:	1000                	addi	s0,sp,32
20405088:	fea42623          	sw	a0,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:38
    return (__metal_driver_sifive_uart0_interrupt_line(uart) + METAL_INTERRUPT_ID_GL0);
2040508c:	fec42503          	lw	a0,-20(s0)
20405090:	efdff0ef          	jal	ra,20404f8c <__metal_driver_sifive_uart0_interrupt_line>
20405094:	87aa                	mv	a5,a0
20405096:	02078793          	addi	a5,a5,32 # 30020 <__heap_size+0x2f820>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:39
}
2040509a:	853e                	mv	a0,a5
2040509c:	40f2                	lw	ra,28(sp)
2040509e:	4462                	lw	s0,24(sp)
204050a0:	6105                	addi	sp,sp,32
204050a2:	8082                	ret

204050a4 <__metal_driver_sifive_uart0_txready>:
__metal_driver_sifive_uart0_txready():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:43


int __metal_driver_sifive_uart0_txready(struct metal_uart *uart)
{
204050a4:	7179                	addi	sp,sp,-48
204050a6:	d606                	sw	ra,44(sp)
204050a8:	d422                	sw	s0,40(sp)
204050aa:	1800                	addi	s0,sp,48
204050ac:	fca42e23          	sw	a0,-36(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:44
  long control_base = __metal_driver_sifive_uart0_control_base(uart);
204050b0:	fdc42503          	lw	a0,-36(s0)
204050b4:	e81ff0ef          	jal	ra,20404f34 <__metal_driver_sifive_uart0_control_base>
204050b8:	87aa                	mv	a5,a0
204050ba:	fef42623          	sw	a5,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:46

  return !((UART_REGW(METAL_SIFIVE_UART0_TXDATA) & UART_TXFULL));
204050be:	fec42783          	lw	a5,-20(s0)
204050c2:	439c                	lw	a5,0(a5)
204050c4:	fff7c793          	not	a5,a5
204050c8:	83fd                	srli	a5,a5,0x1f
204050ca:	0ff7f793          	andi	a5,a5,255
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:47
}
204050ce:	853e                	mv	a0,a5
204050d0:	50b2                	lw	ra,44(sp)
204050d2:	5422                	lw	s0,40(sp)
204050d4:	6145                	addi	sp,sp,48
204050d6:	8082                	ret

204050d8 <__metal_driver_sifive_uart0_putc>:
__metal_driver_sifive_uart0_putc():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:51


int __metal_driver_sifive_uart0_putc(struct metal_uart *uart, int c)
{
204050d8:	7179                	addi	sp,sp,-48
204050da:	d606                	sw	ra,44(sp)
204050dc:	d422                	sw	s0,40(sp)
204050de:	1800                	addi	s0,sp,48
204050e0:	fca42e23          	sw	a0,-36(s0)
204050e4:	fcb42c23          	sw	a1,-40(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:52
    long control_base = __metal_driver_sifive_uart0_control_base(uart);
204050e8:	fdc42503          	lw	a0,-36(s0)
204050ec:	e49ff0ef          	jal	ra,20404f34 <__metal_driver_sifive_uart0_control_base>
204050f0:	87aa                	mv	a5,a0
204050f2:	fef42623          	sw	a5,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:54

    while (!__metal_driver_sifive_uart0_txready(uart)) {
204050f6:	0001                	nop
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:54 (discriminator 1)
204050f8:	fdc42503          	lw	a0,-36(s0)
204050fc:	3765                	jal	204050a4 <__metal_driver_sifive_uart0_txready>
204050fe:	87aa                	mv	a5,a0
20405100:	dfe5                	beqz	a5,204050f8 <__metal_driver_sifive_uart0_putc+0x20>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:57
		/* wait */
    }
    UART_REGW(METAL_SIFIVE_UART0_TXDATA) = c;
20405102:	fec42783          	lw	a5,-20(s0)
20405106:	fd842703          	lw	a4,-40(s0)
2040510a:	c398                	sw	a4,0(a5)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:58
    return 0;
2040510c:	4781                	li	a5,0
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:59
}
2040510e:	853e                	mv	a0,a5
20405110:	50b2                	lw	ra,44(sp)
20405112:	5422                	lw	s0,40(sp)
20405114:	6145                	addi	sp,sp,48
20405116:	8082                	ret

20405118 <__metal_driver_sifive_uart0_getc>:
__metal_driver_sifive_uart0_getc():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:63


int __metal_driver_sifive_uart0_getc(struct metal_uart *uart, int *c)
{
20405118:	7179                	addi	sp,sp,-48
2040511a:	d606                	sw	ra,44(sp)
2040511c:	d422                	sw	s0,40(sp)
2040511e:	1800                	addi	s0,sp,48
20405120:	fca42e23          	sw	a0,-36(s0)
20405124:	fcb42c23          	sw	a1,-40(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:65
    uint32_t ch;
    long control_base = __metal_driver_sifive_uart0_control_base(uart);
20405128:	fdc42503          	lw	a0,-36(s0)
2040512c:	e09ff0ef          	jal	ra,20404f34 <__metal_driver_sifive_uart0_control_base>
20405130:	87aa                	mv	a5,a0
20405132:	fef42623          	sw	a5,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:67
    /* No seperate status register, we get status and the byte at same time */
    ch = UART_REGW(METAL_SIFIVE_UART0_RXDATA);;
20405136:	fec42783          	lw	a5,-20(s0)
2040513a:	0791                	addi	a5,a5,4
2040513c:	439c                	lw	a5,0(a5)
2040513e:	fef42423          	sw	a5,-24(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:68
    if( ch & UART_RXEMPTY ){
20405142:	fe842783          	lw	a5,-24(s0)
20405146:	0007d763          	bgez	a5,20405154 <__metal_driver_sifive_uart0_getc+0x3c>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:69
      *c = -1; /* aka: EOF in most of the world */
2040514a:	fd842783          	lw	a5,-40(s0)
2040514e:	577d                	li	a4,-1
20405150:	c398                	sw	a4,0(a5)
20405152:	a801                	j	20405162 <__metal_driver_sifive_uart0_getc+0x4a>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:71
    } else {
      *c = ch & 0x0ff;
20405154:	fe842783          	lw	a5,-24(s0)
20405158:	0ff7f713          	andi	a4,a5,255
2040515c:	fd842783          	lw	a5,-40(s0)
20405160:	c398                	sw	a4,0(a5)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:73
    }
    return 0;
20405162:	4781                	li	a5,0
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:74
}
20405164:	853e                	mv	a0,a5
20405166:	50b2                	lw	ra,44(sp)
20405168:	5422                	lw	s0,40(sp)
2040516a:	6145                	addi	sp,sp,48
2040516c:	8082                	ret

2040516e <__metal_driver_sifive_uart0_get_baud_rate>:
__metal_driver_sifive_uart0_get_baud_rate():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:78


int __metal_driver_sifive_uart0_get_baud_rate(struct metal_uart *guart)
{
2040516e:	7179                	addi	sp,sp,-48
20405170:	d622                	sw	s0,44(sp)
20405172:	1800                	addi	s0,sp,48
20405174:	fca42e23          	sw	a0,-36(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:79
    struct __metal_driver_sifive_uart0 *uart = (void *)guart;
20405178:	fdc42783          	lw	a5,-36(s0)
2040517c:	fef42623          	sw	a5,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:80
    return uart->baud_rate;
20405180:	fec42783          	lw	a5,-20(s0)
20405184:	43dc                	lw	a5,4(a5)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:81
}
20405186:	853e                	mv	a0,a5
20405188:	5432                	lw	s0,44(sp)
2040518a:	6145                	addi	sp,sp,48
2040518c:	8082                	ret

2040518e <__metal_driver_sifive_uart0_set_baud_rate>:
__metal_driver_sifive_uart0_set_baud_rate():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:84

int __metal_driver_sifive_uart0_set_baud_rate(struct metal_uart *guart, int baud_rate)
{
2040518e:	7179                	addi	sp,sp,-48
20405190:	d606                	sw	ra,44(sp)
20405192:	d422                	sw	s0,40(sp)
20405194:	1800                	addi	s0,sp,48
20405196:	fca42e23          	sw	a0,-36(s0)
2040519a:	fcb42c23          	sw	a1,-40(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:85
    struct __metal_driver_sifive_uart0 *uart = (void *)guart;
2040519e:	fdc42783          	lw	a5,-36(s0)
204051a2:	fef42623          	sw	a5,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:86
    long control_base = __metal_driver_sifive_uart0_control_base(guart);
204051a6:	fdc42503          	lw	a0,-36(s0)
204051aa:	d8bff0ef          	jal	ra,20404f34 <__metal_driver_sifive_uart0_control_base>
204051ae:	87aa                	mv	a5,a0
204051b0:	fef42423          	sw	a5,-24(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:87
    struct metal_clock *clock = __metal_driver_sifive_uart0_clock(guart);
204051b4:	fdc42503          	lw	a0,-36(s0)
204051b8:	dfdff0ef          	jal	ra,20404fb4 <__metal_driver_sifive_uart0_clock>
204051bc:	fea42223          	sw	a0,-28(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:89

    uart->baud_rate = baud_rate;
204051c0:	fd842703          	lw	a4,-40(s0)
204051c4:	fec42783          	lw	a5,-20(s0)
204051c8:	c3d8                	sw	a4,4(a5)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:91

    if (clock != NULL) {
204051ca:	fe442783          	lw	a5,-28(s0)
204051ce:	cbb1                	beqz	a5,20405222 <__metal_driver_sifive_uart0_set_baud_rate+0x94>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:92
        long clock_rate = clock->vtable->get_rate_hz(clock);
204051d0:	fe442783          	lw	a5,-28(s0)
204051d4:	439c                	lw	a5,0(a5)
204051d6:	439c                	lw	a5,0(a5)
204051d8:	fe442503          	lw	a0,-28(s0)
204051dc:	9782                	jalr	a5
204051de:	fea42023          	sw	a0,-32(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:93
        UART_REGW(METAL_SIFIVE_UART0_DIV) = clock_rate / baud_rate - 1;
204051e2:	fe042703          	lw	a4,-32(s0)
204051e6:	fd842783          	lw	a5,-40(s0)
204051ea:	02f747b3          	div	a5,a4,a5
204051ee:	fff78713          	addi	a4,a5,-1
204051f2:	fe842783          	lw	a5,-24(s0)
204051f6:	07e1                	addi	a5,a5,24
204051f8:	c398                	sw	a4,0(a5)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:94
        UART_REGW(METAL_SIFIVE_UART0_TXCTRL) |= UART_TXEN;
204051fa:	fe842783          	lw	a5,-24(s0)
204051fe:	07a1                	addi	a5,a5,8
20405200:	439c                	lw	a5,0(a5)
20405202:	fe842703          	lw	a4,-24(s0)
20405206:	0721                	addi	a4,a4,8
20405208:	0017e793          	ori	a5,a5,1
2040520c:	c31c                	sw	a5,0(a4)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:95
        UART_REGW(METAL_SIFIVE_UART0_RXCTRL) |= UART_RXEN;
2040520e:	fe842783          	lw	a5,-24(s0)
20405212:	07b1                	addi	a5,a5,12
20405214:	439c                	lw	a5,0(a5)
20405216:	fe842703          	lw	a4,-24(s0)
2040521a:	0731                	addi	a4,a4,12
2040521c:	0017e793          	ori	a5,a5,1
20405220:	c31c                	sw	a5,0(a4)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:97
    }
    return 0;
20405222:	4781                	li	a5,0
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:98
}
20405224:	853e                	mv	a0,a5
20405226:	50b2                	lw	ra,44(sp)
20405228:	5422                	lw	s0,40(sp)
2040522a:	6145                	addi	sp,sp,48
2040522c:	8082                	ret

2040522e <pre_rate_change_callback_func>:
pre_rate_change_callback_func():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:101

static void pre_rate_change_callback_func(void *priv)
{
2040522e:	7139                	addi	sp,sp,-64
20405230:	de06                	sw	ra,60(sp)
20405232:	dc22                	sw	s0,56(sp)
20405234:	0080                	addi	s0,sp,64
20405236:	fca42623          	sw	a0,-52(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:102
    struct __metal_driver_sifive_uart0 *uart = priv;
2040523a:	fcc42783          	lw	a5,-52(s0)
2040523e:	fef42623          	sw	a5,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:103
    long control_base = __metal_driver_sifive_uart0_control_base((struct metal_uart *)priv);
20405242:	fcc42503          	lw	a0,-52(s0)
20405246:	cefff0ef          	jal	ra,20404f34 <__metal_driver_sifive_uart0_control_base>
2040524a:	87aa                	mv	a5,a0
2040524c:	fef42423          	sw	a5,-24(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:104
    struct metal_clock *clock = __metal_driver_sifive_uart0_clock((struct metal_uart *)priv);
20405250:	fcc42503          	lw	a0,-52(s0)
20405254:	d61ff0ef          	jal	ra,20404fb4 <__metal_driver_sifive_uart0_clock>
20405258:	fea42223          	sw	a0,-28(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:109

    /* Detect when the TXDATA is empty by setting the transmit watermark count
     * to one and waiting until an interrupt is pending */

    UART_REGW(METAL_SIFIVE_UART0_TXCTRL) &= ~(UART_TXCNT(0x7));
2040525c:	fe842783          	lw	a5,-24(s0)
20405260:	07a1                	addi	a5,a5,8
20405262:	4398                	lw	a4,0(a5)
20405264:	fe842783          	lw	a5,-24(s0)
20405268:	07a1                	addi	a5,a5,8
2040526a:	86be                	mv	a3,a5
2040526c:	fff907b7          	lui	a5,0xfff90
20405270:	17fd                	addi	a5,a5,-1
20405272:	8ff9                	and	a5,a5,a4
20405274:	c29c                	sw	a5,0(a3)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:110
    UART_REGW(METAL_SIFIVE_UART0_TXCTRL) |= UART_TXCNT(1);
20405276:	fe842783          	lw	a5,-24(s0)
2040527a:	07a1                	addi	a5,a5,8
2040527c:	4398                	lw	a4,0(a5)
2040527e:	fe842783          	lw	a5,-24(s0)
20405282:	07a1                	addi	a5,a5,8
20405284:	86be                	mv	a3,a5
20405286:	67c1                	lui	a5,0x10
20405288:	8fd9                	or	a5,a5,a4
2040528a:	c29c                	sw	a5,0(a3)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:112

    while((UART_REGW(METAL_SIFIVE_UART0_IP) & UART_TXWM) == 0) ;
2040528c:	0001                	nop
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:112 (discriminator 1)
2040528e:	fe842783          	lw	a5,-24(s0)
20405292:	07d1                	addi	a5,a5,20
20405294:	439c                	lw	a5,0(a5)
20405296:	8b85                	andi	a5,a5,1
20405298:	dbfd                	beqz	a5,2040528e <pre_rate_change_callback_func+0x60>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:118

    /* When the TXDATA clears, the UART is still shifting out the last byte.
     * Calculate the time we must drain to finish transmitting and then wait
     * that long. */

    long bits_per_symbol = (UART_REGW(METAL_SIFIVE_UART0_TXCTRL) & (1 << 1)) ? 9 : 10;
2040529a:	fe842783          	lw	a5,-24(s0)
2040529e:	07a1                	addi	a5,a5,8
204052a0:	439c                	lw	a5,0(a5)
204052a2:	8b89                	andi	a5,a5,2
204052a4:	c399                	beqz	a5,204052aa <pre_rate_change_callback_func+0x7c>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:118 (discriminator 1)
204052a6:	47a5                	li	a5,9
204052a8:	a011                	j	204052ac <pre_rate_change_callback_func+0x7e>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:118 (discriminator 2)
204052aa:	47a9                	li	a5,10
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:118 (discriminator 4)
204052ac:	fef42023          	sw	a5,-32(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:119 (discriminator 4)
    long clk_freq = clock->vtable->get_rate_hz(clock);
204052b0:	fe442783          	lw	a5,-28(s0)
204052b4:	439c                	lw	a5,0(a5)
204052b6:	439c                	lw	a5,0(a5)
204052b8:	fe442503          	lw	a0,-28(s0)
204052bc:	9782                	jalr	a5
204052be:	fca42e23          	sw	a0,-36(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:120 (discriminator 4)
    long cycles_to_wait = bits_per_symbol * clk_freq / uart->baud_rate;
204052c2:	fe042703          	lw	a4,-32(s0)
204052c6:	fdc42783          	lw	a5,-36(s0)
204052ca:	02f707b3          	mul	a5,a4,a5
204052ce:	873e                	mv	a4,a5
204052d0:	fec42783          	lw	a5,-20(s0)
204052d4:	43dc                	lw	a5,4(a5)
204052d6:	02f757b3          	divu	a5,a4,a5
204052da:	fcf42c23          	sw	a5,-40(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:122 (discriminator 4)

    for(volatile long x = 0; x < cycles_to_wait; x++)
204052de:	fc042a23          	sw	zero,-44(s0)
204052e2:	a039                	j	204052f0 <pre_rate_change_callback_func+0xc2>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:123 (discriminator 3)
        __asm__("nop");
204052e4:	0001                	nop
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:122 (discriminator 3)
    for(volatile long x = 0; x < cycles_to_wait; x++)
204052e6:	fd442783          	lw	a5,-44(s0)
204052ea:	0785                	addi	a5,a5,1
204052ec:	fcf42a23          	sw	a5,-44(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:122 (discriminator 1)
204052f0:	fd442783          	lw	a5,-44(s0)
204052f4:	fd842703          	lw	a4,-40(s0)
204052f8:	fee7c6e3          	blt	a5,a4,204052e4 <pre_rate_change_callback_func+0xb6>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:124
}
204052fc:	0001                	nop
204052fe:	50f2                	lw	ra,60(sp)
20405300:	5462                	lw	s0,56(sp)
20405302:	6121                	addi	sp,sp,64
20405304:	8082                	ret

20405306 <post_rate_change_callback_func>:
post_rate_change_callback_func():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:127

static void post_rate_change_callback_func(void *priv)
{
20405306:	7179                	addi	sp,sp,-48
20405308:	d606                	sw	ra,44(sp)
2040530a:	d422                	sw	s0,40(sp)
2040530c:	1800                	addi	s0,sp,48
2040530e:	fca42e23          	sw	a0,-36(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:128
    struct __metal_driver_sifive_uart0 *uart = priv;
20405312:	fdc42783          	lw	a5,-36(s0)
20405316:	fef42623          	sw	a5,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:129
    metal_uart_set_baud_rate(&uart->uart, uart->baud_rate);
2040531a:	fec42703          	lw	a4,-20(s0)
2040531e:	fec42783          	lw	a5,-20(s0)
20405322:	43dc                	lw	a5,4(a5)
20405324:	85be                	mv	a1,a5
20405326:	853a                	mv	a0,a4
20405328:	2109                	jal	2040572a <metal_uart_set_baud_rate>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:130
}
2040532a:	0001                	nop
2040532c:	50b2                	lw	ra,44(sp)
2040532e:	5422                	lw	s0,40(sp)
20405330:	6145                	addi	sp,sp,48
20405332:	8082                	ret

20405334 <__metal_driver_sifive_uart0_init>:
__metal_driver_sifive_uart0_init():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:133

void __metal_driver_sifive_uart0_init(struct metal_uart *guart, int baud_rate)
{
20405334:	7139                	addi	sp,sp,-64
20405336:	de06                	sw	ra,60(sp)
20405338:	dc22                	sw	s0,56(sp)
2040533a:	0080                	addi	s0,sp,64
2040533c:	fca42623          	sw	a0,-52(s0)
20405340:	fcb42423          	sw	a1,-56(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:134
    struct __metal_driver_sifive_uart0 *uart = (void *)(guart);
20405344:	fcc42783          	lw	a5,-52(s0)
20405348:	fef42623          	sw	a5,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:135
    struct metal_clock *clock = __metal_driver_sifive_uart0_clock(guart);
2040534c:	fcc42503          	lw	a0,-52(s0)
20405350:	c65ff0ef          	jal	ra,20404fb4 <__metal_driver_sifive_uart0_clock>
20405354:	fea42423          	sw	a0,-24(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:136
    struct __metal_driver_sifive_gpio0 *pinmux = __metal_driver_sifive_uart0_pinmux(guart);
20405358:	fcc42503          	lw	a0,-52(s0)
2040535c:	c87ff0ef          	jal	ra,20404fe2 <__metal_driver_sifive_uart0_pinmux>
20405360:	fea42223          	sw	a0,-28(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:138

    if(clock != NULL) {
20405364:	fe842783          	lw	a5,-24(s0)
20405368:	c7b9                	beqz	a5,204053b6 <__metal_driver_sifive_uart0_init+0x82>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:139
        uart->pre_rate_change_callback.callback = &pre_rate_change_callback_func;
2040536a:	fec42783          	lw	a5,-20(s0)
2040536e:	20405737          	lui	a4,0x20405
20405372:	22e70713          	addi	a4,a4,558 # 2040522e <pre_rate_change_callback_func>
20405376:	c798                	sw	a4,8(a5)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:140
        uart->pre_rate_change_callback.priv = guart;
20405378:	fec42783          	lw	a5,-20(s0)
2040537c:	fcc42703          	lw	a4,-52(s0)
20405380:	c7d8                	sw	a4,12(a5)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:141
        metal_clock_register_pre_rate_change_callback(clock, &(uart->pre_rate_change_callback));
20405382:	fec42783          	lw	a5,-20(s0)
20405386:	07a1                	addi	a5,a5,8
20405388:	85be                	mv	a1,a5
2040538a:	fe842503          	lw	a0,-24(s0)
2040538e:	2ab5                	jal	2040550a <metal_clock_register_pre_rate_change_callback>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:143

        uart->post_rate_change_callback.callback = &post_rate_change_callback_func;
20405390:	fec42783          	lw	a5,-20(s0)
20405394:	20405737          	lui	a4,0x20405
20405398:	30670713          	addi	a4,a4,774 # 20405306 <post_rate_change_callback_func>
2040539c:	cbd8                	sw	a4,20(a5)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:144
        uart->post_rate_change_callback.priv = guart;
2040539e:	fec42783          	lw	a5,-20(s0)
204053a2:	fcc42703          	lw	a4,-52(s0)
204053a6:	cf98                	sw	a4,24(a5)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:145
        metal_clock_register_post_rate_change_callback(clock, &(uart->post_rate_change_callback));
204053a8:	fec42783          	lw	a5,-20(s0)
204053ac:	07d1                	addi	a5,a5,20
204053ae:	85be                	mv	a1,a5
204053b0:	fe842503          	lw	a0,-24(s0)
204053b4:	2261                	jal	2040553c <metal_clock_register_post_rate_change_callback>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:148
    }

    metal_uart_set_baud_rate(&(uart->uart), baud_rate);
204053b6:	fec42783          	lw	a5,-20(s0)
204053ba:	fc842583          	lw	a1,-56(s0)
204053be:	853e                	mv	a0,a5
204053c0:	26ad                	jal	2040572a <metal_uart_set_baud_rate>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:150

    if (pinmux != NULL) {
204053c2:	fe442783          	lw	a5,-28(s0)
204053c6:	cb95                	beqz	a5,204053fa <__metal_driver_sifive_uart0_init+0xc6>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:151
        long pinmux_output_selector = __metal_driver_sifive_uart0_pinmux_output_selector(guart);
204053c8:	fcc42503          	lw	a0,-52(s0)
204053cc:	c41ff0ef          	jal	ra,2040500c <__metal_driver_sifive_uart0_pinmux_output_selector>
204053d0:	87aa                	mv	a5,a0
204053d2:	fef42023          	sw	a5,-32(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:152
        long pinmux_source_selector = __metal_driver_sifive_uart0_pinmux_source_selector(guart);
204053d6:	fcc42503          	lw	a0,-52(s0)
204053da:	c5dff0ef          	jal	ra,20405036 <__metal_driver_sifive_uart0_pinmux_source_selector>
204053de:	87aa                	mv	a5,a0
204053e0:	fcf42e23          	sw	a5,-36(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:153
        pinmux->gpio.vtable->enable_io(
204053e4:	fe442783          	lw	a5,-28(s0)
204053e8:	439c                	lw	a5,0(a5)
204053ea:	53dc                	lw	a5,36(a5)
204053ec:	fdc42603          	lw	a2,-36(s0)
204053f0:	fe042583          	lw	a1,-32(s0)
204053f4:	fe442503          	lw	a0,-28(s0)
204053f8:	9782                	jalr	a5
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:159
            (struct metal_gpio *) pinmux,
            pinmux_output_selector,
            pinmux_source_selector
        );
    }
}
204053fa:	0001                	nop
204053fc:	50f2                	lw	ra,60(sp)
204053fe:	5462                	lw	s0,56(sp)
20405400:	6121                	addi	sp,sp,64
20405402:	8082                	ret

20405404 <_metal_clock_call_all_callbacks>:
_metal_clock_call_all_callbacks():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/metal/clock.h:48
typedef struct _metal_clock_callback_t metal_clock_callback;

/*!
 * @brief Call all callbacks in the linked list, if any are registered
 */
__inline__ void _metal_clock_call_all_callbacks(const metal_clock_callback *const list) {
20405404:	7179                	addi	sp,sp,-48
20405406:	d606                	sw	ra,44(sp)
20405408:	d422                	sw	s0,40(sp)
2040540a:	1800                	addi	s0,sp,48
2040540c:	fca42e23          	sw	a0,-36(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/metal/clock.h:49
    const metal_clock_callback *current = list;
20405410:	fdc42783          	lw	a5,-36(s0)
20405414:	fef42623          	sw	a5,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/metal/clock.h:50
    while (current) {
20405418:	a831                	j	20405434 <_metal_clock_call_all_callbacks+0x30>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/metal/clock.h:51
        current->callback(current->priv);
2040541a:	fec42783          	lw	a5,-20(s0)
2040541e:	4398                	lw	a4,0(a5)
20405420:	fec42783          	lw	a5,-20(s0)
20405424:	43dc                	lw	a5,4(a5)
20405426:	853e                	mv	a0,a5
20405428:	9702                	jalr	a4
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/metal/clock.h:52
        current = current->_next;
2040542a:	fec42783          	lw	a5,-20(s0)
2040542e:	479c                	lw	a5,8(a5)
20405430:	fef42623          	sw	a5,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/metal/clock.h:50
    while (current) {
20405434:	fec42783          	lw	a5,-20(s0)
20405438:	f3ed                	bnez	a5,2040541a <_metal_clock_call_all_callbacks+0x16>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/metal/clock.h:54
    }
}
2040543a:	0001                	nop
2040543c:	50b2                	lw	ra,44(sp)
2040543e:	5422                	lw	s0,40(sp)
20405440:	6145                	addi	sp,sp,48
20405442:	8082                	ret

20405444 <_metal_clock_append_to_callbacks>:
_metal_clock_append_to_callbacks():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/metal/clock.h:59

/*!
 * @brief Append a callback to the linked list and return the head of the list
 */
__inline__ metal_clock_callback *_metal_clock_append_to_callbacks(metal_clock_callback *list, metal_clock_callback *const cb) {
20405444:	7179                	addi	sp,sp,-48
20405446:	d622                	sw	s0,44(sp)
20405448:	1800                	addi	s0,sp,48
2040544a:	fca42e23          	sw	a0,-36(s0)
2040544e:	fcb42c23          	sw	a1,-40(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/metal/clock.h:60
    cb->_next = NULL;
20405452:	fd842783          	lw	a5,-40(s0)
20405456:	0007a423          	sw	zero,8(a5) # 10008 <__heap_size+0xf808>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/metal/clock.h:62

    if (!list) {
2040545a:	fdc42783          	lw	a5,-36(s0)
2040545e:	e781                	bnez	a5,20405466 <_metal_clock_append_to_callbacks+0x22>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/metal/clock.h:63
        return cb;
20405460:	fd842783          	lw	a5,-40(s0)
20405464:	a035                	j	20405490 <_metal_clock_append_to_callbacks+0x4c>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/metal/clock.h:66
    }

    metal_clock_callback *current = list;
20405466:	fdc42783          	lw	a5,-36(s0)
2040546a:	fef42623          	sw	a5,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/metal/clock.h:68

    while ((current->_next) != NULL) {
2040546e:	a031                	j	2040547a <_metal_clock_append_to_callbacks+0x36>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/metal/clock.h:69
        current = current->_next;
20405470:	fec42783          	lw	a5,-20(s0)
20405474:	479c                	lw	a5,8(a5)
20405476:	fef42623          	sw	a5,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/metal/clock.h:68
    while ((current->_next) != NULL) {
2040547a:	fec42783          	lw	a5,-20(s0)
2040547e:	479c                	lw	a5,8(a5)
20405480:	fbe5                	bnez	a5,20405470 <_metal_clock_append_to_callbacks+0x2c>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/metal/clock.h:72
    }

    current->_next = cb;
20405482:	fec42783          	lw	a5,-20(s0)
20405486:	fd842703          	lw	a4,-40(s0)
2040548a:	c798                	sw	a4,8(a5)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/metal/clock.h:74

    return list;
2040548c:	fdc42783          	lw	a5,-36(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/metal/clock.h:75
}
20405490:	853e                	mv	a0,a5
20405492:	5432                	lw	s0,44(sp)
20405494:	6145                	addi	sp,sp,48
20405496:	8082                	ret

20405498 <metal_clock_get_rate_hz>:
metal_clock_get_rate_hz():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/metal/clock.h:105
 * @brief Returns the current rate of the given clock
 *
 * @param clk The handle for the clock
 * @return The current rate of the clock in Hz
 */
__inline__ long metal_clock_get_rate_hz(const struct metal_clock *clk) { return clk->vtable->get_rate_hz(clk); }
20405498:	1101                	addi	sp,sp,-32
2040549a:	ce06                	sw	ra,28(sp)
2040549c:	cc22                	sw	s0,24(sp)
2040549e:	1000                	addi	s0,sp,32
204054a0:	fea42623          	sw	a0,-20(s0)
204054a4:	fec42783          	lw	a5,-20(s0)
204054a8:	439c                	lw	a5,0(a5)
204054aa:	439c                	lw	a5,0(a5)
204054ac:	fec42503          	lw	a0,-20(s0)
204054b0:	9782                	jalr	a5
204054b2:	87aa                	mv	a5,a0
204054b4:	853e                	mv	a0,a5
204054b6:	40f2                	lw	ra,28(sp)
204054b8:	4462                	lw	s0,24(sp)
204054ba:	6105                	addi	sp,sp,32
204054bc:	8082                	ret

204054be <metal_clock_set_rate_hz>:
metal_clock_set_rate_hz():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/metal/clock.h:122
 *
 * Prior to and after the rate change of the clock, this will call the registered
 * pre- and post-rate change callbacks.
 */
__inline__ long metal_clock_set_rate_hz(struct metal_clock *clk, long hz)
{
204054be:	7179                	addi	sp,sp,-48
204054c0:	d606                	sw	ra,44(sp)
204054c2:	d422                	sw	s0,40(sp)
204054c4:	1800                	addi	s0,sp,48
204054c6:	fca42e23          	sw	a0,-36(s0)
204054ca:	fcb42c23          	sw	a1,-40(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/metal/clock.h:123
    _metal_clock_call_all_callbacks(clk->_pre_rate_change_callback);
204054ce:	fdc42783          	lw	a5,-36(s0)
204054d2:	43dc                	lw	a5,4(a5)
204054d4:	853e                	mv	a0,a5
204054d6:	f2fff0ef          	jal	ra,20405404 <_metal_clock_call_all_callbacks>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/metal/clock.h:125

    long out = clk->vtable->set_rate_hz(clk, hz);
204054da:	fdc42783          	lw	a5,-36(s0)
204054de:	439c                	lw	a5,0(a5)
204054e0:	43dc                	lw	a5,4(a5)
204054e2:	fd842583          	lw	a1,-40(s0)
204054e6:	fdc42503          	lw	a0,-36(s0)
204054ea:	9782                	jalr	a5
204054ec:	fea42623          	sw	a0,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/metal/clock.h:127

    _metal_clock_call_all_callbacks(clk->_post_rate_change_callback);
204054f0:	fdc42783          	lw	a5,-36(s0)
204054f4:	479c                	lw	a5,8(a5)
204054f6:	853e                	mv	a0,a5
204054f8:	f0dff0ef          	jal	ra,20405404 <_metal_clock_call_all_callbacks>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/metal/clock.h:129

    return out;
204054fc:	fec42783          	lw	a5,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/metal/clock.h:130
}
20405500:	853e                	mv	a0,a5
20405502:	50b2                	lw	ra,44(sp)
20405504:	5422                	lw	s0,40(sp)
20405506:	6145                	addi	sp,sp,48
20405508:	8082                	ret

2040550a <metal_clock_register_pre_rate_change_callback>:
metal_clock_register_pre_rate_change_callback():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/metal/clock.h:139
 *
 * @param clk The handle for the clock
 * @param cb The callback to be registered
 */
__inline__ void metal_clock_register_pre_rate_change_callback(struct metal_clock *clk, metal_clock_callback *cb)
{
2040550a:	1101                	addi	sp,sp,-32
2040550c:	ce06                	sw	ra,28(sp)
2040550e:	cc22                	sw	s0,24(sp)
20405510:	1000                	addi	s0,sp,32
20405512:	fea42623          	sw	a0,-20(s0)
20405516:	feb42423          	sw	a1,-24(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/metal/clock.h:140
    clk->_pre_rate_change_callback = _metal_clock_append_to_callbacks(clk->_pre_rate_change_callback, cb);
2040551a:	fec42783          	lw	a5,-20(s0)
2040551e:	43dc                	lw	a5,4(a5)
20405520:	fe842583          	lw	a1,-24(s0)
20405524:	853e                	mv	a0,a5
20405526:	f1fff0ef          	jal	ra,20405444 <_metal_clock_append_to_callbacks>
2040552a:	872a                	mv	a4,a0
2040552c:	fec42783          	lw	a5,-20(s0)
20405530:	c3d8                	sw	a4,4(a5)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/metal/clock.h:141
}
20405532:	0001                	nop
20405534:	40f2                	lw	ra,28(sp)
20405536:	4462                	lw	s0,24(sp)
20405538:	6105                	addi	sp,sp,32
2040553a:	8082                	ret

2040553c <metal_clock_register_post_rate_change_callback>:
metal_clock_register_post_rate_change_callback():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/metal/clock.h:150
 *
 * @param clk The handle for the clock
 * @param cb The callback to be registered
 */
__inline__ void metal_clock_register_post_rate_change_callback(struct metal_clock *clk, metal_clock_callback *cb)
{
2040553c:	1101                	addi	sp,sp,-32
2040553e:	ce06                	sw	ra,28(sp)
20405540:	cc22                	sw	s0,24(sp)
20405542:	1000                	addi	s0,sp,32
20405544:	fea42623          	sw	a0,-20(s0)
20405548:	feb42423          	sw	a1,-24(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/metal/clock.h:151
    clk->_post_rate_change_callback = _metal_clock_append_to_callbacks(clk->_post_rate_change_callback, cb);
2040554c:	fec42783          	lw	a5,-20(s0)
20405550:	479c                	lw	a5,8(a5)
20405552:	fe842583          	lw	a1,-24(s0)
20405556:	853e                	mv	a0,a5
20405558:	eedff0ef          	jal	ra,20405444 <_metal_clock_append_to_callbacks>
2040555c:	872a                	mv	a4,a0
2040555e:	fec42783          	lw	a5,-20(s0)
20405562:	c798                	sw	a4,8(a5)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/metal/clock.h:152
}
20405564:	0001                	nop
20405566:	40f2                	lw	ra,28(sp)
20405568:	4462                	lw	s0,24(sp)
2040556a:	6105                	addi	sp,sp,32
2040556c:	8082                	ret

2040556e <metal_gpio_disable_input>:
metal_gpio_disable_input():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/metal/gpio.h:79
 * @brief Disable input on a pin
 * @param gpio The handle for the GPIO interface
 * @param pin The pin number indexed from 0
 * @return 0 if the input is successfully disabled
 */
__inline__ int metal_gpio_disable_input(struct metal_gpio *gpio, int pin) {
2040556e:	1101                	addi	sp,sp,-32
20405570:	ce06                	sw	ra,28(sp)
20405572:	cc22                	sw	s0,24(sp)
20405574:	1000                	addi	s0,sp,32
20405576:	fea42623          	sw	a0,-20(s0)
2040557a:	feb42423          	sw	a1,-24(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/metal/gpio.h:80
    if(!gpio) {
2040557e:	fec42783          	lw	a5,-20(s0)
20405582:	e399                	bnez	a5,20405588 <metal_gpio_disable_input+0x1a>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/metal/gpio.h:81
	return 1;
20405584:	4785                	li	a5,1
20405586:	a839                	j	204055a4 <metal_gpio_disable_input+0x36>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/metal/gpio.h:84
    }

    return gpio->vtable->disable_input(gpio, (1 << pin));
20405588:	fec42783          	lw	a5,-20(s0)
2040558c:	439c                	lw	a5,0(a5)
2040558e:	4394                	lw	a3,0(a5)
20405590:	fe842783          	lw	a5,-24(s0)
20405594:	4705                	li	a4,1
20405596:	00f717b3          	sll	a5,a4,a5
2040559a:	85be                	mv	a1,a5
2040559c:	fec42503          	lw	a0,-20(s0)
204055a0:	9682                	jalr	a3
204055a2:	87aa                	mv	a5,a0
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/metal/gpio.h:85
}
204055a4:	853e                	mv	a0,a5
204055a6:	40f2                	lw	ra,28(sp)
204055a8:	4462                	lw	s0,24(sp)
204055aa:	6105                	addi	sp,sp,32
204055ac:	8082                	ret

204055ae <metal_gpio_enable_output>:
metal_gpio_enable_output():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/metal/gpio.h:93
 * @brief Enable output on a pin
 * @param gpio The handle for the GPIO interface
 * @param pin The pin number indexed from 0
 * @return 0 if the output is successfully enabled
 */
__inline__ int metal_gpio_enable_output(struct metal_gpio *gpio, int pin) {
204055ae:	1101                	addi	sp,sp,-32
204055b0:	ce06                	sw	ra,28(sp)
204055b2:	cc22                	sw	s0,24(sp)
204055b4:	1000                	addi	s0,sp,32
204055b6:	fea42623          	sw	a0,-20(s0)
204055ba:	feb42423          	sw	a1,-24(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/metal/gpio.h:94
    if(!gpio) {
204055be:	fec42783          	lw	a5,-20(s0)
204055c2:	e399                	bnez	a5,204055c8 <metal_gpio_enable_output+0x1a>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/metal/gpio.h:95
	return 1;
204055c4:	4785                	li	a5,1
204055c6:	a839                	j	204055e4 <metal_gpio_enable_output+0x36>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/metal/gpio.h:98
    }

    return gpio->vtable->enable_output(gpio, (1 << pin));
204055c8:	fec42783          	lw	a5,-20(s0)
204055cc:	439c                	lw	a5,0(a5)
204055ce:	4bd4                	lw	a3,20(a5)
204055d0:	fe842783          	lw	a5,-24(s0)
204055d4:	4705                	li	a4,1
204055d6:	00f717b3          	sll	a5,a4,a5
204055da:	85be                	mv	a1,a5
204055dc:	fec42503          	lw	a0,-20(s0)
204055e0:	9682                	jalr	a3
204055e2:	87aa                	mv	a5,a0
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/metal/gpio.h:99
}
204055e4:	853e                	mv	a0,a5
204055e6:	40f2                	lw	ra,28(sp)
204055e8:	4462                	lw	s0,24(sp)
204055ea:	6105                	addi	sp,sp,32
204055ec:	8082                	ret

204055ee <metal_gpio_set_pin>:
metal_gpio_set_pin():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/metal/gpio.h:122
 * @param gpio The handle for the GPIO interface
 * @param pin The pin number indexed from 0
 * @param value The value to set the pin to
 * @return 0 if the output is successfully set
 */
__inline__ int metal_gpio_set_pin(struct metal_gpio *gpio, int pin, int value) {
204055ee:	1101                	addi	sp,sp,-32
204055f0:	ce06                	sw	ra,28(sp)
204055f2:	cc22                	sw	s0,24(sp)
204055f4:	1000                	addi	s0,sp,32
204055f6:	fea42623          	sw	a0,-20(s0)
204055fa:	feb42423          	sw	a1,-24(s0)
204055fe:	fec42223          	sw	a2,-28(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/metal/gpio.h:123
    if(!gpio) {
20405602:	fec42783          	lw	a5,-20(s0)
20405606:	e399                	bnez	a5,2040560c <metal_gpio_set_pin+0x1e>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/metal/gpio.h:124
	return 1;
20405608:	4785                	li	a5,1
2040560a:	a089                	j	2040564c <metal_gpio_set_pin+0x5e>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/metal/gpio.h:127
    }

    if(value == 0) {
2040560c:	fe442783          	lw	a5,-28(s0)
20405610:	e385                	bnez	a5,20405630 <metal_gpio_set_pin+0x42>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/metal/gpio.h:128
	return gpio->vtable->output_clear(gpio, (1 << pin));
20405612:	fec42783          	lw	a5,-20(s0)
20405616:	439c                	lw	a5,0(a5)
20405618:	4fd4                	lw	a3,28(a5)
2040561a:	fe842783          	lw	a5,-24(s0)
2040561e:	4705                	li	a4,1
20405620:	00f717b3          	sll	a5,a4,a5
20405624:	85be                	mv	a1,a5
20405626:	fec42503          	lw	a0,-20(s0)
2040562a:	9682                	jalr	a3
2040562c:	87aa                	mv	a5,a0
2040562e:	a839                	j	2040564c <metal_gpio_set_pin+0x5e>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/metal/gpio.h:130
    } else {
	return gpio->vtable->output_set(gpio, (1 << pin));
20405630:	fec42783          	lw	a5,-20(s0)
20405634:	439c                	lw	a5,0(a5)
20405636:	4f94                	lw	a3,24(a5)
20405638:	fe842783          	lw	a5,-24(s0)
2040563c:	4705                	li	a4,1
2040563e:	00f717b3          	sll	a5,a4,a5
20405642:	85be                	mv	a1,a5
20405644:	fec42503          	lw	a0,-20(s0)
20405648:	9682                	jalr	a3
2040564a:	87aa                	mv	a5,a0
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/metal/gpio.h:132
    }
}
2040564c:	853e                	mv	a0,a5
2040564e:	40f2                	lw	ra,28(sp)
20405650:	4462                	lw	s0,24(sp)
20405652:	6105                	addi	sp,sp,32
20405654:	8082                	ret

20405656 <metal_gpio_toggle_pin>:
metal_gpio_toggle_pin():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/metal/gpio.h:194
 * @brief Toggles the value of the GPIO pin
 * @param gpio The handle for the GPIO interface
 * @param pin The pin number indexed from 0
 * @return 0 if the pin is successfully toggled
 */
__inline__ int metal_gpio_toggle_pin(struct metal_gpio *gpio, int pin) {
20405656:	1101                	addi	sp,sp,-32
20405658:	ce06                	sw	ra,28(sp)
2040565a:	cc22                	sw	s0,24(sp)
2040565c:	1000                	addi	s0,sp,32
2040565e:	fea42623          	sw	a0,-20(s0)
20405662:	feb42423          	sw	a1,-24(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/metal/gpio.h:195
    if(!gpio) {
20405666:	fec42783          	lw	a5,-20(s0)
2040566a:	e399                	bnez	a5,20405670 <metal_gpio_toggle_pin+0x1a>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/metal/gpio.h:196
	return 1;
2040566c:	4785                	li	a5,1
2040566e:	a839                	j	2040568c <metal_gpio_toggle_pin+0x36>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/metal/gpio.h:199
    }

    return gpio->vtable->output_toggle(gpio, (1 << pin));
20405670:	fec42783          	lw	a5,-20(s0)
20405674:	439c                	lw	a5,0(a5)
20405676:	5394                	lw	a3,32(a5)
20405678:	fe842783          	lw	a5,-24(s0)
2040567c:	4705                	li	a4,1
2040567e:	00f717b3          	sll	a5,a4,a5
20405682:	85be                	mv	a1,a5
20405684:	fec42503          	lw	a0,-20(s0)
20405688:	9682                	jalr	a3
2040568a:	87aa                	mv	a5,a0
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/metal/gpio.h:200
}
2040568c:	853e                	mv	a0,a5
2040568e:	40f2                	lw	ra,28(sp)
20405690:	4462                	lw	s0,24(sp)
20405692:	6105                	addi	sp,sp,32
20405694:	8082                	ret

20405696 <__metal_shutdown_exit>:
__metal_shutdown_exit():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/metal/shutdown.h:23
struct __metal_shutdown {
    const struct __metal_shutdown_vtable *vtable;
};

__inline__ void __metal_shutdown_exit(const struct __metal_shutdown *sd, int code) __attribute__((noreturn));
__inline__ void __metal_shutdown_exit(const struct __metal_shutdown *sd, int code) { sd->vtable->exit(sd, code); }
20405696:	1101                	addi	sp,sp,-32
20405698:	ce06                	sw	ra,28(sp)
2040569a:	cc22                	sw	s0,24(sp)
2040569c:	1000                	addi	s0,sp,32
2040569e:	fea42623          	sw	a0,-20(s0)
204056a2:	feb42423          	sw	a1,-24(s0)
204056a6:	fec42783          	lw	a5,-20(s0)
204056aa:	439c                	lw	a5,0(a5)
204056ac:	439c                	lw	a5,0(a5)
204056ae:	fe842583          	lw	a1,-24(s0)
204056b2:	fec42503          	lw	a0,-20(s0)
204056b6:	9782                	jalr	a5

204056b8 <metal_shutdown>:
metal_shutdown():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/shutdown.c:11

extern __inline__ void __metal_shutdown_exit(const struct __metal_shutdown *sd, int code);

#if defined(__METAL_DT_SHUTDOWN_HANDLE)
void metal_shutdown(int code)
{
204056b8:	1101                	addi	sp,sp,-32
204056ba:	ce06                	sw	ra,28(sp)
204056bc:	cc22                	sw	s0,24(sp)
204056be:	1000                	addi	s0,sp,32
204056c0:	fea42623          	sw	a0,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/shutdown.c:12
    __metal_shutdown_exit(__METAL_DT_SHUTDOWN_HANDLE, code);
204056c4:	fec42583          	lw	a1,-20(s0)
204056c8:	82818513          	addi	a0,gp,-2008 # 800007b8 <__metal_dt_test_100000>
204056cc:	fcbff0ef          	jal	ra,20405696 <__metal_shutdown_exit>

204056d0 <metal_uart_init>:
metal_uart_init():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/metal/uart.h:44
 * other method on the UART can be invoked. It is invalid to initialize a UART more than once.
 *
 * @param uart The UART device handle
 * @param baud_rate the baud rate to set the UART to
 */
__inline__ void metal_uart_init(struct metal_uart *uart, int baud_rate) { uart->vtable->init(uart, baud_rate); }
204056d0:	1101                	addi	sp,sp,-32
204056d2:	ce06                	sw	ra,28(sp)
204056d4:	cc22                	sw	s0,24(sp)
204056d6:	1000                	addi	s0,sp,32
204056d8:	fea42623          	sw	a0,-20(s0)
204056dc:	feb42423          	sw	a1,-24(s0)
204056e0:	fec42783          	lw	a5,-20(s0)
204056e4:	439c                	lw	a5,0(a5)
204056e6:	439c                	lw	a5,0(a5)
204056e8:	fe842583          	lw	a1,-24(s0)
204056ec:	fec42503          	lw	a0,-20(s0)
204056f0:	9782                	jalr	a5
204056f2:	0001                	nop
204056f4:	40f2                	lw	ra,28(sp)
204056f6:	4462                	lw	s0,24(sp)
204056f8:	6105                	addi	sp,sp,32
204056fa:	8082                	ret

204056fc <metal_uart_putc>:
metal_uart_putc():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/metal/uart.h:52
 * @brief Output a character over the UART
 * @param uart The UART device handle
 * @param c The character to send over the UART
 * @return 0 upon success
 */
__inline__ int metal_uart_putc(struct metal_uart *uart, int c) { return uart->vtable->putc(uart, c); }
204056fc:	1101                	addi	sp,sp,-32
204056fe:	ce06                	sw	ra,28(sp)
20405700:	cc22                	sw	s0,24(sp)
20405702:	1000                	addi	s0,sp,32
20405704:	fea42623          	sw	a0,-20(s0)
20405708:	feb42423          	sw	a1,-24(s0)
2040570c:	fec42783          	lw	a5,-20(s0)
20405710:	439c                	lw	a5,0(a5)
20405712:	43dc                	lw	a5,4(a5)
20405714:	fe842583          	lw	a1,-24(s0)
20405718:	fec42503          	lw	a0,-20(s0)
2040571c:	9782                	jalr	a5
2040571e:	87aa                	mv	a5,a0
20405720:	853e                	mv	a0,a5
20405722:	40f2                	lw	ra,28(sp)
20405724:	4462                	lw	s0,24(sp)
20405726:	6105                	addi	sp,sp,32
20405728:	8082                	ret

2040572a <metal_uart_set_baud_rate>:
metal_uart_set_baud_rate():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/metal/uart.h:85
 * @brief Set the baud rate of the UART peripheral
 * @param uart The UART device handle
 * @param baud_rate The baud rate to configure
 * @return the new baud rate of the UART
 */
__inline__ int metal_uart_set_baud_rate(struct metal_uart *uart, int baud_rate) { return uart->vtable->set_baud_rate(uart, baud_rate); }
2040572a:	1101                	addi	sp,sp,-32
2040572c:	ce06                	sw	ra,28(sp)
2040572e:	cc22                	sw	s0,24(sp)
20405730:	1000                	addi	s0,sp,32
20405732:	fea42623          	sw	a0,-20(s0)
20405736:	feb42423          	sw	a1,-24(s0)
2040573a:	fec42783          	lw	a5,-20(s0)
2040573e:	439c                	lw	a5,0(a5)
20405740:	4bdc                	lw	a5,20(a5)
20405742:	fe842583          	lw	a1,-24(s0)
20405746:	fec42503          	lw	a0,-20(s0)
2040574a:	9782                	jalr	a5
2040574c:	87aa                	mv	a5,a0
2040574e:	853e                	mv	a0,a5
20405750:	40f2                	lw	ra,28(sp)
20405752:	4462                	lw	s0,24(sp)
20405754:	6105                	addi	sp,sp,32
20405756:	8082                	ret
	...

20405780 <__metal_vector_table>:
IRQ_0():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/vector.S:96
#endif
.option norvc
.global __metal_vector_table
__metal_vector_table:
IRQ_0:
        j metal_interrupt_vector_handler
20405780:	e76fc06f          	j	20401df6 <metal_interrupt_vector_handler>

20405784 <IRQ_1>:
IRQ_1():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/vector.S:98
IRQ_1:
        j metal_interrupt_vector_handler
20405784:	e72fc06f          	j	20401df6 <metal_interrupt_vector_handler>

20405788 <IRQ_2>:
IRQ_2():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/vector.S:100
IRQ_2:
        j metal_interrupt_vector_handler
20405788:	e6efc06f          	j	20401df6 <metal_interrupt_vector_handler>

2040578c <IRQ_3>:
IRQ_3():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/vector.S:102
IRQ_3:
        j metal_software_interrupt_vector_handler
2040578c:	e98fc06f          	j	20401e24 <metal_software_interrupt_vector_handler>

20405790 <IRQ_4>:
IRQ_4():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/vector.S:104
IRQ_4:
        j metal_interrupt_vector_handler
20405790:	e66fc06f          	j	20401df6 <metal_interrupt_vector_handler>

20405794 <IRQ_5>:
IRQ_5():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/vector.S:106
IRQ_5:
        j metal_interrupt_vector_handler
20405794:	e62fc06f          	j	20401df6 <metal_interrupt_vector_handler>

20405798 <IRQ_6>:
IRQ_6():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/vector.S:108
IRQ_6:
        j metal_interrupt_vector_handler
20405798:	e5efc06f          	j	20401df6 <metal_interrupt_vector_handler>

2040579c <IRQ_7>:
IRQ_7():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/vector.S:110
IRQ_7:
        j metal_timer_interrupt_vector_handler
2040579c:	f82fc06f          	j	20401f1e <metal_timer_interrupt_vector_handler>

204057a0 <IRQ_8>:
IRQ_8():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/vector.S:112
IRQ_8:
        j metal_interrupt_vector_handler
204057a0:	e56fc06f          	j	20401df6 <metal_interrupt_vector_handler>

204057a4 <IRQ_9>:
IRQ_9():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/vector.S:114
IRQ_9:
        j metal_interrupt_vector_handler
204057a4:	e52fc06f          	j	20401df6 <metal_interrupt_vector_handler>

204057a8 <IRQ_10>:
IRQ_10():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/vector.S:116
IRQ_10:
        j metal_interrupt_vector_handler
204057a8:	e4efc06f          	j	20401df6 <metal_interrupt_vector_handler>

204057ac <IRQ_11>:
IRQ_11():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/vector.S:118
IRQ_11:
        j metal_interrupt_vector_handler
204057ac:	e4afc06f          	j	20401df6 <metal_interrupt_vector_handler>

204057b0 <IRQ_12>:
IRQ_12():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/vector.S:120
IRQ_12:
        j metal_interrupt_vector_handler
204057b0:	e46fc06f          	j	20401df6 <metal_interrupt_vector_handler>

204057b4 <IRQ_13>:
IRQ_13():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/vector.S:122
IRQ_13:
        j metal_interrupt_vector_handler
204057b4:	e42fc06f          	j	20401df6 <metal_interrupt_vector_handler>

204057b8 <IRQ_14>:
IRQ_14():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/vector.S:124
IRQ_14:
        j metal_interrupt_vector_handler
204057b8:	e3efc06f          	j	20401df6 <metal_interrupt_vector_handler>

204057bc <IRQ_15>:
IRQ_15():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/vector.S:126
IRQ_15:
        j metal_interrupt_vector_handler
204057bc:	e3afc06f          	j	20401df6 <metal_interrupt_vector_handler>

204057c0 <IRQ_LC0>:
IRQ_LC0():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/vector.S:128
IRQ_LC0:
        j metal_lc0_interrupt_vector_handler
204057c0:	a3bfc06f          	j	204021fa <metal_lc0_interrupt_vector_handler>

204057c4 <IRQ_LC1>:
IRQ_LC1():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/vector.S:130
IRQ_LC1:
        j metal_lc1_interrupt_vector_handler
204057c4:	acdfc06f          	j	20402290 <metal_lc1_interrupt_vector_handler>

204057c8 <IRQ_LC2>:
IRQ_LC2():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/vector.S:132
IRQ_LC2:
        j metal_lc2_interrupt_vector_handler
204057c8:	b5ffc06f          	j	20402326 <metal_lc2_interrupt_vector_handler>

204057cc <IRQ_LC3>:
IRQ_LC3():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/vector.S:134
IRQ_LC3:
        j metal_lc3_interrupt_vector_handler
204057cc:	bf1fc06f          	j	204023bc <metal_lc3_interrupt_vector_handler>

204057d0 <IRQ_LC4>:
IRQ_LC4():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/vector.S:136
IRQ_LC4:
        j metal_lc4_interrupt_vector_handler
204057d0:	c83fc06f          	j	20402452 <metal_lc4_interrupt_vector_handler>

204057d4 <IRQ_LC5>:
IRQ_LC5():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/vector.S:138
IRQ_LC5:
        j metal_lc5_interrupt_vector_handler
204057d4:	d15fc06f          	j	204024e8 <metal_lc5_interrupt_vector_handler>

204057d8 <IRQ_LC6>:
IRQ_LC6():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/vector.S:140
IRQ_LC6:
        j metal_lc6_interrupt_vector_handler
204057d8:	da7fc06f          	j	2040257e <metal_lc6_interrupt_vector_handler>

204057dc <IRQ_LC7>:
IRQ_LC7():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/vector.S:142
IRQ_LC7:
        j metal_lc7_interrupt_vector_handler
204057dc:	e39fc06f          	j	20402614 <metal_lc7_interrupt_vector_handler>

204057e0 <IRQ_LC8>:
IRQ_LC8():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/vector.S:144
IRQ_LC8:
        j metal_lc8_interrupt_vector_handler
204057e0:	ecbfc06f          	j	204026aa <metal_lc8_interrupt_vector_handler>

204057e4 <IRQ_LC9>:
IRQ_LC9():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/vector.S:146
IRQ_LC9:
        j metal_lc9_interrupt_vector_handler
204057e4:	f5dfc06f          	j	20402740 <metal_lc9_interrupt_vector_handler>

204057e8 <IRQ_LC10>:
IRQ_LC10():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/vector.S:148
IRQ_LC10:
        j metal_lc10_interrupt_vector_handler
204057e8:	feffc06f          	j	204027d6 <metal_lc10_interrupt_vector_handler>

204057ec <IRQ_LC11>:
IRQ_LC11():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/vector.S:150
IRQ_LC11:
        j metal_lc11_interrupt_vector_handler
204057ec:	880fd06f          	j	2040286c <metal_lc11_interrupt_vector_handler>

204057f0 <IRQ_LC12>:
IRQ_LC12():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/vector.S:152
IRQ_LC12:
        j metal_lc12_interrupt_vector_handler
204057f0:	912fd06f          	j	20402902 <metal_lc12_interrupt_vector_handler>

204057f4 <IRQ_LC13>:
IRQ_LC13():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/vector.S:154
IRQ_LC13:
        j metal_lc13_interrupt_vector_handler
204057f4:	9a4fd06f          	j	20402998 <metal_lc13_interrupt_vector_handler>

204057f8 <IRQ_LC14>:
IRQ_LC14():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/vector.S:156
IRQ_LC14:
        j metal_lc14_interrupt_vector_handler
204057f8:	a36fd06f          	j	20402a2e <metal_lc14_interrupt_vector_handler>

204057fc <IRQ_LC15>:
IRQ_LC15():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/vector.S:158
IRQ_LC15:
        j metal_lc15_interrupt_vector_handler
204057fc:	ac8fd06f          	j	20402ac4 <metal_lc15_interrupt_vector_handler>

20405800 <__metal_driver_fixed_clock_rate>:
__metal_driver_fixed_clock_rate():
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:166
{
20405800:	1101                	addi	sp,sp,-32
20405802:	ce22                	sw	s0,28(sp)
20405804:	1000                	addi	s0,sp,32
20405806:	fea42623          	sw	a0,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:167
	if ((uintptr_t)clock == (uintptr_t)&__metal_dt_clock_0) {
2040580a:	fec42703          	lw	a4,-20(s0)
2040580e:	800007b7          	lui	a5,0x80000
20405812:	06c78793          	addi	a5,a5,108 # 8000006c <metal_segment_heap_target_end+0xffffebd4>
20405816:	00f71763          	bne	a4,a5,20405824 <__metal_driver_fixed_clock_rate+0x24>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:168
		return METAL_FIXED_CLOCK_0_CLOCK_FREQUENCY;
2040581a:	00f427b7          	lui	a5,0xf42
2040581e:	40078793          	addi	a5,a5,1024 # f42400 <__heap_size+0xf41c00>
20405822:	a825                	j	2040585a <__metal_driver_fixed_clock_rate+0x5a>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:170
	else if ((uintptr_t)clock == (uintptr_t)&__metal_dt_clock_2) {
20405824:	fec42703          	lw	a4,-20(s0)
20405828:	800007b7          	lui	a5,0x80000
2040582c:	07878793          	addi	a5,a5,120 # 80000078 <metal_segment_heap_target_end+0xffffebe0>
20405830:	00f71763          	bne	a4,a5,2040583e <__metal_driver_fixed_clock_rate+0x3e>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:171
		return METAL_FIXED_CLOCK_2_CLOCK_FREQUENCY;
20405834:	044aa7b7          	lui	a5,0x44aa
20405838:	20078793          	addi	a5,a5,512 # 44aa200 <__heap_size+0x44a9a00>
2040583c:	a839                	j	2040585a <__metal_driver_fixed_clock_rate+0x5a>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:173
	else if ((uintptr_t)clock == (uintptr_t)&__metal_dt_clock_5) {
2040583e:	fec42703          	lw	a4,-20(s0)
20405842:	800007b7          	lui	a5,0x80000
20405846:	08478793          	addi	a5,a5,132 # 80000084 <metal_segment_heap_target_end+0xffffebec>
2040584a:	00f71763          	bne	a4,a5,20405858 <__metal_driver_fixed_clock_rate+0x58>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:174
		return METAL_FIXED_CLOCK_5_CLOCK_FREQUENCY;
2040584e:	01e857b7          	lui	a5,0x1e85
20405852:	80078793          	addi	a5,a5,-2048 # 1e84800 <__heap_size+0x1e84000>
20405856:	a011                	j	2040585a <__metal_driver_fixed_clock_rate+0x5a>
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:177
		return 0;
20405858:	4781                	li	a5,0
/Users/i/Documents/Risc-V/freedom-e-sdk/bsp/qemu-sifive-e31/build/debug/./metal/machine.h:179
}
2040585a:	853e                	mv	a0,a5
2040585c:	4472                	lw	s0,28(sp)
2040585e:	6105                	addi	sp,sp,32
20405860:	8082                	ret

20405862 <__metal_driver_fixed_clock_get_rate_hz>:
__metal_driver_fixed_clock_get_rate_hz():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:13
#include <metal/drivers/fixed-clock.h>
#include <stddef.h>
#include <metal/machine.h>

long __metal_driver_fixed_clock_get_rate_hz(const struct metal_clock *gclk)
{
20405862:	1101                	addi	sp,sp,-32
20405864:	ce06                	sw	ra,28(sp)
20405866:	cc22                	sw	s0,24(sp)
20405868:	1000                	addi	s0,sp,32
2040586a:	fea42623          	sw	a0,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:14
    return __metal_driver_fixed_clock_rate(gclk);
2040586e:	fec42503          	lw	a0,-20(s0)
20405872:	f8fff0ef          	jal	ra,20405800 <__metal_driver_fixed_clock_rate>
20405876:	87aa                	mv	a5,a0
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:15
}
20405878:	853e                	mv	a0,a5
2040587a:	40f2                	lw	ra,28(sp)
2040587c:	4462                	lw	s0,24(sp)
2040587e:	6105                	addi	sp,sp,32
20405880:	8082                	ret

20405882 <__metal_driver_fixed_clock_set_rate_hz>:
__metal_driver_fixed_clock_set_rate_hz():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:18

long __metal_driver_fixed_clock_set_rate_hz(struct metal_clock *gclk, long target_hz)
{
20405882:	1101                	addi	sp,sp,-32
20405884:	ce06                	sw	ra,28(sp)
20405886:	cc22                	sw	s0,24(sp)
20405888:	1000                	addi	s0,sp,32
2040588a:	fea42623          	sw	a0,-20(s0)
2040588e:	feb42423          	sw	a1,-24(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:19
    return __metal_driver_fixed_clock_get_rate_hz(gclk);
20405892:	fec42503          	lw	a0,-20(s0)
20405896:	fcdff0ef          	jal	ra,20405862 <__metal_driver_fixed_clock_get_rate_hz>
2040589a:	87aa                	mv	a5,a0
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:20
}
2040589c:	853e                	mv	a0,a5
2040589e:	40f2                	lw	ra,28(sp)
204058a0:	4462                	lw	s0,24(sp)
204058a2:	6105                	addi	sp,sp,32
204058a4:	8082                	ret

204058a6 <_close>:
_close():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/gloss/sys_close.c:5
#include <errno.h>

int
_close(int file)
{
204058a6:	1101                	addi	sp,sp,-32
204058a8:	ce06                	sw	ra,28(sp)
204058aa:	cc22                	sw	s0,24(sp)
204058ac:	1000                	addi	s0,sp,32
204058ae:	fea42623          	sw	a0,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/gloss/sys_close.c:6
  errno = ENOSYS;
204058b2:	2249                	jal	20405a34 <__errno>
204058b4:	872a                	mv	a4,a0
204058b6:	05800793          	li	a5,88
204058ba:	c31c                	sw	a5,0(a4)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/gloss/sys_close.c:7
  return -1;
204058bc:	57fd                	li	a5,-1
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/gloss/sys_close.c:8
}
204058be:	853e                	mv	a0,a5
204058c0:	40f2                	lw	ra,28(sp)
204058c2:	4462                	lw	s0,24(sp)
204058c4:	6105                	addi	sp,sp,32
204058c6:	8082                	ret

204058c8 <_fstat>:
_fstat():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:6
#include <errno.h>
#include <sys/stat.h>

int
_fstat(int file, struct stat *st)
{
204058c8:	1101                	addi	sp,sp,-32
204058ca:	ce06                	sw	ra,28(sp)
204058cc:	cc22                	sw	s0,24(sp)
204058ce:	1000                	addi	s0,sp,32
204058d0:	fea42623          	sw	a0,-20(s0)
204058d4:	feb42423          	sw	a1,-24(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:7
  errno = -ENOSYS;
204058d8:	2ab1                	jal	20405a34 <__errno>
204058da:	872a                	mv	a4,a0
204058dc:	fa800793          	li	a5,-88
204058e0:	c31c                	sw	a5,0(a4)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:8
  return -1;
204058e2:	57fd                	li	a5,-1
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:9
}
204058e4:	853e                	mv	a0,a5
204058e6:	40f2                	lw	ra,28(sp)
204058e8:	4462                	lw	s0,24(sp)
204058ea:	6105                	addi	sp,sp,32
204058ec:	8082                	ret

204058ee <_isatty>:
_isatty():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/gloss/sys_isatty.c:5
#include <unistd.h>

int
_isatty(int file)
{
204058ee:	1101                	addi	sp,sp,-32
204058f0:	ce22                	sw	s0,28(sp)
204058f2:	1000                	addi	s0,sp,32
204058f4:	fea42623          	sw	a0,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/gloss/sys_isatty.c:6
  return (file == STDOUT_FILENO);
204058f8:	fec42783          	lw	a5,-20(s0)
204058fc:	17fd                	addi	a5,a5,-1
204058fe:	0017b793          	seqz	a5,a5
20405902:	0ff7f793          	andi	a5,a5,255
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/gloss/sys_isatty.c:7
}
20405906:	853e                	mv	a0,a5
20405908:	4472                	lw	s0,28(sp)
2040590a:	6105                	addi	sp,sp,32
2040590c:	8082                	ret

2040590e <_lseek>:
_lseek():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:6
#include <sys/types.h>
#include <errno.h>

off_t
_lseek(int file, off_t ptr, int dir)
{
2040590e:	1101                	addi	sp,sp,-32
20405910:	ce06                	sw	ra,28(sp)
20405912:	cc22                	sw	s0,24(sp)
20405914:	1000                	addi	s0,sp,32
20405916:	fea42623          	sw	a0,-20(s0)
2040591a:	feb42423          	sw	a1,-24(s0)
2040591e:	fec42223          	sw	a2,-28(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:7
  errno = ENOSYS;
20405922:	2a09                	jal	20405a34 <__errno>
20405924:	872a                	mv	a4,a0
20405926:	05800793          	li	a5,88
2040592a:	c31c                	sw	a5,0(a4)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:8
  return -1;
2040592c:	57fd                	li	a5,-1
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:9
}
2040592e:	853e                	mv	a0,a5
20405930:	40f2                	lw	ra,28(sp)
20405932:	4462                	lw	s0,24(sp)
20405934:	6105                	addi	sp,sp,32
20405936:	8082                	ret

20405938 <_read>:
_read():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/gloss/sys_read.c:6
#include <sys/types.h>
#include <errno.h>

ssize_t
_read(int file, void *ptr, size_t len)
{
20405938:	1101                	addi	sp,sp,-32
2040593a:	ce06                	sw	ra,28(sp)
2040593c:	cc22                	sw	s0,24(sp)
2040593e:	1000                	addi	s0,sp,32
20405940:	fea42623          	sw	a0,-20(s0)
20405944:	feb42423          	sw	a1,-24(s0)
20405948:	fec42223          	sw	a2,-28(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/gloss/sys_read.c:7
  errno = ENOSYS;
2040594c:	20e5                	jal	20405a34 <__errno>
2040594e:	872a                	mv	a4,a0
20405950:	05800793          	li	a5,88
20405954:	c31c                	sw	a5,0(a4)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/gloss/sys_read.c:8
  return -1;
20405956:	57fd                	li	a5,-1
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/gloss/sys_read.c:9
}
20405958:	853e                	mv	a0,a5
2040595a:	40f2                	lw	ra,28(sp)
2040595c:	4462                	lw	s0,24(sp)
2040595e:	6105                	addi	sp,sp,32
20405960:	8082                	ret

20405962 <_sbrk>:
_sbrk():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:22
  return 0;
}

char *
_sbrk(ptrdiff_t incr)
{
20405962:	7179                	addi	sp,sp,-48
20405964:	d622                	sw	s0,44(sp)
20405966:	1800                	addi	s0,sp,48
20405968:	fca42e23          	sw	a0,-36(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:23
  char *old = brk;
2040596c:	8541a783          	lw	a5,-1964(gp) # 800007e4 <brk>
20405970:	fef42623          	sw	a5,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:26

  /* If __heap_size == 0, we can't allocate memory on the heap */
  if(&metal_segment_heap_target_start == &metal_segment_heap_target_end) {
20405974:	d0818713          	addi	a4,gp,-760 # 80000c98 <_sp>
20405978:	50818793          	addi	a5,gp,1288 # 80001498 <metal_segment_heap_target_end>
2040597c:	00f71463          	bne	a4,a5,20405984 <_sbrk+0x22>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:27
    return (void *)-1;
20405980:	57fd                	li	a5,-1
20405982:	a80d                	j	204059b4 <_sbrk+0x52>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:31
  }

  /* Don't move the break past the end of the heap */
  if ((brk + incr) < &metal_segment_heap_target_end) {
20405984:	8541a703          	lw	a4,-1964(gp) # 800007e4 <brk>
20405988:	fdc42783          	lw	a5,-36(s0)
2040598c:	973e                	add	a4,a4,a5
2040598e:	50818793          	addi	a5,gp,1288 # 80001498 <metal_segment_heap_target_end>
20405992:	00f77c63          	bgeu	a4,a5,204059aa <_sbrk+0x48>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:32
    brk += incr;
20405996:	8541a703          	lw	a4,-1964(gp) # 800007e4 <brk>
2040599a:	fdc42783          	lw	a5,-36(s0)
2040599e:	973e                	add	a4,a4,a5
204059a0:	84e1aa23          	sw	a4,-1964(gp) # 800007e4 <brk>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:38
  } else {
    brk = &metal_segment_heap_target_end;
    return (void *)-1;
  }

  return old;
204059a4:	fec42783          	lw	a5,-20(s0)
204059a8:	a031                	j	204059b4 <_sbrk+0x52>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:34
    brk = &metal_segment_heap_target_end;
204059aa:	50818713          	addi	a4,gp,1288 # 80001498 <metal_segment_heap_target_end>
204059ae:	84e1aa23          	sw	a4,-1964(gp) # 800007e4 <brk>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:35
    return (void *)-1;
204059b2:	57fd                	li	a5,-1
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:39
}
204059b4:	853e                	mv	a0,a5
204059b6:	5432                	lw	s0,44(sp)
204059b8:	6145                	addi	sp,sp,48
204059ba:	8082                	ret

204059bc <_write>:
_write():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/gloss/sys_write.c:9
#include <unistd.h>

/* Write to a file.  */
ssize_t
_write(int file, const void *ptr, size_t len)
{
204059bc:	7179                	addi	sp,sp,-48
204059be:	d606                	sw	ra,44(sp)
204059c0:	d422                	sw	s0,40(sp)
204059c2:	1800                	addi	s0,sp,48
204059c4:	fca42e23          	sw	a0,-36(s0)
204059c8:	fcb42c23          	sw	a1,-40(s0)
204059cc:	fcc42a23          	sw	a2,-44(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/gloss/sys_write.c:10
  if (file != STDOUT_FILENO) {
204059d0:	fdc42703          	lw	a4,-36(s0)
204059d4:	4785                	li	a5,1
204059d6:	00f70963          	beq	a4,a5,204059e8 <_write+0x2c>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/gloss/sys_write.c:11
    errno = ENOSYS;
204059da:	28a9                	jal	20405a34 <__errno>
204059dc:	872a                	mv	a4,a0
204059de:	05800793          	li	a5,88
204059e2:	c31c                	sw	a5,0(a4)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/gloss/sys_write.c:12
    return -1;
204059e4:	57fd                	li	a5,-1
204059e6:	a82d                	j	20405a20 <_write+0x64>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/gloss/sys_write.c:15
  }

  const char *bptr = ptr;
204059e8:	fd842783          	lw	a5,-40(s0)
204059ec:	fef42423          	sw	a5,-24(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/gloss/sys_write.c:16
  for (size_t i = 0; i < len; ++i)
204059f0:	fe042623          	sw	zero,-20(s0)
204059f4:	a839                	j	20405a12 <_write+0x56>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/gloss/sys_write.c:17 (discriminator 3)
    metal_tty_putc(bptr[i]);
204059f6:	fe842703          	lw	a4,-24(s0)
204059fa:	fec42783          	lw	a5,-20(s0)
204059fe:	97ba                	add	a5,a5,a4
20405a00:	0007c783          	lbu	a5,0(a5)
20405a04:	853e                	mv	a0,a5
20405a06:	265d                	jal	20405dac <metal_tty_putc>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/gloss/sys_write.c:16 (discriminator 3)
  for (size_t i = 0; i < len; ++i)
20405a08:	fec42783          	lw	a5,-20(s0)
20405a0c:	0785                	addi	a5,a5,1
20405a0e:	fef42623          	sw	a5,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/gloss/sys_write.c:16 (discriminator 1)
20405a12:	fec42703          	lw	a4,-20(s0)
20405a16:	fd442783          	lw	a5,-44(s0)
20405a1a:	fcf76ee3          	bltu	a4,a5,204059f6 <_write+0x3a>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/gloss/sys_write.c:18
  return 0;
20405a1e:	4781                	li	a5,0
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/gloss/sys_write.c:19
}
20405a20:	853e                	mv	a0,a5
20405a22:	50b2                	lw	ra,44(sp)
20405a24:	5422                	lw	s0,40(sp)
20405a26:	6145                	addi	sp,sp,48
20405a28:	8082                	ret

20405a2a <atexit>:
atexit():
20405a2a:	85aa                	mv	a1,a0
20405a2c:	4681                	li	a3,0
20405a2e:	4601                	li	a2,0
20405a30:	4501                	li	a0,0
20405a32:	a42d                	j	20405c5c <__register_exitproc>

20405a34 <__errno>:
__errno():
20405a34:	5fbfb797          	auipc	a5,0x5fbfb
20405a38:	d5c78793          	addi	a5,a5,-676 # 80000790 <_impure_ptr>
20405a3c:	4388                	lw	a0,0(a5)
20405a3e:	8082                	ret

20405a40 <exit>:
exit():
20405a40:	1141                	addi	sp,sp,-16
20405a42:	c422                	sw	s0,8(sp)
20405a44:	c606                	sw	ra,12(sp)
20405a46:	00000797          	auipc	a5,0x0
20405a4a:	29e78793          	addi	a5,a5,670 # 20405ce4 <__call_exitprocs>
20405a4e:	842a                	mv	s0,a0
20405a50:	c399                	beqz	a5,20405a56 <exit+0x16>
20405a52:	4581                	li	a1,0
20405a54:	2c41                	jal	20405ce4 <__call_exitprocs>
20405a56:	5fbfb797          	auipc	a5,0x5fbfb
20405a5a:	d3e78793          	addi	a5,a5,-706 # 80000794 <_global_impure_ptr>
20405a5e:	4388                	lw	a0,0(a5)
20405a60:	551c                	lw	a5,40(a0)
20405a62:	c391                	beqz	a5,20405a66 <exit+0x26>
20405a64:	9782                	jalr	a5
20405a66:	8522                	mv	a0,s0
20405a68:	2e75                	jal	20405e24 <_exit>

20405a6a <__libc_fini_array>:
__libc_fini_array():
20405a6a:	1141                	addi	sp,sp,-16
20405a6c:	00001797          	auipc	a5,0x1
20405a70:	4d878793          	addi	a5,a5,1240 # 20406f44 <__fini_array_end>
20405a74:	c422                	sw	s0,8(sp)
20405a76:	00001417          	auipc	s0,0x1
20405a7a:	4ce40413          	addi	s0,s0,1230 # 20406f44 <__fini_array_end>
20405a7e:	8c1d                	sub	s0,s0,a5
20405a80:	c226                	sw	s1,4(sp)
20405a82:	c606                	sw	ra,12(sp)
20405a84:	8409                	srai	s0,s0,0x2
20405a86:	84be                	mv	s1,a5
20405a88:	e411                	bnez	s0,20405a94 <__libc_fini_array+0x2a>
20405a8a:	40b2                	lw	ra,12(sp)
20405a8c:	4422                	lw	s0,8(sp)
20405a8e:	4492                	lw	s1,4(sp)
20405a90:	0141                	addi	sp,sp,16
20405a92:	8082                	ret
20405a94:	147d                	addi	s0,s0,-1
20405a96:	00241793          	slli	a5,s0,0x2
20405a9a:	97a6                	add	a5,a5,s1
20405a9c:	439c                	lw	a5,0(a5)
20405a9e:	9782                	jalr	a5
20405aa0:	b7e5                	j	20405a88 <__libc_fini_array+0x1e>

20405aa2 <__libc_init_array>:
__libc_init_array():
20405aa2:	1141                	addi	sp,sp,-16
20405aa4:	00001797          	auipc	a5,0x1
20405aa8:	49478793          	addi	a5,a5,1172 # 20406f38 <__init_array_start>
20405aac:	c422                	sw	s0,8(sp)
20405aae:	00001417          	auipc	s0,0x1
20405ab2:	48a40413          	addi	s0,s0,1162 # 20406f38 <__init_array_start>
20405ab6:	8c1d                	sub	s0,s0,a5
20405ab8:	c226                	sw	s1,4(sp)
20405aba:	c04a                	sw	s2,0(sp)
20405abc:	c606                	sw	ra,12(sp)
20405abe:	8409                	srai	s0,s0,0x2
20405ac0:	4481                	li	s1,0
20405ac2:	893e                	mv	s2,a5
20405ac4:	02849663          	bne	s1,s0,20405af0 <__libc_init_array+0x4e>
20405ac8:	00001797          	auipc	a5,0x1
20405acc:	47078793          	addi	a5,a5,1136 # 20406f38 <__init_array_start>
20405ad0:	00001417          	auipc	s0,0x1
20405ad4:	47440413          	addi	s0,s0,1140 # 20406f44 <__fini_array_end>
20405ad8:	8c1d                	sub	s0,s0,a5
20405ada:	8409                	srai	s0,s0,0x2
20405adc:	4481                	li	s1,0
20405ade:	893e                	mv	s2,a5
20405ae0:	00849f63          	bne	s1,s0,20405afe <__libc_init_array+0x5c>
20405ae4:	40b2                	lw	ra,12(sp)
20405ae6:	4422                	lw	s0,8(sp)
20405ae8:	4492                	lw	s1,4(sp)
20405aea:	4902                	lw	s2,0(sp)
20405aec:	0141                	addi	sp,sp,16
20405aee:	8082                	ret
20405af0:	00249793          	slli	a5,s1,0x2
20405af4:	97ca                	add	a5,a5,s2
20405af6:	439c                	lw	a5,0(a5)
20405af8:	0485                	addi	s1,s1,1
20405afa:	9782                	jalr	a5
20405afc:	b7e1                	j	20405ac4 <__libc_init_array+0x22>
20405afe:	00249793          	slli	a5,s1,0x2
20405b02:	97ca                	add	a5,a5,s2
20405b04:	439c                	lw	a5,0(a5)
20405b06:	0485                	addi	s1,s1,1
20405b08:	9782                	jalr	a5
20405b0a:	bfd9                	j	20405ae0 <__libc_init_array+0x3e>

20405b0c <strcat>:
strcat():
20405b0c:	87aa                	mv	a5,a0
20405b0e:	0007c703          	lbu	a4,0(a5)
20405b12:	00178693          	addi	a3,a5,1
20405b16:	eb09                	bnez	a4,20405b28 <strcat+0x1c>
20405b18:	0585                	addi	a1,a1,1
20405b1a:	fff5c703          	lbu	a4,-1(a1)
20405b1e:	0785                	addi	a5,a5,1
20405b20:	fee78fa3          	sb	a4,-1(a5)
20405b24:	fb75                	bnez	a4,20405b18 <strcat+0xc>
20405b26:	8082                	ret
20405b28:	87b6                	mv	a5,a3
20405b2a:	b7d5                	j	20405b0e <strcat+0x2>

20405b2c <strcmp>:
strcmp():
20405b2c:	00b56733          	or	a4,a0,a1
20405b30:	53fd                	li	t2,-1
20405b32:	8b0d                	andi	a4,a4,3
20405b34:	e779                	bnez	a4,20405c02 <strcmp+0xd6>
20405b36:	7f7f87b7          	lui	a5,0x7f7f8
20405b3a:	f7f78793          	addi	a5,a5,-129 # 7f7f7f7f <metal_segment_data_source_start+0x5f3f1037>
20405b3e:	4110                	lw	a2,0(a0)
20405b40:	4194                	lw	a3,0(a1)
20405b42:	00f672b3          	and	t0,a2,a5
20405b46:	00f66333          	or	t1,a2,a5
20405b4a:	92be                	add	t0,t0,a5
20405b4c:	0062e2b3          	or	t0,t0,t1
20405b50:	0c729763          	bne	t0,t2,20405c1e <strcmp+0xf2>
20405b54:	06d61863          	bne	a2,a3,20405bc4 <strcmp+0x98>
20405b58:	4150                	lw	a2,4(a0)
20405b5a:	41d4                	lw	a3,4(a1)
20405b5c:	00f672b3          	and	t0,a2,a5
20405b60:	00f66333          	or	t1,a2,a5
20405b64:	92be                	add	t0,t0,a5
20405b66:	0062e2b3          	or	t0,t0,t1
20405b6a:	0a729863          	bne	t0,t2,20405c1a <strcmp+0xee>
20405b6e:	04d61b63          	bne	a2,a3,20405bc4 <strcmp+0x98>
20405b72:	4510                	lw	a2,8(a0)
20405b74:	4594                	lw	a3,8(a1)
20405b76:	00f672b3          	and	t0,a2,a5
20405b7a:	00f66333          	or	t1,a2,a5
20405b7e:	92be                	add	t0,t0,a5
20405b80:	0062e2b3          	or	t0,t0,t1
20405b84:	0a729163          	bne	t0,t2,20405c26 <strcmp+0xfa>
20405b88:	02d61e63          	bne	a2,a3,20405bc4 <strcmp+0x98>
20405b8c:	4550                	lw	a2,12(a0)
20405b8e:	45d4                	lw	a3,12(a1)
20405b90:	00f672b3          	and	t0,a2,a5
20405b94:	00f66333          	or	t1,a2,a5
20405b98:	92be                	add	t0,t0,a5
20405b9a:	0062e2b3          	or	t0,t0,t1
20405b9e:	08729a63          	bne	t0,t2,20405c32 <strcmp+0x106>
20405ba2:	02d61163          	bne	a2,a3,20405bc4 <strcmp+0x98>
20405ba6:	4910                	lw	a2,16(a0)
20405ba8:	4994                	lw	a3,16(a1)
20405baa:	00f672b3          	and	t0,a2,a5
20405bae:	00f66333          	or	t1,a2,a5
20405bb2:	92be                	add	t0,t0,a5
20405bb4:	0062e2b3          	or	t0,t0,t1
20405bb8:	08729363          	bne	t0,t2,20405c3e <strcmp+0x112>
20405bbc:	0551                	addi	a0,a0,20
20405bbe:	05d1                	addi	a1,a1,20
20405bc0:	f6d60fe3          	beq	a2,a3,20405b3e <strcmp+0x12>
20405bc4:	01061713          	slli	a4,a2,0x10
20405bc8:	01069793          	slli	a5,a3,0x10
20405bcc:	00f71c63          	bne	a4,a5,20405be4 <strcmp+0xb8>
20405bd0:	01065713          	srli	a4,a2,0x10
20405bd4:	0106d793          	srli	a5,a3,0x10
20405bd8:	40f70533          	sub	a0,a4,a5
20405bdc:	0ff57593          	andi	a1,a0,255
20405be0:	e991                	bnez	a1,20405bf4 <strcmp+0xc8>
20405be2:	8082                	ret
20405be4:	8341                	srli	a4,a4,0x10
20405be6:	83c1                	srli	a5,a5,0x10
20405be8:	40f70533          	sub	a0,a4,a5
20405bec:	0ff57593          	andi	a1,a0,255
20405bf0:	e191                	bnez	a1,20405bf4 <strcmp+0xc8>
20405bf2:	8082                	ret
20405bf4:	0ff77713          	andi	a4,a4,255
20405bf8:	0ff7f793          	andi	a5,a5,255
20405bfc:	40f70533          	sub	a0,a4,a5
20405c00:	8082                	ret
20405c02:	00054603          	lbu	a2,0(a0)
20405c06:	0005c683          	lbu	a3,0(a1)
20405c0a:	0505                	addi	a0,a0,1
20405c0c:	0585                	addi	a1,a1,1
20405c0e:	00d61363          	bne	a2,a3,20405c14 <strcmp+0xe8>
20405c12:	fa65                	bnez	a2,20405c02 <strcmp+0xd6>
20405c14:	40d60533          	sub	a0,a2,a3
20405c18:	8082                	ret
20405c1a:	0511                	addi	a0,a0,4
20405c1c:	0591                	addi	a1,a1,4
20405c1e:	fed612e3          	bne	a2,a3,20405c02 <strcmp+0xd6>
20405c22:	4501                	li	a0,0
20405c24:	8082                	ret
20405c26:	0521                	addi	a0,a0,8
20405c28:	05a1                	addi	a1,a1,8
20405c2a:	fcd61ce3          	bne	a2,a3,20405c02 <strcmp+0xd6>
20405c2e:	4501                	li	a0,0
20405c30:	8082                	ret
20405c32:	0531                	addi	a0,a0,12
20405c34:	05b1                	addi	a1,a1,12
20405c36:	fcd616e3          	bne	a2,a3,20405c02 <strcmp+0xd6>
20405c3a:	4501                	li	a0,0
20405c3c:	8082                	ret
20405c3e:	0541                	addi	a0,a0,16
20405c40:	05c1                	addi	a1,a1,16
20405c42:	fcd610e3          	bne	a2,a3,20405c02 <strcmp+0xd6>
20405c46:	4501                	li	a0,0
20405c48:	8082                	ret

20405c4a <strcpy>:
strcpy():
20405c4a:	87aa                	mv	a5,a0
20405c4c:	0005c703          	lbu	a4,0(a1)
20405c50:	0785                	addi	a5,a5,1
20405c52:	0585                	addi	a1,a1,1
20405c54:	fee78fa3          	sb	a4,-1(a5)
20405c58:	fb75                	bnez	a4,20405c4c <strcpy+0x2>
20405c5a:	8082                	ret

20405c5c <__register_exitproc>:
__register_exitproc():
20405c5c:	5fbfb797          	auipc	a5,0x5fbfb
20405c60:	b9478793          	addi	a5,a5,-1132 # 800007f0 <_global_atexit>
20405c64:	439c                	lw	a5,0(a5)
20405c66:	8e2a                	mv	t3,a0
20405c68:	e39d                	bnez	a5,20405c8e <__register_exitproc+0x32>
20405c6a:	5fbfb717          	auipc	a4,0x5fbfb
20405c6e:	b8a70713          	addi	a4,a4,-1142 # 800007f4 <_global_atexit0>
20405c72:	5fbfb797          	auipc	a5,0x5fbfb
20405c76:	b6e7af23          	sw	a4,-1154(a5) # 800007f0 <_global_atexit>
20405c7a:	dfbfa517          	auipc	a0,0xdfbfa
20405c7e:	38650513          	addi	a0,a0,902 # 0 <__metal_boot_hart>
20405c82:	87ba                	mv	a5,a4
20405c84:	c509                	beqz	a0,20405c8e <__register_exitproc+0x32>
20405c86:	411c                	lw	a5,0(a0)
20405c88:	8ef1a623          	sw	a5,-1812(gp) # 8000087c <_global_atexit0+0x88>
20405c8c:	87ba                	mv	a5,a4
20405c8e:	43d8                	lw	a4,4(a5)
20405c90:	487d                	li	a6,31
20405c92:	557d                	li	a0,-1
20405c94:	04e84763          	blt	a6,a4,20405ce2 <__register_exitproc+0x86>
20405c98:	020e0e63          	beqz	t3,20405cd4 <__register_exitproc+0x78>
20405c9c:	0887a803          	lw	a6,136(a5)
20405ca0:	04080163          	beqz	a6,20405ce2 <__register_exitproc+0x86>
20405ca4:	00271893          	slli	a7,a4,0x2
20405ca8:	98c2                	add	a7,a7,a6
20405caa:	00c8a023          	sw	a2,0(a7)
20405cae:	10082303          	lw	t1,256(a6)
20405cb2:	4605                	li	a2,1
20405cb4:	00e61633          	sll	a2,a2,a4
20405cb8:	00c36333          	or	t1,t1,a2
20405cbc:	10682023          	sw	t1,256(a6)
20405cc0:	08d8a023          	sw	a3,128(a7)
20405cc4:	4689                	li	a3,2
20405cc6:	00de1763          	bne	t3,a3,20405cd4 <__register_exitproc+0x78>
20405cca:	10482683          	lw	a3,260(a6)
20405cce:	8e55                	or	a2,a2,a3
20405cd0:	10c82223          	sw	a2,260(a6)
20405cd4:	00170693          	addi	a3,a4,1
20405cd8:	070a                	slli	a4,a4,0x2
20405cda:	c3d4                	sw	a3,4(a5)
20405cdc:	97ba                	add	a5,a5,a4
20405cde:	c78c                	sw	a1,8(a5)
20405ce0:	4501                	li	a0,0
20405ce2:	8082                	ret

20405ce4 <__call_exitprocs>:
__call_exitprocs():
20405ce4:	7179                	addi	sp,sp,-48
20405ce6:	cc52                	sw	s4,24(sp)
20405ce8:	ca56                	sw	s5,20(sp)
20405cea:	c85a                	sw	s6,16(sp)
20405cec:	c65e                	sw	s7,12(sp)
20405cee:	d606                	sw	ra,44(sp)
20405cf0:	d422                	sw	s0,40(sp)
20405cf2:	d226                	sw	s1,36(sp)
20405cf4:	d04a                	sw	s2,32(sp)
20405cf6:	ce4e                	sw	s3,28(sp)
20405cf8:	c462                	sw	s8,8(sp)
20405cfa:	8b2a                	mv	s6,a0
20405cfc:	8a2e                	mv	s4,a1
20405cfe:	5fbfba97          	auipc	s5,0x5fbfb
20405d02:	af2a8a93          	addi	s5,s5,-1294 # 800007f0 <_global_atexit>
20405d06:	4b85                	li	s7,1
20405d08:	000aa403          	lw	s0,0(s5)
20405d0c:	c811                	beqz	s0,20405d20 <__call_exitprocs+0x3c>
20405d0e:	4044                	lw	s1,4(s0)
20405d10:	08842983          	lw	s3,136(s0)
20405d14:	fff48913          	addi	s2,s1,-1
20405d18:	048a                	slli	s1,s1,0x2
20405d1a:	94a2                	add	s1,s1,s0
20405d1c:	00095e63          	bgez	s2,20405d38 <__call_exitprocs+0x54>
20405d20:	50b2                	lw	ra,44(sp)
20405d22:	5422                	lw	s0,40(sp)
20405d24:	5492                	lw	s1,36(sp)
20405d26:	5902                	lw	s2,32(sp)
20405d28:	49f2                	lw	s3,28(sp)
20405d2a:	4a62                	lw	s4,24(sp)
20405d2c:	4ad2                	lw	s5,20(sp)
20405d2e:	4b42                	lw	s6,16(sp)
20405d30:	4bb2                	lw	s7,12(sp)
20405d32:	4c22                	lw	s8,8(sp)
20405d34:	6145                	addi	sp,sp,48
20405d36:	8082                	ret
20405d38:	000a0e63          	beqz	s4,20405d54 <__call_exitprocs+0x70>
20405d3c:	00099563          	bnez	s3,20405d46 <__call_exitprocs+0x62>
20405d40:	197d                	addi	s2,s2,-1
20405d42:	14f1                	addi	s1,s1,-4
20405d44:	bfe1                	j	20405d1c <__call_exitprocs+0x38>
20405d46:	00291793          	slli	a5,s2,0x2
20405d4a:	97ce                	add	a5,a5,s3
20405d4c:	0807a783          	lw	a5,128(a5)
20405d50:	ff4798e3          	bne	a5,s4,20405d40 <__call_exitprocs+0x5c>
20405d54:	4058                	lw	a4,4(s0)
20405d56:	40dc                	lw	a5,4(s1)
20405d58:	177d                	addi	a4,a4,-1
20405d5a:	03271863          	bne	a4,s2,20405d8a <__call_exitprocs+0xa6>
20405d5e:	01242223          	sw	s2,4(s0)
20405d62:	dff9                	beqz	a5,20405d40 <__call_exitprocs+0x5c>
20405d64:	00442c03          	lw	s8,4(s0)
20405d68:	00098863          	beqz	s3,20405d78 <__call_exitprocs+0x94>
20405d6c:	1009a683          	lw	a3,256(s3)
20405d70:	012b9733          	sll	a4,s7,s2
20405d74:	8ef9                	and	a3,a3,a4
20405d76:	ee89                	bnez	a3,20405d90 <__call_exitprocs+0xac>
20405d78:	9782                	jalr	a5
20405d7a:	4058                	lw	a4,4(s0)
20405d7c:	000aa783          	lw	a5,0(s5)
20405d80:	f98714e3          	bne	a4,s8,20405d08 <__call_exitprocs+0x24>
20405d84:	faf40ee3          	beq	s0,a5,20405d40 <__call_exitprocs+0x5c>
20405d88:	b741                	j	20405d08 <__call_exitprocs+0x24>
20405d8a:	0004a223          	sw	zero,4(s1)
20405d8e:	bfd1                	j	20405d62 <__call_exitprocs+0x7e>
20405d90:	00291693          	slli	a3,s2,0x2
20405d94:	96ce                	add	a3,a3,s3
20405d96:	428c                	lw	a1,0(a3)
20405d98:	1049a683          	lw	a3,260(s3)
20405d9c:	8f75                	and	a4,a4,a3
20405d9e:	e701                	bnez	a4,20405da6 <__call_exitprocs+0xc2>
20405da0:	855a                	mv	a0,s6
20405da2:	9782                	jalr	a5
20405da4:	bfd9                	j	20405d7a <__call_exitprocs+0x96>
20405da6:	852e                	mv	a0,a1
20405da8:	9782                	jalr	a5
20405daa:	bfc1                	j	20405d7a <__call_exitprocs+0x96>

20405dac <metal_tty_putc>:
metal_tty_putc():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/tty.c:12

#if defined(__METAL_DT_STDOUT_UART_HANDLE)
/* This implementation serves as a small shim that interfaces with the first
 * UART on a system. */
int metal_tty_putc(int c)
{
20405dac:	1101                	addi	sp,sp,-32
20405dae:	ce06                	sw	ra,28(sp)
20405db0:	cc22                	sw	s0,24(sp)
20405db2:	1000                	addi	s0,sp,32
20405db4:	fea42623          	sw	a0,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/tty.c:13
    if (c == '\n') {
20405db8:	fec42703          	lw	a4,-20(s0)
20405dbc:	47a9                	li	a5,10
20405dbe:	00f71463          	bne	a4,a5,20405dc6 <metal_tty_putc+0x1a>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/tty.c:14
        metal_tty_putc_raw( '\r' );
20405dc2:	4535                	li	a0,13
20405dc4:	2811                	jal	20405dd8 <metal_tty_putc_raw>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/tty.c:16
    }
    return metal_tty_putc_raw( c );
20405dc6:	fec42503          	lw	a0,-20(s0)
20405dca:	2039                	jal	20405dd8 <metal_tty_putc_raw>
20405dcc:	87aa                	mv	a5,a0
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/tty.c:17
}
20405dce:	853e                	mv	a0,a5
20405dd0:	40f2                	lw	ra,28(sp)
20405dd2:	4462                	lw	s0,24(sp)
20405dd4:	6105                	addi	sp,sp,32
20405dd6:	8082                	ret

20405dd8 <metal_tty_putc_raw>:
metal_tty_putc_raw():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/tty.c:20

int metal_tty_putc_raw(int c)
{
20405dd8:	1101                	addi	sp,sp,-32
20405dda:	ce06                	sw	ra,28(sp)
20405ddc:	cc22                	sw	s0,24(sp)
20405dde:	1000                	addi	s0,sp,32
20405de0:	fea42623          	sw	a0,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/tty.c:21
    return metal_uart_putc(__METAL_DT_STDOUT_UART_HANDLE, c);
20405de4:	fec42583          	lw	a1,-20(s0)
20405de8:	800007b7          	lui	a5,0x80000
20405dec:	74878513          	addi	a0,a5,1864 # 80000748 <metal_segment_heap_target_end+0xfffff2b0>
20405df0:	90dff0ef          	jal	ra,204056fc <metal_uart_putc>
20405df4:	87aa                	mv	a5,a0
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/tty.c:22
}
20405df6:	853e                	mv	a0,a5
20405df8:	40f2                	lw	ra,28(sp)
20405dfa:	4462                	lw	s0,24(sp)
20405dfc:	6105                	addi	sp,sp,32
20405dfe:	8082                	ret

20405e00 <metal_tty_init>:
metal_tty_init():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/tty.c:40
#define __METAL_DT_STDOUT_UART_BAUD 115200
#endif

static void metal_tty_init(void) __attribute__((constructor));
static void metal_tty_init(void)
{
20405e00:	1141                	addi	sp,sp,-16
20405e02:	c606                	sw	ra,12(sp)
20405e04:	c422                	sw	s0,8(sp)
20405e06:	0800                	addi	s0,sp,16
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/tty.c:41
    metal_uart_init(__METAL_DT_STDOUT_UART_HANDLE, __METAL_DT_STDOUT_UART_BAUD);
20405e08:	67f1                	lui	a5,0x1c
20405e0a:	20078593          	addi	a1,a5,512 # 1c200 <__heap_size+0x1ba00>
20405e0e:	800007b7          	lui	a5,0x80000
20405e12:	74878513          	addi	a0,a5,1864 # 80000748 <metal_segment_heap_target_end+0xfffff2b0>
20405e16:	8bbff0ef          	jal	ra,204056d0 <metal_uart_init>
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/src/tty.c:42
}
20405e1a:	0001                	nop
20405e1c:	40b2                	lw	ra,12(sp)
20405e1e:	4422                	lw	s0,8(sp)
20405e20:	0141                	addi	sp,sp,16
20405e22:	8082                	ret

20405e24 <_exit>:
_exit():
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/gloss/sys_exit.c:5
#include <metal/shutdown.h>

void
_exit(int exit_status)
{
20405e24:	1101                	addi	sp,sp,-32
20405e26:	ce06                	sw	ra,28(sp)
20405e28:	cc22                	sw	s0,24(sp)
20405e2a:	1000                	addi	s0,sp,32
20405e2c:	fea42623          	sw	a0,-20(s0)
/Users/i/Documents/Risc-V/freedom-e-sdk/freedom-metal/gloss/sys_exit.c:6
  metal_shutdown(exit_status);
20405e30:	fec42503          	lw	a0,-20(s0)
20405e34:	885ff0ef          	jal	ra,204056b8 <metal_shutdown>
